
APP_Trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000052c  08005130  08005130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800565c  0800565c  00010008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800565c  0800565c  00010008  2**0
                  CONTENTS
  4 .ARM          00000000  0800565c  0800565c  00010008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800565c  0800565c  00010008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005664  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000008  0800566c  00010008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  0800566c  00010060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002cef  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001169  00000000  00000000  00012d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00001016  00000000  00000000  00013ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000408  00000000  00000000  00014ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000031e  00000000  00000000  000152f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001ccc  00000000  00000000  0001560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000027e3  00000000  00000000  000172da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000085d5  00000000  00000000  00019abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000814  00000000  00000000  00022094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005130 <__do_global_dtors_aux>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4c05      	ldr	r4, [pc, #20]	; (8005148 <__do_global_dtors_aux+0x18>)
 8005134:	7823      	ldrb	r3, [r4, #0]
 8005136:	b933      	cbnz	r3, 8005146 <__do_global_dtors_aux+0x16>
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <__do_global_dtors_aux+0x1c>)
 800513a:	b113      	cbz	r3, 8005142 <__do_global_dtors_aux+0x12>
 800513c:	4804      	ldr	r0, [pc, #16]	; (8005150 <__do_global_dtors_aux+0x20>)
 800513e:	f3af 8000 	nop.w
 8005142:	2301      	movs	r3, #1
 8005144:	7023      	strb	r3, [r4, #0]
 8005146:	bd10      	pop	{r4, pc}
 8005148:	20000008 	.word	0x20000008
 800514c:	00000000 	.word	0x00000000
 8005150:	08005644 	.word	0x08005644

08005154 <frame_dummy>:
 8005154:	b508      	push	{r3, lr}
 8005156:	4b03      	ldr	r3, [pc, #12]	; (8005164 <frame_dummy+0x10>)
 8005158:	b11b      	cbz	r3, 8005162 <frame_dummy+0xe>
 800515a:	4903      	ldr	r1, [pc, #12]	; (8005168 <frame_dummy+0x14>)
 800515c:	4803      	ldr	r0, [pc, #12]	; (800516c <frame_dummy+0x18>)
 800515e:	f3af 8000 	nop.w
 8005162:	bd08      	pop	{r3, pc}
 8005164:	00000000 	.word	0x00000000
 8005168:	2000000c 	.word	0x2000000c
 800516c:	08005644 	.word	0x08005644

08005170 <GPIO_voidDirectionInit>:
	//PortA Direction
	GPIOA->CRL  = PORTA_DIR1;
	GPIOA->CRH  = PORTA_DIR;

	//PortB Direction
	GPIOB->CRL  = PORTB_DIR1;
 8005170:	f04f 3122 	mov.w	r1, #572662306	; 0x22222222
	GPIOA->CRL  = PORTA_DIR1;
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <GPIO_voidDirectionInit+0x30>)
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <GPIO_voidDirectionInit+0x34>)
	GPIOB->CRH  = PORTB_DIR;
	
	//PortC Direction
	GPIOC->CRH  = PORTC_DIR;
 8005178:	480b      	ldr	r0, [pc, #44]	; (80051a8 <GPIO_voidDirectionInit+0x38>)
	GPIOA->CRL  = PORTA_DIR1;
 800517a:	6013      	str	r3, [r2, #0]
	GPIOA->CRH  = PORTA_DIR;
 800517c:	f503 2311 	add.w	r3, r3, #593920	; 0x91000
 8005180:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8005184:	6053      	str	r3, [r2, #4]
	GPIOB->CRL  = PORTB_DIR1;
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <GPIO_voidDirectionInit+0x3c>)
 8005188:	6019      	str	r1, [r3, #0]
	GPIOB->CRH  = PORTB_DIR;
 800518a:	6059      	str	r1, [r3, #4]
	GPIOC->CRH  = PORTC_DIR;
 800518c:	4908      	ldr	r1, [pc, #32]	; (80051b0 <GPIO_voidDirectionInit+0x40>)
 800518e:	6048      	str	r0, [r1, #4]
	
	//Ports Initial Value
	GPIOA->ODR  = PORTA_VAlUE;
 8005190:	2000      	movs	r0, #0
 8005192:	60d0      	str	r0, [r2, #12]
	GPIOB->ODR  = PORTB_VALUE;
 8005194:	60d8      	str	r0, [r3, #12]
	GPIOC->ODR  = PORTC_VALUE;
 8005196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800519a:	60cb      	str	r3, [r1, #12]
}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010800 	.word	0x40010800
 80051a4:	22222444 	.word	0x22222444
 80051a8:	22200000 	.word	0x22200000
 80051ac:	40010c00 	.word	0x40010c00
 80051b0:	40011000 	.word	0x40011000

080051b4 <GPIO_u8SetPinValue>:

//Seting Output value for certain pin
u8 GPIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = OK ;
	if (Copy_u8Pin <= GPIO_PIN_15)	//Input Validation
 80051b4:	290f      	cmp	r1, #15
{
 80051b6:	4603      	mov	r3, r0
 80051b8:	b510      	push	{r4, lr}
 80051ba:	4610      	mov	r0, r2
	if (Copy_u8Pin <= GPIO_PIN_15)	//Input Validation
 80051bc:	d831      	bhi.n	8005222 <GPIO_u8SetPinValue+0x6e>
		//Output High
		if(Copy_u8Value == GPIO_PIN_HIGH)
 80051be:	2a01      	cmp	r2, #1
 80051c0:	d117      	bne.n	80051f2 <GPIO_u8SetPinValue+0x3e>
			switch (Copy_u8Port)
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d00a      	beq.n	80051dc <GPIO_u8SetPinValue+0x28>
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d00f      	beq.n	80051ea <GPIO_u8SetPinValue+0x36>
 80051ca:	b933      	cbnz	r3, 80051da <GPIO_u8SetPinValue+0x26>
			{
				case GPIO_PORTA : SET_BIT(GPIOA->ODR,Copy_u8Pin);break;
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <GPIO_u8SetPinValue+0x74>)
 80051ce:	fa00 f101 	lsl.w	r1, r0, r1
 80051d2:	68d4      	ldr	r4, [r2, #12]
 80051d4:	4321      	orrs	r1, r4
 80051d6:	60d1      	str	r1, [r2, #12]
	u8 Local_u8ErrorState = OK ;
 80051d8:	2000      	movs	r0, #0
	//Wrong Input
	else 
		Local_u8ErrorState =NOK ;
	
	return Local_u8ErrorState ;
}
 80051da:	bd10      	pop	{r4, pc}
				case GPIO_PORTB : SET_BIT(GPIOB->ODR,Copy_u8Pin);break;
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <GPIO_u8SetPinValue+0x78>)
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	fa00 f101 	lsl.w	r1, r0, r1
 80051e4:	4311      	orrs	r1, r2
 80051e6:	60d9      	str	r1, [r3, #12]
 80051e8:	e7f6      	b.n	80051d8 <GPIO_u8SetPinValue+0x24>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)SET_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 80051ea:	290c      	cmp	r1, #12
 80051ec:	d9f5      	bls.n	80051da <GPIO_u8SetPinValue+0x26>
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <GPIO_u8SetPinValue+0x7c>)
 80051f0:	e7f5      	b.n	80051de <GPIO_u8SetPinValue+0x2a>
		else if(Copy_u8Value == GPIO_PIN_LOW)
 80051f2:	b9b2      	cbnz	r2, 8005222 <GPIO_u8SetPinValue+0x6e>
			switch (Copy_u8Port)
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d009      	beq.n	800520c <GPIO_u8SetPinValue+0x58>
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d00e      	beq.n	800521a <GPIO_u8SetPinValue+0x66>
 80051fc:	b98b      	cbnz	r3, 8005222 <GPIO_u8SetPinValue+0x6e>
				case GPIO_PORTA : CLR_BIT(GPIOA->ODR,Copy_u8Pin);break;
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <GPIO_u8SetPinValue+0x74>)
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)CLR_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 8005200:	2401      	movs	r4, #1
 8005202:	68d3      	ldr	r3, [r2, #12]
 8005204:	408c      	lsls	r4, r1
 8005206:	ea23 0304 	bic.w	r3, r3, r4
 800520a:	e004      	b.n	8005216 <GPIO_u8SetPinValue+0x62>
				case GPIO_PORTB : CLR_BIT(GPIOB->ODR,Copy_u8Pin);break;
 800520c:	4a07      	ldr	r2, [pc, #28]	; (800522c <GPIO_u8SetPinValue+0x78>)
 800520e:	408b      	lsls	r3, r1
 8005210:	68d4      	ldr	r4, [r2, #12]
 8005212:	ea24 0303 	bic.w	r3, r4, r3
 8005216:	60d3      	str	r3, [r2, #12]
 8005218:	e7df      	b.n	80051da <GPIO_u8SetPinValue+0x26>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)CLR_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 800521a:	290c      	cmp	r1, #12
 800521c:	d901      	bls.n	8005222 <GPIO_u8SetPinValue+0x6e>
 800521e:	4a04      	ldr	r2, [pc, #16]	; (8005230 <GPIO_u8SetPinValue+0x7c>)
 8005220:	e7ee      	b.n	8005200 <GPIO_u8SetPinValue+0x4c>
		Local_u8ErrorState =NOK ;
 8005222:	2001      	movs	r0, #1
 8005224:	e7d9      	b.n	80051da <GPIO_u8SetPinValue+0x26>
 8005226:	bf00      	nop
 8005228:	40010800 	.word	0x40010800
 800522c:	40010c00 	.word	0x40010c00
 8005230:	40011000 	.word	0x40011000

08005234 <RCC_u8ChangeModeBuses>:

//Changing Bus Mode
u8 RCC_u8ChangeModeBuses(u8 Copy_u8SysClock , u8 Copy_u8StateBus)
{
	u8 Local_u8StateError = OK;
	if(Copy_u8StateBus == RCC_ENABLE)
 8005234:	2901      	cmp	r1, #1
{
 8005236:	4603      	mov	r3, r0
 8005238:	4608      	mov	r0, r1
	if(Copy_u8StateBus == RCC_ENABLE)
 800523a:	d124      	bne.n	8005286 <RCC_u8ChangeModeBuses+0x52>
		switch (Copy_u8SysClock)
 800523c:	2b10      	cmp	r3, #16
 800523e:	d010      	beq.n	8005262 <RCC_u8ChangeModeBuses+0x2e>
 8005240:	2b18      	cmp	r3, #24
 8005242:	d017      	beq.n	8005274 <RCC_u8ChangeModeBuses+0x40>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d143      	bne.n	80052d0 <RCC_u8ChangeModeBuses+0x9c>
		{
			case RCC_CR_HSI:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)==0);break;
 8005248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800524c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	0790      	lsls	r0, r2, #30
 800525c:	d5fc      	bpl.n	8005258 <RCC_u8ChangeModeBuses+0x24>
	u8 Local_u8StateError = OK;
 800525e:	2000      	movs	r0, #0
 8005260:	4770      	bx	lr
			case RCC_CR_HSE:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)==0);break;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <RCC_u8ChangeModeBuses+0xa0>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	0391      	lsls	r1, r2, #14
 8005270:	d5fc      	bpl.n	800526c <RCC_u8ChangeModeBuses+0x38>
 8005272:	e7f4      	b.n	800525e <RCC_u8ChangeModeBuses+0x2a>
			case RCC_CR_PLL:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)==0);break;
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <RCC_u8ChangeModeBuses+0xa0>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	0192      	lsls	r2, r2, #6
 8005282:	d5fc      	bpl.n	800527e <RCC_u8ChangeModeBuses+0x4a>
 8005284:	e7eb      	b.n	800525e <RCC_u8ChangeModeBuses+0x2a>
			default: Local_u8StateError = NOK; break;	//Wrong Input
		}

	else if (Copy_u8StateBus == RCC_DISABLE)
 8005286:	bb11      	cbnz	r1, 80052ce <RCC_u8ChangeModeBuses+0x9a>
		switch (Copy_u8SysClock)
 8005288:	2b10      	cmp	r3, #16
 800528a:	d00e      	beq.n	80052aa <RCC_u8ChangeModeBuses+0x76>
 800528c:	2b18      	cmp	r3, #24
 800528e:	d015      	beq.n	80052bc <RCC_u8ChangeModeBuses+0x88>
 8005290:	b9eb      	cbnz	r3, 80052ce <RCC_u8ChangeModeBuses+0x9a>
		{
			case RCC_CR_HSI:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)!=0);break;
 8005292:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005296:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	0790      	lsls	r0, r2, #30
 80052a6:	d4fc      	bmi.n	80052a2 <RCC_u8ChangeModeBuses+0x6e>
 80052a8:	e7d9      	b.n	800525e <RCC_u8ChangeModeBuses+0x2a>
			case RCC_CR_HSE:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)!=0);break;
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <RCC_u8ChangeModeBuses+0xa0>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	0391      	lsls	r1, r2, #14
 80052b8:	d4fc      	bmi.n	80052b4 <RCC_u8ChangeModeBuses+0x80>
 80052ba:	e7d0      	b.n	800525e <RCC_u8ChangeModeBuses+0x2a>
			case RCC_CR_PLL:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)!=0);break;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <RCC_u8ChangeModeBuses+0xa0>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	0192      	lsls	r2, r2, #6
 80052ca:	d4fc      	bmi.n	80052c6 <RCC_u8ChangeModeBuses+0x92>
 80052cc:	e7c7      	b.n	800525e <RCC_u8ChangeModeBuses+0x2a>
		switch (Copy_u8SysClock)
 80052ce:	2001      	movs	r0, #1
	//Wrong Input
	else
		Local_u8StateError = NOK;

	return Local_u8StateError ;
}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000

080052d8 <RCC_voidAjustmentClockSys>:
void RCC_voidAjustmentClockSys ()
{
	u32 Local_u8RealValue ; // the value of HSICAL
	u8 Local_u8ChangeValue ;
	u8 Local_u8EditionValue ; // the value of the HSITRIM
	Local_u8RealValue = 255|(RCC->CR>>8); /***************EDIT***********/
 80052d8:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <RCC_voidAjustmentClockSys+0x1c>)
 80052da:	6813      	ldr	r3, [r2, #0]
	if (Local_u8RealValue != RCC_HSI_SPEED)
	{
		Local_u8ChangeValue = Local_u8RealValue - RCC_HSI_SPEED ;
		Local_u8ChangeValue /= 40 ;/***************EDIT***********/
		Local_u8EditionValue= (31 | (RCC->CR>>3)) + 40 ;/***************EDIT***********/
 80052dc:	6813      	ldr	r3, [r2, #0]
		RCC->CR |=(Local_u8EditionValue <<3);/***************EDIT***********/
 80052de:	6811      	ldr	r1, [r2, #0]
		Local_u8EditionValue= (31 | (RCC->CR>>3)) + 40 ;/***************EDIT***********/
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f043 031f 	orr.w	r3, r3, #31
 80052e6:	3328      	adds	r3, #40	; 0x28
		RCC->CR |=(Local_u8EditionValue <<3);/***************EDIT***********/
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3
 80052ee:	6013      	str	r3, [r2, #0]
	}
}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000

080052f8 <RCC_voidInit>:
{
 80052f8:	b508      	push	{r3, lr}
	RCC_u8ChangeModeBuses (RCC_CR_HSI , RCC_ENABLE) ;
 80052fa:	2101      	movs	r1, #1
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7ff ff99 	bl	8005234 <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_HSE , RCC_ENABLE) ;
 8005302:	2101      	movs	r1, #1
 8005304:	2010      	movs	r0, #16
 8005306:	f7ff ff95 	bl	8005234 <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_PLL , RCC_ENABLE) ;
 800530a:	2101      	movs	r1, #1
 800530c:	2018      	movs	r0, #24
 800530e:	f7ff ff91 	bl	8005234 <RCC_u8ChangeModeBuses>
	RCC->CFGR&=~(3<<0);/***************EDIT***********/
 8005312:	4827      	ldr	r0, [pc, #156]	; (80053b0 <RCC_voidInit+0xb8>)
 8005314:	6843      	ldr	r3, [r0, #4]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	6043      	str	r3, [r0, #4]
	RCC->CFGR|=RCC_HSI_SELECTION ;
 800531c:	6843      	ldr	r3, [r0, #4]
 800531e:	6043      	str	r3, [r0, #4]
	CLR_BIT (RCC->CR ,RCC_ENABLE );
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	f023 0302 	bic.w	r3, r3, #2
 8005326:	6003      	str	r3, [r0, #0]
	RCC->CFGR&=~(7<<8);	/***************EDIT***********/
 8005328:	6843      	ldr	r3, [r0, #4]
 800532a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800532e:	6043      	str	r3, [r0, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<8);/***************EDIT***********/
 8005330:	6843      	ldr	r3, [r0, #4]
 8005332:	6043      	str	r3, [r0, #4]
	RCC->CFGR&=~(7<<11);/***************EDIT***********/
 8005334:	6843      	ldr	r3, [r0, #4]
 8005336:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800533a:	6043      	str	r3, [r0, #4]
	RCC->CFGR|=(RCC_APB2_PRESCALER<<11);/***************EDIT***********/
 800533c:	6843      	ldr	r3, [r0, #4]
 800533e:	6043      	str	r3, [r0, #4]
	RCC->CFGR&=~(15<<4);/***************EDIT***********/
 8005340:	6843      	ldr	r3, [r0, #4]
 8005342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005346:	6043      	str	r3, [r0, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<4);/***************EDIT***********/
 8005348:	6843      	ldr	r3, [r0, #4]
 800534a:	6043      	str	r3, [r0, #4]
	RCC->CFGR&=~(4<<18);/***************EDIT***********/
 800534c:	6843      	ldr	r3, [r0, #4]
 800534e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005352:	6043      	str	r3, [r0, #4]
	RCC->CFGR|=(RCC_PLL_MULL<<18);/***************EDIT***********/
 8005354:	6843      	ldr	r3, [r0, #4]
 8005356:	6043      	str	r3, [r0, #4]
	RCC_voidAjustmentClockSys();
 8005358:	f7ff ffbe 	bl	80052d8 <RCC_voidAjustmentClockSys>
	SET_BIT(RCC->APB2ENR,(RCC_USART1-RCC_APB2_OFFSET));
 800535c:	6983      	ldr	r3, [r0, #24]
 800535e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005362:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB2ENR,(RCC_TIM1-RCC_APB2_OFFSET));
 8005364:	6983      	ldr	r3, [r0, #24]
 8005366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800536a:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB2ENR,(RCC_ADC1-RCC_APB2_OFFSET));
 800536c:	6983      	ldr	r3, [r0, #24]
 800536e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005372:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB2ENR,(RCC_IOPC-RCC_APB2_OFFSET));
 8005374:	6983      	ldr	r3, [r0, #24]
 8005376:	f043 0310 	orr.w	r3, r3, #16
 800537a:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB2ENR,(RCC_IOPB-RCC_APB2_OFFSET));
 800537c:	6983      	ldr	r3, [r0, #24]
 800537e:	f043 0308 	orr.w	r3, r3, #8
 8005382:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB2ENR,(RCC_IOPA-RCC_APB2_OFFSET));
 8005384:	6983      	ldr	r3, [r0, #24]
 8005386:	f043 0304 	orr.w	r3, r3, #4
 800538a:	6183      	str	r3, [r0, #24]
	SET_BIT(RCC->APB1ENR,(RCC_CAN	-RCC_APB1_OFFSET));
 800538c:	69c3      	ldr	r3, [r0, #28]
 800538e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005392:	61c3      	str	r3, [r0, #28]
	SET_BIT(RCC->APB1ENR,(RCC_USB	-RCC_APB1_OFFSET));
 8005394:	69c3      	ldr	r3, [r0, #28]
 8005396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800539a:	61c3      	str	r3, [r0, #28]
	SET_BIT(RCC->APB1ENR,(RCC_WWDG-RCC_APB1_OFFSET));
 800539c:	69c3      	ldr	r3, [r0, #28]
 800539e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053a2:	61c3      	str	r3, [r0, #28]
	SET_BIT(RCC->APB1ENR,(RCC_TIM2-RCC_APB1_OFFSET));
 80053a4:	69c3      	ldr	r3, [r0, #28]
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	61c3      	str	r3, [r0, #28]
}
 80053ac:	bd08      	pop	{r3, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <NVIC_voidInit>:

//Initialinzing NVIC 
void NVIC_voidInit(void)
{
	//Configuration Number of Groups and number of sub group
	SCB_AIRCR = (VETKEY)|(NVIC_GROUP<<8);
 80053b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80053b8:	4a01      	ldr	r2, [pc, #4]	; (80053c0 <NVIC_voidInit+0xc>)
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	05fa0300 	.word	0x05fa0300

080053c4 <EXTI0_IRQHandler>:
{
	EXTI_CallBack[Copy_u8InterruptLine] = Copy_pvCallBackFunc; 
}

void EXTI0_IRQHandler(void)
{
 80053c4:	b508      	push	{r3, lr}
	EXTI_CallBack[EXTI_LINE0]();
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <EXTI0_IRQHandler+0x14>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE0);
 80053cc:	4a03      	ldr	r2, [pc, #12]	; (80053dc <EXTI0_IRQHandler+0x18>)
 80053ce:	6953      	ldr	r3, [r2, #20]
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6153      	str	r3, [r2, #20]
}
 80053d6:	bd08      	pop	{r3, pc}
 80053d8:	20000024 	.word	0x20000024
 80053dc:	40010400 	.word	0x40010400

080053e0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80053e0:	b508      	push	{r3, lr}
	EXTI_CallBack[EXTI_LINE1]();
 80053e2:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <EXTI1_IRQHandler+0x14>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE1);
 80053e8:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <EXTI1_IRQHandler+0x18>)
 80053ea:	6953      	ldr	r3, [r2, #20]
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	6153      	str	r3, [r2, #20]
}
 80053f2:	bd08      	pop	{r3, pc}
 80053f4:	20000024 	.word	0x20000024
 80053f8:	40010400 	.word	0x40010400

080053fc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80053fc:	b508      	push	{r3, lr}
	EXTI_CallBack[EXTI_LINE2]();
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <EXTI2_IRQHandler+0x14>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE2);
 8005404:	4a03      	ldr	r2, [pc, #12]	; (8005414 <EXTI2_IRQHandler+0x18>)
 8005406:	6953      	ldr	r3, [r2, #20]
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6153      	str	r3, [r2, #20]
}
 800540e:	bd08      	pop	{r3, pc}
 8005410:	20000024 	.word	0x20000024
 8005414:	40010400 	.word	0x40010400

08005418 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8005418:	b508      	push	{r3, lr}
	EXTI_CallBack[EXTI_LINE3]();
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <EXTI3_IRQHandler+0x14>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE3);
 8005420:	4a03      	ldr	r2, [pc, #12]	; (8005430 <EXTI3_IRQHandler+0x18>)
 8005422:	6953      	ldr	r3, [r2, #20]
 8005424:	f043 0308 	orr.w	r3, r3, #8
 8005428:	6153      	str	r3, [r2, #20]
}
 800542a:	bd08      	pop	{r3, pc}
 800542c:	20000024 	.word	0x20000024
 8005430:	40010400 	.word	0x40010400

08005434 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8005434:	b508      	push	{r3, lr}
	EXTI_CallBack[EXTI_LINE4]();
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <EXTI4_IRQHandler+0x14>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE4);
 800543c:	4a03      	ldr	r2, [pc, #12]	; (800544c <EXTI4_IRQHandler+0x18>)
 800543e:	6953      	ldr	r3, [r2, #20]
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	6153      	str	r3, [r2, #20]
}
 8005446:	bd08      	pop	{r3, pc}
 8005448:	20000024 	.word	0x20000024
 800544c:	40010400 	.word	0x40010400

08005450 <USART1_IRQHandler>:
}

//ISR for USART1
void USART1_IRQHandler (void)
{
	if (GET_BIT(USART_Get(USART1)->CR1,USART_RXNIE))
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <USART1_IRQHandler+0x10>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	069b      	lsls	r3, r3, #26
 8005456:	d502      	bpl.n	800545e <USART1_IRQHandler+0xe>
		USART_voidCallBackFunc[USART1]();
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <USART1_IRQHandler+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4718      	bx	r3
}
 800545e:	4770      	bx	lr
 8005460:	40013800 	.word	0x40013800
 8005464:	20000038 	.word	0x20000038

08005468 <USART2_IRQHandler>:

//ISR for USART2
void USART2_IRQHandler (void)
{
	if (GET_BIT(USART_Get(USART2)->CR1,USART_RXNIE))
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <USART2_IRQHandler+0x10>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	069b      	lsls	r3, r3, #26
 800546e:	d502      	bpl.n	8005476 <USART2_IRQHandler+0xe>
		USART_voidCallBackFunc[USART2]();
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <USART2_IRQHandler+0x14>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4718      	bx	r3
}
 8005476:	4770      	bx	lr
 8005478:	40004400 	.word	0x40004400
 800547c:	20000038 	.word	0x20000038

08005480 <USART3_IRQHandler>:

//ISR for USART3
void USART3_IRQHandler (void)
{
	if (GET_BIT(USART_Get(USART3)->CR1,USART_RXNIE))
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <USART3_IRQHandler+0x10>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	069b      	lsls	r3, r3, #26
 8005486:	d502      	bpl.n	800548e <USART3_IRQHandler+0xe>
		USART_voidCallBackFunc[USART3]();
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <USART3_IRQHandler+0x14>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4718      	bx	r3
}
 800548e:	4770      	bx	lr
 8005490:	40004800 	.word	0x40004800
 8005494:	20000038 	.word	0x20000038

08005498 <USB_LP_CAN_RX0_IRQHandler>:
}


void USB_LP_CAN_RX0_IRQHandler(void)
{
	if (CAN->RF0R & CAN_FIFO_FMP)
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	079b      	lsls	r3, r3, #30
 800549e:	d002      	beq.n	80054a6 <USB_LP_CAN_RX0_IRQHandler+0xe>
	{
		CAN_CallBack[0]();
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <USB_LP_CAN_RX0_IRQHandler+0x14>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4718      	bx	r3
	}

}
 80054a6:	4770      	bx	lr
 80054a8:	40006400 	.word	0x40006400
 80054ac:	20000044 	.word	0x20000044

080054b0 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler (void)
{
	if (CAN->RF1R & CAN_FIFO_FMP)
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <CAN_RX1_IRQHandler+0x10>)
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	079b      	lsls	r3, r3, #30
 80054b6:	d002      	beq.n	80054be <CAN_RX1_IRQHandler+0xe>
	{
		CAN_CallBack[1]();
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <CAN_RX1_IRQHandler+0x14>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4718      	bx	r3
	}
}
 80054be:	4770      	bx	lr
 80054c0:	40006400 	.word	0x40006400
 80054c4:	20000044 	.word	0x20000044

080054c8 <SysTick_Handler>:
}



void SysTick_Handler (void)
{
 80054c8:	b508      	push	{r3, lr}
	u8 Local_u8Val = 0 ;

	if (STK_u32_MODE == STK_SINGLE_MODE)
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <SysTick_Handler+0x28>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	b93a      	cbnz	r2, 80054e0 <SysTick_Handler+0x18>
	{
		/*Disable the Timer*/
		CLR_BIT(STK->STK_CTRL, EN_ABLE) ;
 80054d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054d4:	6919      	ldr	r1, [r3, #16]
 80054d6:	f021 0101 	bic.w	r1, r1, #1
 80054da:	6119      	str	r1, [r3, #16]
		STK->STK_LOAD =0 ;
 80054dc:	615a      	str	r2, [r3, #20]
		STK->STK_VAL = 0;
 80054de:	619a      	str	r2, [r3, #24]
	}

	STK_voidCallBackFunc();
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <SysTick_Handler+0x2c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4798      	blx	r3

	Local_u8Val=GET_BIT(STK->STK_CTRL,COUNT_FLAG);
 80054e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054ea:	691b      	ldr	r3, [r3, #16]


}
 80054ec:	bd08      	pop	{r3, pc}
 80054ee:	bf00      	nop
 80054f0:	2000004c 	.word	0x2000004c
 80054f4:	20000050 	.word	0x20000050

080054f8 <FPEC_voidInit>:

//Initializing FPEC
void FPEC_voidInit(void)
{
	//Enter the latency of the flash
	FPEC->FLASH_ACR = FPEC_LATENCY ;
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <FPEC_voidInit+0x18>)
 80054fc:	601a      	str	r2, [r3, #0]

	//Unlock the flash and FPEC_CR
	if (GET_BIT(FPEC->FLASH_CR,7)== 1)
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	0612      	lsls	r2, r2, #24
	{
		FPEC->FLASH_KEYR =  0x45670123;
 8005502:	bf41      	itttt	mi
 8005504:	4a03      	ldrmi	r2, [pc, #12]	; (8005514 <FPEC_voidInit+0x1c>)
 8005506:	605a      	strmi	r2, [r3, #4]
		FPEC->FLASH_KEYR =  0xCDEF89AB;
 8005508:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 800550c:	605a      	strmi	r2, [r3, #4]
	}
}
 800550e:	4770      	bx	lr
 8005510:	40022000 	.word	0x40022000
 8005514:	45670123 	.word	0x45670123

08005518 <TIM2_IRQHandler>:
	tim->CCR[Local_u8Channel-1] = Copy_u16Period * Copy_u16DutyCycle;

}

void TIM2_IRQHandler(void)
{
 8005518:	b508      	push	{r3, lr}
	TIMER_t* timer = Get_timer(TIM2);
	TIM2_CallBack();
 800551a:	4b04      	ldr	r3, [pc, #16]	; (800552c <TIM2_IRQHandler+0x14>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4798      	blx	r3
	timer->SR = 0U; 		// reset interrupt
 8005520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005524:	2200      	movs	r2, #0
 8005526:	611a      	str	r2, [r3, #16]
}
 8005528:	bd08      	pop	{r3, pc}
 800552a:	bf00      	nop
 800552c:	20000054 	.word	0x20000054

08005530 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8005530:	b508      	push	{r3, lr}
	TIMER_t *tim3 = Get_timer(TIM3);
	TIM3_CallBack();
 8005532:	4b03      	ldr	r3, [pc, #12]	; (8005540 <TIM3_IRQHandler+0x10>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4798      	blx	r3
	tim3->SR = 0U;
 8005538:	2200      	movs	r2, #0
 800553a:	4b02      	ldr	r3, [pc, #8]	; (8005544 <TIM3_IRQHandler+0x14>)
 800553c:	611a      	str	r2, [r3, #16]
}
 800553e:	bd08      	pop	{r3, pc}
 8005540:	20000058 	.word	0x20000058
 8005544:	40000400 	.word	0x40000400

08005548 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8005548:	b508      	push	{r3, lr}
	TIMER_t *tim4 = Get_timer(TIM4);
	TIM4_CallBack();
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <TIM4_IRQHandler+0x10>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4798      	blx	r3
	tim4->SR = 0U;
 8005550:	2200      	movs	r2, #0
 8005552:	4b02      	ldr	r3, [pc, #8]	; (800555c <TIM4_IRQHandler+0x14>)
 8005554:	611a      	str	r2, [r3, #16]
}
 8005556:	bd08      	pop	{r3, pc}
 8005558:	2000005c 	.word	0x2000005c
 800555c:	40000800 	.word	0x40000800

08005560 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
	u8 Local_u8Counter;
	Local_u8Counter++;
}
 8005560:	4770      	bx	lr

08005562 <LED_voidLedOn>:
#include "LED_interface.h"
#include "LED_private.h"

//Turning LED On
void LED_voidLedOn(LED_t* Copy_pLED_tStructLed)
{
 8005562:	4603      	mov	r3, r0
	if(Copy_pLED_tStructLed->LED_u8Connection == LED_ACTIVE_HIGH)
 8005564:	789a      	ldrb	r2, [r3, #2]
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_HIGH);
 8005566:	7800      	ldrb	r0, [r0, #0]
	if(Copy_pLED_tStructLed->LED_u8Connection == LED_ACTIVE_HIGH)
 8005568:	2a01      	cmp	r2, #1
	else
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_LOW);
 800556a:	bf18      	it	ne
 800556c:	2200      	movne	r2, #0
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_HIGH);
 800556e:	7859      	ldrb	r1, [r3, #1]
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_LOW);
 8005570:	f7ff be20 	b.w	80051b4 <GPIO_u8SetPinValue>

08005574 <SYS_voidAppInit>:

	
}

void SYS_voidAppInit()
{
 8005574:	b508      	push	{r3, lr}
	RCC_voidInit();
 8005576:	f7ff febf 	bl	80052f8 <RCC_voidInit>
	GPIO_voidDirectionInit();
 800557a:	f7ff fdf9 	bl	8005170 <GPIO_voidDirectionInit>
	NVIC_voidInit();
 800557e:	f7ff ff19 	bl	80053b4 <NVIC_voidInit>
	FPEC_voidInit();
}
 8005582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FPEC_voidInit();
 8005586:	f7ff bfb7 	b.w	80054f8 <FPEC_voidInit>
	...

0800558c <main>:
#define BOOT_u8REQUESTFLAG					0x080028C0

LED_t LED1 = {LED_PORTA,LED_PIN4,LED_ACTIVE_HIGH};
LED_t LED2 = {LED_PORTA,LED_PIN7,LED_ACTIVE_HIGH};
int main(void)
{
 800558c:	b508      	push	{r3, lr}
	//Initialization
	SYS_voidAppInit();
 800558e:	f7ff fff1 	bl	8005574 <SYS_voidAppInit>


	LED_voidLedOn(&LED1);
 8005592:	4803      	ldr	r0, [pc, #12]	; (80055a0 <main+0x14>)
 8005594:	f7ff ffe5 	bl	8005562 <LED_voidLedOn>
	LED_voidLedOn(&LED2);
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <main+0x18>)
 800559a:	f7ff ffe2 	bl	8005562 <LED_voidLedOn>
	while(1);
 800559e:	e7fe      	b.n	800559e <main+0x12>
 80055a0:	20000000 	.word	0x20000000
 80055a4:	20000003 	.word	0x20000003

080055a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055a8:	480d      	ldr	r0, [pc, #52]	; (80055e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80055ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055b0:	480c      	ldr	r0, [pc, #48]	; (80055e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80055b2:	490d      	ldr	r1, [pc, #52]	; (80055e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <LoopForever+0xe>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b8:	e002      	b.n	80055c0 <LoopCopyDataInit>

080055ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055be:	3304      	adds	r3, #4

080055c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c4:	d3f9      	bcc.n	80055ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055c8:	4c0a      	ldr	r4, [pc, #40]	; (80055f4 <LoopForever+0x16>)
  movs r3, #0
 80055ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055cc:	e001      	b.n	80055d2 <LoopFillZerobss>

080055ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055d0:	3204      	adds	r2, #4

080055d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d4:	d3fb      	bcc.n	80055ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055d6:	f000 f811 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055da:	f7ff ffd7 	bl	800558c <main>

080055de <LoopForever>:

LoopForever:
  b LoopForever
 80055de:	e7fe      	b.n	80055de <LoopForever>
  ldr   r0, =_estack
 80055e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80055e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80055ec:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 80055f0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80055f4:	20000060 	.word	0x20000060

080055f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055f8:	e7fe      	b.n	80055f8 <ADC1_2_IRQHandler>
	...

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	2600      	movs	r6, #0
 8005600:	4d0c      	ldr	r5, [pc, #48]	; (8005634 <__libc_init_array+0x38>)
 8005602:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	f000 f81a 	bl	8005644 <_init>
 8005610:	2600      	movs	r6, #0
 8005612:	4d0a      	ldr	r5, [pc, #40]	; (800563c <__libc_init_array+0x40>)
 8005614:	4c0a      	ldr	r4, [pc, #40]	; (8005640 <__libc_init_array+0x44>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	0800565c 	.word	0x0800565c
 8005638:	0800565c 	.word	0x0800565c
 800563c:	0800565c 	.word	0x0800565c
 8005640:	08005660 	.word	0x08005660

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
