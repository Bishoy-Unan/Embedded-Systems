
UART_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .my_section   00000004  08003c00  08003c00  00023c00  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rodata       00000010  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08000f94  08000f94  00023c04  2**0
                  CONTENTS
  5 .ARM          00000000  08000f94  08000f94  00023c04  2**0
                  CONTENTS
  6 .preinit_array 00000000  08000f94  08000f94  00023c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08000f98  08000f98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000004  20000000  08000f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000124  20000004  08000fa0  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  08000fa0  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00023c04  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00023c2d  2**0
                  CONTENTS, READONLY
 14 .debug_info   000023ab  00000000  00000000  00023c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d9b  00000000  00000000  0002601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003c8  00000000  00000000  00026db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002b3  00000000  00000000  00027180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001c51  00000000  00000000  00027433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002145  00000000  00000000  00029084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008271  00000000  00000000  0002b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c94  00000000  00000000  0003343c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f6c 	.word	0x08000f6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000f6c 	.word	0x08000f6c

08000170 <GPIO_voidDirectionInit>:
#include "GPIO_config.h"
#include "GPIO_register.h"

//Initializing all pins direction
void GPIO_voidDirectionInit()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//PortA Direction
	GPIOA->CRL  = PORTA_DIR1;
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <GPIO_voidDirectionInit+0x48>)
 8000178:	601a      	str	r2, [r3, #0]
	GPIOA->CRH  = PORTA_DIR;
 800017a:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 800017c:	4a0f      	ldr	r2, [pc, #60]	; (80001bc <GPIO_voidDirectionInit+0x4c>)
 800017e:	605a      	str	r2, [r3, #4]

	//PortB Direction
	GPIOB->CRL  = PORTB_DIR1;
 8000180:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 8000182:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 8000186:	601a      	str	r2, [r3, #0]
	GPIOB->CRH  = PORTB_DIR;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 800018a:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 800018e:	605a      	str	r2, [r3, #4]
	
	//PortC Direction
	GPIOC->CRH  = PORTC_DIR;
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <GPIO_voidDirectionInit+0x54>)
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <GPIO_voidDirectionInit+0x58>)
 8000194:	605a      	str	r2, [r3, #4]
	
	//Ports Initial Value
	GPIOA->ODR  = PORTA_VAlUE;
 8000196:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 8000198:	2200      	movs	r2, #0
 800019a:	60da      	str	r2, [r3, #12]
	GPIOB->ODR  = PORTB_VALUE;
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 800019e:	2200      	movs	r2, #0
 80001a0:	60da      	str	r2, [r3, #12]
	GPIOC->ODR  = PORTC_VALUE;
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <GPIO_voidDirectionInit+0x54>)
 80001a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001a8:	60da      	str	r2, [r3, #12]
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800
 80001b8:	22222444 	.word	0x22222444
 80001bc:	222b44a2 	.word	0x222b44a2
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	40011000 	.word	0x40011000
 80001c8:	22200000 	.word	0x22200000

080001cc <GPIO_u8SetPinValue>:

//Seting Output value for certain pin
u8 GPIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	4613      	mov	r3, r2
 80001dc:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState = OK ;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	if (Copy_u8Pin <= GPIO_PIN_15)	//Input Validation
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	2b0f      	cmp	r3, #15
 80001e6:	d873      	bhi.n	80002d0 <GPIO_u8SetPinValue+0x104>
		//Output High
		if(Copy_u8Value == GPIO_PIN_HIGH)
 80001e8:	797b      	ldrb	r3, [r7, #5]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d133      	bne.n	8000256 <GPIO_u8SetPinValue+0x8a>
			switch (Copy_u8Port)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d01c      	beq.n	800022e <GPIO_u8SetPinValue+0x62>
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	dc2b      	bgt.n	8000250 <GPIO_u8SetPinValue+0x84>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <GPIO_u8SetPinValue+0x36>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d00b      	beq.n	8000218 <GPIO_u8SetPinValue+0x4c>
 8000200:	e026      	b.n	8000250 <GPIO_u8SetPinValue+0x84>
			{
				case GPIO_PORTA : SET_BIT(GPIOA->ODR,Copy_u8Pin);break;
 8000202:	4b37      	ldr	r3, [pc, #220]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	79ba      	ldrb	r2, [r7, #6]
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	4611      	mov	r1, r2
 8000210:	4a33      	ldr	r2, [pc, #204]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000212:	430b      	orrs	r3, r1
 8000214:	60d3      	str	r3, [r2, #12]
 8000216:	e05d      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTB : SET_BIT(GPIOB->ODR,Copy_u8Pin);break;
 8000218:	4b32      	ldr	r3, [pc, #200]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	79ba      	ldrb	r2, [r7, #6]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	4611      	mov	r1, r2
 8000226:	4a2f      	ldr	r2, [pc, #188]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 8000228:	430b      	orrs	r3, r1
 800022a:	60d3      	str	r3, [r2, #12]
 800022c:	e052      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)SET_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	2b0c      	cmp	r3, #12
 8000232:	d90a      	bls.n	800024a <GPIO_u8SetPinValue+0x7e>
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	2101      	movs	r1, #1
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a29      	ldr	r2, [pc, #164]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 8000244:	430b      	orrs	r3, r1
 8000246:	60d3      	str	r3, [r2, #12]
 8000248:	e044      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
 800024a:	2301      	movs	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e041      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				default : Local_u8ErrorState =NOK ;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e03e      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
			}
		//Output Low
		else if(Copy_u8Value == GPIO_PIN_LOW)
 8000256:	797b      	ldrb	r3, [r7, #5]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d136      	bne.n	80002ca <GPIO_u8SetPinValue+0xfe>
			switch (Copy_u8Port)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01e      	beq.n	80002a0 <GPIO_u8SetPinValue+0xd4>
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc2e      	bgt.n	80002c4 <GPIO_u8SetPinValue+0xf8>
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <GPIO_u8SetPinValue+0xa4>
 800026a:	2b01      	cmp	r3, #1
 800026c:	d00c      	beq.n	8000288 <GPIO_u8SetPinValue+0xbc>
 800026e:	e029      	b.n	80002c4 <GPIO_u8SetPinValue+0xf8>
			{
				case GPIO_PORTA : CLR_BIT(GPIOA->ODR,Copy_u8Pin);break;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000282:	400b      	ands	r3, r1
 8000284:	60d3      	str	r3, [r2, #12]
 8000286:	e025      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTB : CLR_BIT(GPIOB->ODR,Copy_u8Pin);break;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	43d2      	mvns	r2, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800029a:	400b      	ands	r3, r1
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	e019      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)CLR_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2b0c      	cmp	r3, #12
 80002a4:	d90b      	bls.n	80002be <GPIO_u8SetPinValue+0xf2>
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	2101      	movs	r1, #1
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	43d2      	mvns	r2, r2
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 80002b8:	400b      	ands	r3, r1
 80002ba:	60d3      	str	r3, [r2, #12]
 80002bc:	e00a      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
 80002be:	2301      	movs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e007      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				default : Local_u8ErrorState =NOK;		
 80002c4:	2301      	movs	r3, #1
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e004      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
			}
		//Wrong Input	
		else 
			Local_u8ErrorState =NOK;
 80002ca:	2301      	movs	r3, #1
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e001      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
	//Wrong Input
	else 
		Local_u8ErrorState =NOK ;
 80002d0:	2301      	movs	r3, #1
 80002d2:	73fb      	strb	r3, [r7, #15]
	
	return Local_u8ErrorState ;
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40010c00 	.word	0x40010c00
 80002e8:	40011000 	.word	0x40011000

080002ec <RCC_voidInit>:
#include "RCC_config.h"


//Initializing All Peripherals
void RCC_voidInit (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	RCC_u8ChangeModeBuses (RCC_CR_HSI , RCC_ENABLE) ;
 80002f0:	2101      	movs	r1, #1
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f87c 	bl	80003f0 <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_HSE , RCC_ENABLE) ;
 80002f8:	2101      	movs	r1, #1
 80002fa:	2010      	movs	r0, #16
 80002fc:	f000 f878 	bl	80003f0 <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_PLL , RCC_ENABLE) ;
 8000300:	2101      	movs	r1, #1
 8000302:	2018      	movs	r0, #24
 8000304:	f000 f874 	bl	80003f0 <RCC_u8ChangeModeBuses>

	//Selection Section
	#if RCC_CLOCK_SYS	==  RCC_HSI_SELECTION
	RCC->CFGR&=~(3<<0);/***************EDIT***********/
 8000308:	4b38      	ldr	r3, [pc, #224]	; (80003ec <RCC_voidInit+0x100>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a37      	ldr	r2, [pc, #220]	; (80003ec <RCC_voidInit+0x100>)
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=RCC_HSI_SELECTION ;
 8000314:	4b35      	ldr	r3, [pc, #212]	; (80003ec <RCC_voidInit+0x100>)
 8000316:	4a35      	ldr	r2, [pc, #212]	; (80003ec <RCC_voidInit+0x100>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	6053      	str	r3, [r2, #4]

	//Select the Secuity of RCC if the external clock is drop  the security mode convert to  the internal  clock
	#if RCC_SECURITY == RCC_ENABLE
	SET_BIT (RCC->CR ,RCC_ENABLE );
	#elif RCC_SECURITY == RCC_DISABLE
	CLR_BIT (RCC->CR ,RCC_ENABLE );
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <RCC_voidInit+0x100>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <RCC_voidInit+0x100>)
 8000322:	f023 0302 	bic.w	r3, r3, #2
 8000326:	6013      	str	r3, [r2, #0]
	#else
	#error "THE SELECTION OF RCC SECURITY "
	#endif

	//Clear the prescaler bits of  APB1
	RCC->CFGR&=~(7<<8);	/***************EDIT***********/
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <RCC_voidInit+0x100>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a2f      	ldr	r2, [pc, #188]	; (80003ec <RCC_voidInit+0x100>)
 800032e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000332:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<8);/***************EDIT***********/
 8000334:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <RCC_voidInit+0x100>)
 8000336:	4a2d      	ldr	r2, [pc, #180]	; (80003ec <RCC_voidInit+0x100>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	6053      	str	r3, [r2, #4]

	//Clear the prescaler bits of  APB2
	RCC->CFGR&=~(7<<11);/***************EDIT***********/
 800033c:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <RCC_voidInit+0x100>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a2a      	ldr	r2, [pc, #168]	; (80003ec <RCC_voidInit+0x100>)
 8000342:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000346:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB2_PRESCALER<<11);/***************EDIT***********/
 8000348:	4b28      	ldr	r3, [pc, #160]	; (80003ec <RCC_voidInit+0x100>)
 800034a:	4a28      	ldr	r2, [pc, #160]	; (80003ec <RCC_voidInit+0x100>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	6053      	str	r3, [r2, #4]

	//Clear the prescaler bits of  AHB
	RCC->CFGR&=~(15<<4);/***************EDIT***********/
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <RCC_voidInit+0x100>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	4a25      	ldr	r2, [pc, #148]	; (80003ec <RCC_voidInit+0x100>)
 8000356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800035a:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<4);/***************EDIT***********/
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <RCC_voidInit+0x100>)
 800035e:	4a23      	ldr	r2, [pc, #140]	; (80003ec <RCC_voidInit+0x100>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	6053      	str	r3, [r2, #4]

	//Select the multiplication of PLL
	RCC->CFGR&=~(4<<18);/***************EDIT***********/
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <RCC_voidInit+0x100>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <RCC_voidInit+0x100>)
 800036a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800036e:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_PLL_MULL<<18);/***************EDIT***********/
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <RCC_voidInit+0x100>)
 8000372:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <RCC_voidInit+0x100>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	6053      	str	r3, [r2, #4]

	//Adjust System Clock
	RCC_voidAjustmentClockSys();
 8000378:	f000 f8de 	bl	8000538 <RCC_voidAjustmentClockSys>
	#if RCC_ADC3_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC3-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_USART1_STATE	    ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_USART1-RCC_APB2_OFFSET));
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <RCC_voidInit+0x100>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <RCC_voidInit+0x100>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000386:	6193      	str	r3, [r2, #24]
	#if RCC_SPI1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_SPI1-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_TIM1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_TIM1-RCC_APB2_OFFSET));
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <RCC_voidInit+0x100>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <RCC_voidInit+0x100>)
 800038e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000392:	6193      	str	r3, [r2, #24]
	#if RCC_ADC2_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC2-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_ADC1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC1-RCC_APB2_OFFSET));
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <RCC_voidInit+0x100>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <RCC_voidInit+0x100>)
 800039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039e:	6193      	str	r3, [r2, #24]
	#if RCC_IOPD_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPD-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_IOPC_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPC-RCC_APB2_OFFSET));
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <RCC_voidInit+0x100>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <RCC_voidInit+0x100>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
	#endif
	
	#if RCC_IOPB_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPB-RCC_APB2_OFFSET));
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <RCC_voidInit+0x100>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <RCC_voidInit+0x100>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
	#endif
	
	#if RCC_IOPA_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPA-RCC_APB2_OFFSET));
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <RCC_voidInit+0x100>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a0b      	ldr	r2, [pc, #44]	; (80003ec <RCC_voidInit+0x100>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
	#if   RCC_BKP_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_BKP	-RCC_APB1_OFFSET));
	#endif
	
	#if   RCC_CAN_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_CAN	-RCC_APB1_OFFSET));
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <RCC_voidInit+0x100>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4a08      	ldr	r2, [pc, #32]	; (80003ec <RCC_voidInit+0x100>)
 80003ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ce:	61d3      	str	r3, [r2, #28]
	#endif
	
	#if   RCC_USB_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_USB	-RCC_APB1_OFFSET));
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <RCC_voidInit+0x100>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <RCC_voidInit+0x100>)
 80003d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003da:	61d3      	str	r3, [r2, #28]
	#if   RCC_TIM3_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_TIM3-RCC_APB1_OFFSET));
	#endif
	
	#if   RCC_TIM2_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_TIM2-RCC_APB1_OFFSET));
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <RCC_voidInit+0x100>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a02      	ldr	r2, [pc, #8]	; (80003ec <RCC_voidInit+0x100>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	61d3      	str	r3, [r2, #28]
	#endif
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <RCC_u8ChangeModeBuses>:
	return Local_u8ErrorState;
}

//Changing Bus Mode
u8 RCC_u8ChangeModeBuses(u8 Copy_u8SysClock , u8 Copy_u8StateBus)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8StateError = OK;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8StateBus == RCC_ENABLE)
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d142      	bne.n	8000490 <RCC_u8ChangeModeBuses+0xa0>
		switch (Copy_u8SysClock)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b18      	cmp	r3, #24
 800040e:	d02a      	beq.n	8000466 <RCC_u8ChangeModeBuses+0x76>
 8000410:	2b18      	cmp	r3, #24
 8000412:	dc3a      	bgt.n	800048a <RCC_u8ChangeModeBuses+0x9a>
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <RCC_u8ChangeModeBuses+0x2e>
 8000418:	2b10      	cmp	r3, #16
 800041a:	d012      	beq.n	8000442 <RCC_u8ChangeModeBuses+0x52>
 800041c:	e035      	b.n	800048a <RCC_u8ChangeModeBuses+0x9a>
		{
			case RCC_CR_HSI:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)==0);break;
 800041e:	4b45      	ldr	r3, [pc, #276]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	2101      	movs	r1, #1
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a41      	ldr	r2, [pc, #260]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
 8000432:	bf00      	nop
 8000434:	4b3f      	ldr	r3, [pc, #252]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <RCC_u8ChangeModeBuses+0x44>
 8000440:	e071      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_HSE:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)==0);break;
 8000442:	4b3c      	ldr	r3, [pc, #240]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	79fa      	ldrb	r2, [r7, #7]
 8000448:	2101      	movs	r1, #1
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a38      	ldr	r2, [pc, #224]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000452:	430b      	orrs	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	bf00      	nop
 8000458:	4b36      	ldr	r3, [pc, #216]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <RCC_u8ChangeModeBuses+0x68>
 8000464:	e05f      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_PLL:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)==0);break;
 8000466:	4b33      	ldr	r3, [pc, #204]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a2f      	ldr	r2, [pc, #188]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000476:	430b      	orrs	r3, r1
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	bf00      	nop
 800047c:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0f9      	beq.n	800047c <RCC_u8ChangeModeBuses+0x8c>
 8000488:	e04d      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			default: Local_u8StateError = NOK; break;	//Wrong Input
 800048a:	2301      	movs	r3, #1
 800048c:	73fb      	strb	r3, [r7, #15]
 800048e:	e04a      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
		}

	else if (Copy_u8StateBus == RCC_DISABLE)
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d145      	bne.n	8000522 <RCC_u8ChangeModeBuses+0x132>
		switch (Copy_u8SysClock)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b18      	cmp	r3, #24
 800049a:	d02c      	beq.n	80004f6 <RCC_u8ChangeModeBuses+0x106>
 800049c:	2b18      	cmp	r3, #24
 800049e:	dc3d      	bgt.n	800051c <RCC_u8ChangeModeBuses+0x12c>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <RCC_u8ChangeModeBuses+0xba>
 80004a4:	2b10      	cmp	r3, #16
 80004a6:	d013      	beq.n	80004d0 <RCC_u8ChangeModeBuses+0xe0>
 80004a8:	e038      	b.n	800051c <RCC_u8ChangeModeBuses+0x12c>
		{
			case RCC_CR_HSI:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)!=0);break;
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004bc:	400b      	ands	r3, r1
 80004be:	6013      	str	r3, [r2, #0]
 80004c0:	bf00      	nop
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f9      	bne.n	80004c2 <RCC_u8ChangeModeBuses+0xd2>
 80004ce:	e02a      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_HSE:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)!=0);break;
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	2101      	movs	r1, #1
 80004d8:	fa01 f202 	lsl.w	r2, r1, r2
 80004dc:	43d2      	mvns	r2, r2
 80004de:	4611      	mov	r1, r2
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004e2:	400b      	ands	r3, r1
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	bf00      	nop
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f9      	bne.n	80004e8 <RCC_u8ChangeModeBuses+0xf8>
 80004f4:	e017      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_PLL:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)!=0);break;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	2101      	movs	r1, #1
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000508:	400b      	ands	r3, r1
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	bf00      	nop
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <RCC_u8ChangeModeBuses+0x144>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f9      	bne.n	800050e <RCC_u8ChangeModeBuses+0x11e>
 800051a:	e004      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
			default: Local_u8StateError = NOK;	break;	//Wrong Input
 800051c:	2301      	movs	r3, #1
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	e001      	b.n	8000526 <RCC_u8ChangeModeBuses+0x136>
		}
	//Wrong Input
	else
		Local_u8StateError = NOK;
 8000522:	2301      	movs	r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]

	return Local_u8StateError ;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <RCC_voidAjustmentClockSys>:
	return Local_u8ErrorState;

}
//Adjusting System clock and calibrating error
void RCC_voidAjustmentClockSys ()
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	u32 Local_u8RealValue ; // the value of HSICAL
	u8 Local_u8ChangeValue ;
	u8 Local_u8EditionValue ; // the value of the HSITRIM
	Local_u8RealValue = 255|(RCC->CR>>8); /***************EDIT***********/
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <RCC_voidAjustmentClockSys+0x58>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000548:	607b      	str	r3, [r7, #4]
	if (Local_u8RealValue != RCC_HSI_SPEED)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <RCC_voidAjustmentClockSys+0x5c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d018      	beq.n	8000584 <RCC_voidAjustmentClockSys+0x4c>
	{
		Local_u8ChangeValue = Local_u8RealValue - RCC_HSI_SPEED ;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	70fb      	strb	r3, [r7, #3]
		Local_u8ChangeValue /= 40 ;/***************EDIT***********/
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <RCC_voidAjustmentClockSys+0x60>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	70fb      	strb	r3, [r7, #3]
		Local_u8EditionValue= (31 | (RCC->CR>>3)) + 40 ;/***************EDIT***********/
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <RCC_voidAjustmentClockSys+0x58>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	08db      	lsrs	r3, r3, #3
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f043 031f 	orr.w	r3, r3, #31
 800056e:	b2db      	uxtb	r3, r3
 8000570:	3328      	adds	r3, #40	; 0x28
 8000572:	70bb      	strb	r3, [r7, #2]
		RCC->CR |=(Local_u8EditionValue <<3);/***************EDIT***********/
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <RCC_voidAjustmentClockSys+0x58>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	78ba      	ldrb	r2, [r7, #2]
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	4611      	mov	r1, r2
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <RCC_voidAjustmentClockSys+0x58>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
	}
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	007a1200 	.word	0x007a1200
 8000598:	cccccccd 	.word	0xcccccccd

0800059c <EXTI0_IRQHandler>:
{
	EXTI_CallBack[Copy_u8InterruptLine] = Copy_pvCallBackFunc; 
}

void EXTI0_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE0]();
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <EXTI0_IRQHandler+0x1c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE0);
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <EXTI0_IRQHandler+0x20>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <EXTI0_IRQHandler+0x20>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6153      	str	r3, [r2, #20]
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000020 	.word	0x20000020
 80005bc:	40010400 	.word	0x40010400

080005c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE1]();
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <EXTI1_IRQHandler+0x1c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE1);
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI1_IRQHandler+0x20>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI1_IRQHandler+0x20>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6153      	str	r3, [r2, #20]
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000020 	.word	0x20000020
 80005e0:	40010400 	.word	0x40010400

080005e4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE2]();
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <EXTI2_IRQHandler+0x1c>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE2);
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI2_IRQHandler+0x20>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <EXTI2_IRQHandler+0x20>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6153      	str	r3, [r2, #20]
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000020 	.word	0x20000020
 8000604:	40010400 	.word	0x40010400

08000608 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE3]();
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI3_IRQHandler+0x1c>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE3);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <EXTI3_IRQHandler+0x20>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <EXTI3_IRQHandler+0x20>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6153      	str	r3, [r2, #20]
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000020 	.word	0x20000020
 8000628:	40010400 	.word	0x40010400

0800062c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE4]();
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI4_IRQHandler+0x1c>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE4);
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI4_IRQHandler+0x20>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI4_IRQHandler+0x20>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6153      	str	r3, [r2, #20]
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000020 	.word	0x20000020
 800064c:	40010400 	.word	0x40010400

08000650 <USART_Get>:
		(USART_t*)USART2_BASE,
		(USART_t*)USART3_BASE,
};

//Geting USART Port and setting correct base address
static USART_t *USART_Get(u8 usart) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	switch(usart) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d00a      	beq.n	8000676 <USART_Get+0x26>
 8000660:	2b02      	cmp	r3, #2
 8000662:	dc0a      	bgt.n	800067a <USART_Get+0x2a>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <USART_Get+0x1e>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d002      	beq.n	8000672 <USART_Get+0x22>
 800066c:	e005      	b.n	800067a <USART_Get+0x2a>
	case USART1: return (USART_t*)USART1_BASE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <USART_Get+0x38>)
 8000670:	e004      	b.n	800067c <USART_Get+0x2c>
	case USART2: return (USART_t*)USART2_BASE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <USART_Get+0x3c>)
 8000674:	e002      	b.n	800067c <USART_Get+0x2c>
	case USART3: return (USART_t*)USART3_BASE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <USART_Get+0x40>)
 8000678:	e000      	b.n	800067c <USART_Get+0x2c>
	default:     return (USART_t*)USART1_BASE;
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <USART_Get+0x38>)
	}
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40013800 	.word	0x40013800
 800068c:	40004400 	.word	0x40004400
 8000690:	40004800 	.word	0x40004800

08000694 <USART_voidInit>:

//Initializing USART Communication
void USART_voidInit( u8 Copy_u8UsartPort )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	//USART_t *USART = usart_ports[Copy_u8UsartPort];
	USART_t *USART = USART_Get(Copy_u8UsartPort);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffd5 	bl	8000650 <USART_Get>
 80006a6:	60f8      	str	r0, [r7, #12]
	/*FCK = 8 MHZ   baudrate = 9600*/
	USART->BRR =BAUD_RATE ;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f240 3241 	movw	r2, #833	; 0x341
 80006ae:	609a      	str	r2, [r3, #8]
	/*USART enable        */
	SET_BIT(USART -> CR1,USART_UE);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	60da      	str	r2, [r3, #12]
	/*Transmitter enable  */
	SET_BIT(USART -> CR1,USART_TE);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f043 0208 	orr.w	r2, r3, #8
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	60da      	str	r2, [r3, #12]
	/*Receiver enable     */
	SET_BIT(USART -> CR1,USART_RE);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f043 0204 	orr.w	r2, r3, #4
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	60da      	str	r2, [r3, #12]
	/* Clear All The Register*/
	USART -> SR =0;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <USART_voidTransmitSync>:

}

//Synchronous Transmition 
void USART_voidTransmitSync(u8 Copy_u8UsartPort, u8 Copy_u8DataArr[])
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
	USART_t *USART = usart_ports[Copy_u8UsartPort];
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <USART_voidTransmitSync+0x58>)
 80006f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f8:	60bb      	str	r3, [r7, #8]
	u8 Local_u8Iterator = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8DataArr[Local_u8Iterator] != USART_NULL_CHAR)
 80006fe:	e010      	b.n	8000722 <USART_voidTransmitSync+0x3e>
	{
		USART -> DR = Copy_u8DataArr[Local_u8Iterator];
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	605a      	str	r2, [r3, #4]
		while(GET_BIT (USART -> SR , USART_TC) == 0);
 800070e:	bf00      	nop
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f9      	beq.n	8000710 <USART_voidTransmitSync+0x2c>
		Local_u8Iterator++;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8DataArr[Local_u8Iterator] != USART_NULL_CHAR)
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1e8      	bne.n	8000700 <USART_voidTransmitSync+0x1c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	08000f88 	.word	0x08000f88

08000740 <USART_u8ReceiveChar>:

//Recieve data as character
u8 USART_u8ReceiveChar(u8 Copy_u8UsartPort)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Data;
	USART_t *USART = USART_Get(Copy_u8UsartPort);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff7f 	bl	8000650 <USART_Get>
 8000752:	60f8      	str	r0, [r7, #12]

	while((GET_BIT((USART->SR), USART_RXNE) == 0));
 8000754:	bf00      	nop
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f9      	beq.n	8000756 <USART_u8ReceiveChar+0x16>

	Local_u8Data = USART -> DR;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	72fb      	strb	r3, [r7, #11]

	return Local_u8Data;
 8000768:	7afb      	ldrb	r3, [r7, #11]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <USART1_IRQHandler>:
	return Local_u8ErrorState ;
}

//ISR for USART1
void USART1_IRQHandler (void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART1)->CR1,USART_RXNIE))
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff69 	bl	8000650 <USART_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <USART1_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART1]();
 800078a:	4b02      	ldr	r3, [pc, #8]	; (8000794 <USART1_IRQHandler+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4798      	blx	r3
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000034 	.word	0x20000034

08000798 <USART2_IRQHandler>:

//ISR for USART2
void USART2_IRQHandler (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART2)->CR1,USART_RXNIE))
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff57 	bl	8000650 <USART_Get>
 80007a2:	4603      	mov	r3, r0
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <USART2_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART2]();
 80007ae:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <USART2_IRQHandler+0x20>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4798      	blx	r3
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000034 	.word	0x20000034

080007bc <USART3_IRQHandler>:

//ISR for USART3
void USART3_IRQHandler (void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART3)->CR1,USART_RXNIE))
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff ff45 	bl	8000650 <USART_Get>
 80007c6:	4603      	mov	r3, r0
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <USART3_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART3]();
 80007d2:	4b02      	ldr	r3, [pc, #8]	; (80007dc <USART3_IRQHandler+0x20>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	4798      	blx	r3
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000034 	.word	0x20000034

080007e0 <USB_LP_CAN_RX0_IRQHandler>:
	}
}


void USB_LP_CAN_RX0_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	if (CAN->RF0R & CAN_FIFO_FMP)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <USB_LP_CAN_RX0_IRQHandler+0x1c>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <USB_LP_CAN_RX0_IRQHandler+0x16>
	{
		CAN_CallBack[0]();
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <USB_LP_CAN_RX0_IRQHandler+0x20>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4798      	blx	r3
	}

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40006400 	.word	0x40006400
 8000800:	20000040 	.word	0x20000040

08000804 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler (void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	if (CAN->RF1R & CAN_FIFO_FMP)
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <CAN_RX1_IRQHandler+0x1c>)
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <CAN_RX1_IRQHandler+0x16>
	{
		CAN_CallBack[1]();
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <CAN_RX1_IRQHandler+0x20>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4798      	blx	r3
	}
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40006400 	.word	0x40006400
 8000824:	20000040 	.word	0x20000040

08000828 <SysTick_Handler>:
}



void SysTick_Handler (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	u8 Local_u8Val = 0 ;
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]

	if (STK_u32_MODE == STK_SINGLE_MODE)
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <SysTick_Handler+0x48>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10b      	bne.n	8000852 <SysTick_Handler+0x2a>
	{
		/*Disable the Timer*/
		CLR_BIT(STK->STK_CTRL, EN_ABLE) ;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <SysTick_Handler+0x4c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <SysTick_Handler+0x4c>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]
		STK->STK_LOAD =0 ;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SysTick_Handler+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
		STK->STK_VAL = 0;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <SysTick_Handler+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	}

	STK_voidCallBackFunc();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SysTick_Handler+0x50>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4798      	blx	r3

	Local_u8Val=GET_BIT(STK->STK_CTRL,COUNT_FLAG);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SysTick_Handler+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0c1b      	lsrs	r3, r3, #16
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	71fb      	strb	r3, [r7, #7]


}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000004c 	.word	0x2000004c
 8000874:	e000e010 	.word	0xe000e010
 8000878:	20000048 	.word	0x20000048

0800087c <FPEC_voidInit>:
#include "FPEC_private.h"
#include "FPEC_register.h"

//Initializing FPEC
void FPEC_voidInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	//Enter the latency of the flash as 0<clk<24MHZ
	FPEC->FLASH_ACR = FPEC_LATENCY ;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <FPEC_voidInit+0x2c>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]

	//Unlock the flash and FPEC_CR
	if (GET_BIT(FPEC->FLASH_CR,7)== 1)
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <FPEC_voidInit+0x2c>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	09db      	lsrs	r3, r3, #7
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b01      	cmp	r3, #1
 8000892:	d105      	bne.n	80008a0 <FPEC_voidInit+0x24>
	{
		FPEC->FLASH_KEYR =  0x45670123;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <FPEC_voidInit+0x2c>)
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <FPEC_voidInit+0x30>)
 8000898:	605a      	str	r2, [r3, #4]
		FPEC->FLASH_KEYR =  0xCDEF89AB;
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <FPEC_voidInit+0x2c>)
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <FPEC_voidInit+0x34>)
 800089e:	605a      	str	r2, [r3, #4]
	}
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40022000 	.word	0x40022000
 80008ac:	45670123 	.word	0x45670123
 80008b0:	cdef89ab 	.word	0xcdef89ab

080008b4 <FPEC_voidFlashPageErase>:
		FPEC_voidFlashPageErase(Local_u8Counter);
}

//Erase Flash Page
u8 FPEC_voidFlashPageErase(u8 Copy_u8PageNumber)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8PageNumber<=FPEC_MAX_NUM_PAGE)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b40      	cmp	r3, #64	; 0x40
 80008c6:	d82c      	bhi.n	8000922 <FPEC_voidFlashPageErase+0x6e>
	{
		//BSY: Busy flag
		while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 80008c8:	bf00      	nop
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d0f9      	beq.n	80008ca <FPEC_voidFlashPageErase+0x16>

		// Enable page erase
		SET_BIT(FPEC->FLASH_CR,FLASH_CR_PER);
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6113      	str	r3, [r2, #16]

		// Set page address
		FPEC->FLASH_AR = (u32)(Copy_u8PageNumber*1024)+0x08000000 ;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	029b      	lsls	r3, r3, #10
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008e8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80008ec:	6153      	str	r3, [r2, #20]

		//Start operation erase
		SET_BIT(FPEC->FLASH_CR ,FLASH_CR_STRT) ;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6113      	str	r3, [r2, #16]

		while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 80008fa:	bf00      	nop
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b01      	cmp	r3, #1
 8000906:	d0f9      	beq.n	80008fc <FPEC_voidFlashPageErase+0x48>

		//END OPERATION
		SET_BIT(FPEC->FLASH_SR ,FLASH_SR_EOP);
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->FLASH_CR,FLASH_CR_PER);
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <FPEC_voidFlashPageErase+0x80>)
 800091a:	f023 0302 	bic.w	r3, r3, #2
 800091e:	6113      	str	r3, [r2, #16]
 8000920:	e001      	b.n	8000926 <FPEC_voidFlashPageErase+0x72>
	}
	else
		Local_u8ErrorState = NOK;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
	
	return Local_u8ErrorState;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000

08000938 <FPEC_voidFlashWrite>:

//Write to flash
void FPEC_voidFlashWrite(u32 Copy_u32Address, u16* Copy_u16Data, u8 Copy_u8Length)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	4613      	mov	r3, r2
 8000944:	71fb      	strb	r3, [r7, #7]

	//BSY: Busy flag
			while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 8000946:	bf00      	nop
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b01      	cmp	r3, #1
 8000952:	d0f9      	beq.n	8000948 <FPEC_voidFlashWrite+0x10>

	for (u8 Local_u8Counter = 0 ; Local_u8Counter<Copy_u8Length ; Local_u8Counter++)
 8000954:	2300      	movs	r3, #0
 8000956:	75fb      	strb	r3, [r7, #23]
 8000958:	e025      	b.n	80009a6 <FPEC_voidFlashWrite+0x6e>
	{

		SET_BIT(FPEC->FLASH_CR,FLASH_CR_PG);
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6113      	str	r3, [r2, #16]

		*((volatile u16 *)(Copy_u32Address)) =  Copy_u16Data[Local_u8Counter];
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	441a      	add	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	8812      	ldrh	r2, [r2, #0]
 8000972:	801a      	strh	r2, [r3, #0]

		/*Waitting util the write operation is end*/

		while (GET_BIT(FPEC->FLASH_SR,BSY_FLAG) == 1);
 8000974:	bf00      	nop
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b01      	cmp	r3, #1
 8000980:	d0f9      	beq.n	8000976 <FPEC_voidFlashWrite+0x3e>

		SET_BIT(FPEC->FLASH_SR,FLASH_SR_EOP);
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->FLASH_CR,FLASH_CR_PG);
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <FPEC_voidFlashWrite+0x84>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6113      	str	r3, [r2, #16]

		Copy_u32Address=Copy_u32Address+2;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3302      	adds	r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
	for (u8 Local_u8Counter = 0 ; Local_u8Counter<Copy_u8Length ; Local_u8Counter++)
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	3301      	adds	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]
 80009a6:	7dfa      	ldrb	r2, [r7, #23]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3d5      	bcc.n	800095a <FPEC_voidFlashWrite+0x22>

	}
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <Get_timer>:
void (*TIM3_CallBack)(void);
void (*TIM4_CallBack)(void);


static TIMER_t * Get_timer( u8 timer)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	switch (timer)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d814      	bhi.n	80009fa <Get_timer+0x3a>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <Get_timer+0x18>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009f3 	.word	0x080009f3
 80009e4:	080009f7 	.word	0x080009f7
	{
	case TIM1: return((TIMER_t *)TIM1_BASE);
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <Get_timer+0x48>)
 80009ea:	e008      	b.n	80009fe <Get_timer+0x3e>
	case TIM2: return((TIMER_t *)TIM2_BASE);
 80009ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f0:	e005      	b.n	80009fe <Get_timer+0x3e>
	case TIM3: return((TIMER_t *)TIM3_BASE);
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <Get_timer+0x4c>)
 80009f4:	e003      	b.n	80009fe <Get_timer+0x3e>
	case TIM4: return((TIMER_t *)TIM4_BASE);
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <Get_timer+0x50>)
 80009f8:	e001      	b.n	80009fe <Get_timer+0x3e>
	default : return((TIMER_t *)TIM2_BASE);
 80009fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	}
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	40000800 	.word	0x40000800

08000a14 <TIM2_IRQHandler>:
	tim->CCR[Local_u8Channel-1] = Copy_u16Period * Copy_u16DutyCycle;

}

void TIM2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	TIMER_t* timer = Get_timer(TIM2);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ffd0 	bl	80009c0 <Get_timer>
 8000a20:	6078      	str	r0, [r7, #4]
	TIM2_CallBack();
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <TIM2_IRQHandler+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4798      	blx	r3
	timer->SR = 0U; 		// reset interrupt
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000050 	.word	0x20000050

08000a3c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	TIMER_t *tim3 = Get_timer(TIM3);
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff ffbc 	bl	80009c0 <Get_timer>
 8000a48:	6078      	str	r0, [r7, #4]
	TIM3_CallBack();
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <TIM3_IRQHandler+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4798      	blx	r3
	tim3->SR = 0U;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000054 	.word	0x20000054

08000a64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	TIMER_t *tim4 = Get_timer(TIM4);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f7ff ffa8 	bl	80009c0 <Get_timer>
 8000a70:	6078      	str	r0, [r7, #4]
	TIM4_CallBack();
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <TIM4_IRQHandler+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4798      	blx	r3
	tim4->SR = 0U;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000058 	.word	0x20000058

08000a8c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
	u8 Local_u8Counter;
	Local_u8Counter++;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	3301      	adds	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <LED_voidLedOn>:
#include "LED_interface.h"
#include "LED_private.h"

//Turning LED On
void LED_voidLedOn(LED_t* Copy_pLED_tStructLed)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	if(Copy_pLED_tStructLed->LED_u8Connection == LED_ACTIVE_HIGH)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	789b      	ldrb	r3, [r3, #2]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d108      	bne.n	8000ac4 <LED_voidLedOn+0x22>
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_HIGH);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7818      	ldrb	r0, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	f7ff fb85 	bl	80001cc <GPIO_u8SetPinValue>
	else
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_LOW);
}
 8000ac2:	e007      	b.n	8000ad4 <LED_voidLedOn+0x32>
		GPIO_u8SetPinValue(Copy_pLED_tStructLed->LED_u8Port, Copy_pLED_tStructLed->LED_u8Pin, GPIO_PIN_LOW);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7818      	ldrb	r0, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fb7c 	bl	80001cc <GPIO_u8SetPinValue>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <PARSING_u8AsciToHex>:
u16 Data[100] = {0};
u32 Address= PARSING_BASE_ADDRESS;

//Convert from String to Hex
u8 PARSING_u8AsciToHex (u8 Copy_u8Asci)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8HexNum ;

	if ((Copy_u8Asci>=ASCI_ZERO)&&(Copy_u8Asci<=ASCI_NINE))
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b2f      	cmp	r3, #47	; 0x2f
 8000aea:	d906      	bls.n	8000afa <PARSING_u8AsciToHex+0x1e>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b39      	cmp	r3, #57	; 0x39
 8000af0:	d803      	bhi.n	8000afa <PARSING_u8AsciToHex+0x1e>
		Local_u8HexNum = Copy_u8Asci - ASCI_ZERO ;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3b30      	subs	r3, #48	; 0x30
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e002      	b.n	8000b00 <PARSING_u8AsciToHex+0x24>
	
	else
		Local_u8HexNum =Copy_u8Asci -ASCI_A_10 ;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	3b37      	subs	r3, #55	; 0x37
 8000afe:	73fb      	strb	r3, [r7, #15]

	return Local_u8HexNum;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <PARSING_voidWriteData>:

//Write Program to flash
void PARSING_voidWriteData (u8* Copy_u8Data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	u8 Local_u8Data0 ;
	u8 Local_u8Data1 ;
	u8 Local_u8Data2 ;
	u8 Local_u8Data3 ;

	if (Copy_u8Data[8]=='0')
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3308      	adds	r3, #8
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b30      	cmp	r3, #48	; 0x30
 8000b1c:	f040 80a2 	bne.w	8000c64 <PARSING_voidWriteData+0x158>
	{
		Local_u8MsbByte = PARSING_u8AsciToHex(Copy_u8Data[1]);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffd8 	bl	8000adc <PARSING_u8AsciToHex>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	75bb      	strb	r3, [r7, #22]
		Local_u8LsbByte =PARSING_u8AsciToHex(Copy_u8Data[2]);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3302      	adds	r3, #2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffd0 	bl	8000adc <PARSING_u8AsciToHex>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	757b      	strb	r3, [r7, #21]
		//Number of Byte of Data
		Local_u8NumByte =(Local_u8MsbByte<<4)|(Local_u8LsbByte);
 8000b40:	7dbb      	ldrb	r3, [r7, #22]
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	b25a      	sxtb	r2, r3
 8000b46:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	753b      	strb	r3, [r7, #20]

		Local_u8Address0 = PARSING_u8AsciToHex(Copy_u8Data[3]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3303      	adds	r3, #3
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffc0 	bl	8000adc <PARSING_u8AsciToHex>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	74fb      	strb	r3, [r7, #19]
		Local_u8Address1 = PARSING_u8AsciToHex(Copy_u8Data[4]);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3304      	adds	r3, #4
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffb8 	bl	8000adc <PARSING_u8AsciToHex>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	74bb      	strb	r3, [r7, #18]
		Local_u8Address2 = PARSING_u8AsciToHex(Copy_u8Data[5]);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3305      	adds	r3, #5
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffb0 	bl	8000adc <PARSING_u8AsciToHex>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	747b      	strb	r3, [r7, #17]
		Local_u8Address3 = PARSING_u8AsciToHex(Copy_u8Data[6]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3306      	adds	r3, #6
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffa8 	bl	8000adc <PARSING_u8AsciToHex>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	743b      	strb	r3, [r7, #16]

		Address = Address & 0xFFFF0000;
 8000b90:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <PARSING_voidWriteData+0x160>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	041b      	lsls	r3, r3, #16
 8000b98:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <PARSING_voidWriteData+0x160>)
 8000b9a:	6013      	str	r3, [r2, #0]
		Local_u8MainAddress = Address | (Local_u8Address3)|(Local_u8Address2<<4)|(Local_u8Address1<<8)|(Local_u8Address0<<12);
 8000b9c:	7c3a      	ldrb	r2, [r7, #16]
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <PARSING_voidWriteData+0x160>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	7c7a      	ldrb	r2, [r7, #17]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	7cba      	ldrb	r2, [r7, #18]
 8000bac:	0212      	lsls	r2, r2, #8
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	7cfa      	ldrb	r2, [r7, #19]
 8000bb2:	0312      	lsls	r2, r2, #12
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

		for (u8 Local_u8Counter =0 ; Local_u8Counter<Local_u8NumByte/2;Local_u8Counter++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75fb      	strb	r3, [r7, #23]
 8000bbc:	e044      	b.n	8000c48 <PARSING_voidWriteData+0x13c>
		{
			Local_u8Data0 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+9]);
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	3309      	adds	r3, #9
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff86 	bl	8000adc <PARSING_u8AsciToHex>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	72fb      	strb	r3, [r7, #11]
			Local_u8Data1 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+10]);
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	330a      	adds	r3, #10
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff7b 	bl	8000adc <PARSING_u8AsciToHex>
 8000be6:	4603      	mov	r3, r0
 8000be8:	72bb      	strb	r3, [r7, #10]
			Local_u8Data2 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+11]);
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	330b      	adds	r3, #11
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff70 	bl	8000adc <PARSING_u8AsciToHex>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	727b      	strb	r3, [r7, #9]
			Local_u8Data3 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+12]);
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	330c      	adds	r3, #12
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff65 	bl	8000adc <PARSING_u8AsciToHex>
 8000c12:	4603      	mov	r3, r0
 8000c14:	723b      	strb	r3, [r7, #8]

			Data[Local_u8Counter] = (Local_u8Data0<<4)|(Local_u8Data1)|(Local_u8Data2<<12)|(Local_u8Data3<<8);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	7a7b      	ldrb	r3, [r7, #9]
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7a3b      	ldrb	r3, [r7, #8]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	b291      	uxth	r1, r2
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <PARSING_voidWriteData+0x164>)
 8000c3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (u8 Local_u8Counter =0 ; Local_u8Counter<Local_u8NumByte/2;Local_u8Counter++)
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	3301      	adds	r3, #1
 8000c46:	75fb      	strb	r3, [r7, #23]
 8000c48:	7d3b      	ldrb	r3, [r7, #20]
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	7dfa      	ldrb	r2, [r7, #23]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3b4      	bcc.n	8000bbe <PARSING_voidWriteData+0xb2>
		}
		FPEC_voidFlashWrite(Local_u8MainAddress,Data,Local_u8NumByte/2);
 8000c54:	7d3b      	ldrb	r3, [r7, #20]
 8000c56:	085b      	lsrs	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4904      	ldr	r1, [pc, #16]	; (8000c70 <PARSING_voidWriteData+0x164>)
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff fe6a 	bl	8000938 <FPEC_voidFlashWrite>
	}
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	2000005c 	.word	0x2000005c

08000c74 <main>:
    SCB_AIRCR = (VECTKEY << 16) | (1 << SYSRESETREQ_BIT);
}


void main (void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a4      	sub	sp, #144	; 0x90
 8000c78:	af00      	add	r7, sp, #0
	/*Initialize RCC*/
	RCC_voidInit();
 8000c7a:	f7ff fb37 	bl	80002ec <RCC_voidInit>

	/*Initialize GPIO*/
	GPIO_voidDirectionInit();
 8000c7e:	f7ff fa77 	bl	8000170 <GPIO_voidDirectionInit>

	/*Initialize USART*/
	USART_voidInit(USART1);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fd06 	bl	8000694 <USART_voidInit>

	/*Initialize FPEC*/
	FPEC_voidInit();
 8000c88:	f7ff fdf8 	bl	800087c <FPEC_voidInit>
	#elif BOOT_TARGET == BOOT_APP2
	LED_voidLedOn(&Global_LED_tApp2);
	#endif*/
	

	u16 Update = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	u16 No_update =0 ;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	u16 Corruption =2 ;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e


	LED_t LED1 = {LED_PORTA,LED_PIN4,LED_ACTIVE_HIGH};
 8000c9e:	4a7e      	ldr	r2, [pc, #504]	; (8000e98 <main+0x224>)
 8000ca0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	8019      	strh	r1, [r3, #0]
 8000caa:	3302      	adds	r3, #2
 8000cac:	0c12      	lsrs	r2, r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]
	LED_voidLedOn(&LED1);
 8000cb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fef4 	bl	8000aa2 <LED_voidLedOn>

	u8 ok[]={"o"};
 8000cba:	236f      	movs	r3, #111	; 0x6f
 8000cbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	// Array of Data
	u8 BOOT_u8RecData[100];

	// Flag to Write
	u8 BOOT_u8FinRecFlag = 0 ;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	//index of Data
	u32 BOOT_u32RecCounter =0 ;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	//index of Erase pages
	u32 BOOT_u32EraseCounter =0 ;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	//Check Sum
	u8 Check_s32Sum = 0 ;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	u32 Check_s32Counter = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	67fb      	str	r3, [r7, #124]	; 0x7c
	u8 BOOT_u8Digit0 ;
	u8 BOOT_u8Digit1 ;
	u8 BOOT_u8Data ;
	u8 Check_sum_Validation ;
	// flag to start and end Erase operation
	u32 BOOT_u32EraseFlag =1 ;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	67bb      	str	r3, [r7, #120]	; 0x78

	/*******************************************************************************************/
	/*******************************************************************************************/
	/********************************BOOTLOADER**************************************************/
	if (READ_REQUEST_FLAG==Update )
 8000ce0:	4b6e      	ldr	r3, [pc, #440]	; (8000e9c <main+0x228>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 80c8 	bne.w	8000e7e <main+0x20a>
	{



			// to get the record
		while (BOOT_u8FinRecFlag ==0 )
 8000cee:	e0c1      	b.n	8000e74 <main+0x200>
		{

			/************* for reseiving the records **************/
			BOOT_u8RecData[BOOT_u32RecCounter]=USART_u8ReceiveChar(USART1);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff fd25 	bl	8000740 <USART_u8ReceiveChar>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	463a      	mov	r2, r7
 8000cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
			/**************************************************************************************/
			if (BOOT_u8RecData[BOOT_u32RecCounter]=='\n')
 8000d06:	463a      	mov	r2, r7
 8000d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b0a      	cmp	r3, #10
 8000d12:	f040 80aa 	bne.w	8000e6a <main+0x1f6>
			{
				/****************************Erase APPLICATION 1 **************************************/
				if (BOOT_u32EraseFlag==1)
 8000d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d114      	bne.n	8000d46 <main+0xd2>
				{

					for (BOOT_u32EraseCounter=20 ;BOOT_u32EraseCounter<60 ;BOOT_u32EraseCounter++)
 8000d1c:	2314      	movs	r3, #20
 8000d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d22:	e00a      	b.n	8000d3a <main+0xc6>
					{
						FPEC_voidFlashPageErase(BOOT_u32EraseCounter);
 8000d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fdc2 	bl	80008b4 <FPEC_voidFlashPageErase>
					for (BOOT_u32EraseCounter=20 ;BOOT_u32EraseCounter<60 ;BOOT_u32EraseCounter++)
 8000d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d34:	3301      	adds	r3, #1
 8000d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d3e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d40:	d9f0      	bls.n	8000d24 <main+0xb0>
					}
					BOOT_u32EraseFlag = 0 ;
 8000d42:	2300      	movs	r3, #0
 8000d44:	67bb      	str	r3, [r7, #120]	; 0x78
				}

				Check_s32Sum =0 ;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				Check_s32Counter = 1 ;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	67fb      	str	r3, [r7, #124]	; 0x7c

				while(Check_s32Counter<BOOT_u32RecCounter-2)
 8000d50:	e029      	b.n	8000da6 <main+0x132>
				{
					BOOT_u8Digit0=PARSING_u8AsciToHex(BOOT_u8RecData[Check_s32Counter]);
 8000d52:	463a      	mov	r2, r7
 8000d54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff febe 	bl	8000adc <PARSING_u8AsciToHex>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

					BOOT_u8Digit1 =PARSING_u8AsciToHex(BOOT_u8RecData[Check_s32Counter+1]);
 8000d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d68:	3301      	adds	r3, #1
 8000d6a:	3390      	adds	r3, #144	; 0x90
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff feb2 	bl	8000adc <PARSING_u8AsciToHex>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

					BOOT_u8Data = (BOOT_u8Digit0<<4)|(BOOT_u8Digit1);
 8000d7e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

					Check_s32Sum =Check_s32Sum + BOOT_u8Data ;
 8000d92:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000d96:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

					Check_s32Counter = Check_s32Counter+2 ;
 8000da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da2:	3302      	adds	r3, #2
 8000da4:	67fb      	str	r3, [r7, #124]	; 0x7c
				while(Check_s32Counter<BOOT_u32RecCounter-2)
 8000da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000daa:	3b02      	subs	r3, #2
 8000dac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3cf      	bcc.n	8000d52 <main+0xde>

				}
				Check_s32Sum =~(Check_s32Sum -1) ;
 8000db2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000db6:	425b      	negs	r3, r3
 8000db8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

				// Validation
				BOOT_u8Digit0=PARSING_u8AsciToHex(BOOT_u8RecData[BOOT_u32RecCounter-2]);
 8000dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000dc0:	3b02      	subs	r3, #2
 8000dc2:	3390      	adds	r3, #144	; 0x90
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe86 	bl	8000adc <PARSING_u8AsciToHex>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

				BOOT_u8Digit1 =PARSING_u8AsciToHex(BOOT_u8RecData[BOOT_u32RecCounter-1]);
 8000dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	3390      	adds	r3, #144	; 0x90
 8000dde:	443b      	add	r3, r7
 8000de0:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe79 	bl	8000adc <PARSING_u8AsciToHex>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

				Check_sum_Validation = (BOOT_u8Digit0<<4)|(BOOT_u8Digit1);
 8000df0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	b25a      	sxtb	r2, r3
 8000df8:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73


				if (Check_s32Sum !=Check_sum_Validation)
 8000e04:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000e08:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d00e      	beq.n	8000e2e <main+0x1ba>
				{
					//Data Corruption
					GPIO_u8SetPinValue(GPIO_PORTA,GPIO_PIN_4, GPIO_PIN_HIGH);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2104      	movs	r1, #4
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff f9d9 	bl	80001cc <GPIO_u8SetPinValue>
					FPEC_voidFlashPageErase(15);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f7ff fd4a 	bl	80008b4 <FPEC_voidFlashPageErase>
					FPEC_voidFlashWrite(BOOT_u8REQUESTFLAG, &Corruption, 1);
 8000e20:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	481d      	ldr	r0, [pc, #116]	; (8000ea0 <main+0x22c>)
 8000e2a:	f7ff fd85 	bl	8000938 <FPEC_voidFlashWrite>
					//IWDG_voidReset(100);

				}
				/**************************************************************************************/
				/*********************************Write Operation *************************************/
				PARSING_voidWriteData(BOOT_u8RecData);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe6b 	bl	8000b0c <PARSING_voidWriteData>
				USART_voidTransmitSync(USART1,ok);
 8000e36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fc51 	bl	80006e4 <USART_voidTransmitSync>
				BOOT_u32RecCounter =0 ;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				//READ_REQUEST_FLAG = 1 ;
				if (BOOT_u8RecData[8]=='1')
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	2b31      	cmp	r3, #49	; 0x31
 8000e4c:	d112      	bne.n	8000e74 <main+0x200>
				{
					FPEC_voidFlashPageErase(15);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fd30 	bl	80008b4 <FPEC_voidFlashPageErase>
					FPEC_voidFlashWrite(BOOT_u8REQUESTFLAG, &No_update, 1);
 8000e54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <main+0x22c>)
 8000e5e:	f7ff fd6b 	bl	8000938 <FPEC_voidFlashWrite>
					//IWDG_voidReset(100);
					BOOT_u8FinRecFlag=1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000e68:	e004      	b.n	8000e74 <main+0x200>


			}
			else
			{
				BOOT_u32RecCounter++;
 8000e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		while (BOOT_u8FinRecFlag ==0 )
 8000e74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f43f af39 	beq.w	8000cf0 <main+0x7c>

	/*******************************************************************************************/
	/*******************************************************************************************/

	/********************************APPLICATION1************************************************/
	if (READ_REQUEST_FLAG==No_update )
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <main+0x228>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d101      	bne.n	8000e8e <main+0x21a>
		{

		APP1();
 8000e8a:	f000 f80b 	bl	8000ea4 <APP1>
		APP2();
	}
*/


}
 8000e8e:	bf00      	nop
 8000e90:	3790      	adds	r7, #144	; 0x90
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08000f84 	.word	0x08000f84
 8000e9c:	08003c00 	.word	0x08003c00
 8000ea0:	08003c00 	.word	0x08003c00

08000ea4 <APP1>:


/** to set the start address and allocate the vector table ****/

void APP1(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

	SCB_VTOR =0x08005000;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <APP1+0x1c>)
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <APP1+0x20>)
 8000eac:	601a      	str	r2, [r3, #0]
	AddrAPP1 =*(Application*)(0x08005004);
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <APP1+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <APP1+0x28>)
 8000eb4:	6013      	str	r3, [r2, #0]
	AddrAPP1();
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <APP1+0x28>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4798      	blx	r3

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	e000ed08 	.word	0xe000ed08
 8000ec4:	08005000 	.word	0x08005000
 8000ec8:	08005004 	.word	0x08005004
 8000ecc:	20000124 	.word	0x20000124

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f000 f811 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff feb7 	bl	8000c74 <main>

08000f06 <LoopForever>:

LoopForever:
  b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000f14:	08000f9c 	.word	0x08000f9c
  ldr r2, =_sbss
 8000f18:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000f1c:	20000128 	.word	0x20000128

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	2600      	movs	r6, #0
 8000f28:	4d0c      	ldr	r5, [pc, #48]	; (8000f5c <__libc_init_array+0x38>)
 8000f2a:	4c0d      	ldr	r4, [pc, #52]	; (8000f60 <__libc_init_array+0x3c>)
 8000f2c:	1b64      	subs	r4, r4, r5
 8000f2e:	10a4      	asrs	r4, r4, #2
 8000f30:	42a6      	cmp	r6, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	f000 f81a 	bl	8000f6c <_init>
 8000f38:	2600      	movs	r6, #0
 8000f3a:	4d0a      	ldr	r5, [pc, #40]	; (8000f64 <__libc_init_array+0x40>)
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <__libc_init_array+0x44>)
 8000f3e:	1b64      	subs	r4, r4, r5
 8000f40:	10a4      	asrs	r4, r4, #2
 8000f42:	42a6      	cmp	r6, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f4c:	4798      	blx	r3
 8000f4e:	3601      	adds	r6, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f56:	4798      	blx	r3
 8000f58:	3601      	adds	r6, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08000f94 	.word	0x08000f94
 8000f60:	08000f94 	.word	0x08000f94
 8000f64:	08000f94 	.word	0x08000f94
 8000f68:	08000f98 	.word	0x08000f98

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
