
UART_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e0c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .my_section   00000002  080028c0  080028c0  000128c0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rodata       0000000c  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080028d0  080028d0  00020004  2**0
                  CONTENTS
  5 .ARM          00000000  080028d0  080028d0  00020004  2**0
                  CONTENTS
  6 .preinit_array 00000000  080028d0  080028d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000004  20000000  080028d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000124  20000004  080028dc  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  080028dc  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 14 .debug_info   000021a1  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ca5  00000000  00000000  00022211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000390  00000000  00000000  00022eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000028e  00000000  00000000  00023248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001b74  00000000  00000000  000234d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001fdf  00000000  00000000  0002504a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000081d3  00000000  00000000  00027029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000bf8  00000000  00000000  0002f1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0002fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f24 	.word	0x08000f24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000f24 	.word	0x08000f24

08000170 <GPIO_voidDirectionInit>:
#include "GPIO_config.h"
#include "GPIO_register.h"

//Initializing all pins direction
void GPIO_voidDirectionInit()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//PortA Direction
	GPIOA->CRL  = PORTA_DIR1;
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <GPIO_voidDirectionInit+0x48>)
 8000178:	601a      	str	r2, [r3, #0]
	GPIOA->CRH  = PORTA_DIR;
 800017a:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 800017c:	4a0f      	ldr	r2, [pc, #60]	; (80001bc <GPIO_voidDirectionInit+0x4c>)
 800017e:	605a      	str	r2, [r3, #4]

	//PortB Direction
	GPIOB->CRL  = PORTB_DIR1;
 8000180:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 8000182:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 8000186:	601a      	str	r2, [r3, #0]
	GPIOB->CRH  = PORTB_DIR;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 800018a:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 800018e:	605a      	str	r2, [r3, #4]
	
	//PortC Direction
	GPIOC->CRH  = PORTC_DIR;
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <GPIO_voidDirectionInit+0x54>)
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <GPIO_voidDirectionInit+0x58>)
 8000194:	605a      	str	r2, [r3, #4]
	
	//Ports Initial Value
	GPIOA->ODR  = PORTA_VAlUE;
 8000196:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <GPIO_voidDirectionInit+0x44>)
 8000198:	2200      	movs	r2, #0
 800019a:	60da      	str	r2, [r3, #12]
	GPIOB->ODR  = PORTB_VALUE;
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <GPIO_voidDirectionInit+0x50>)
 800019e:	2200      	movs	r2, #0
 80001a0:	60da      	str	r2, [r3, #12]
	GPIOC->ODR  = PORTC_VALUE;
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <GPIO_voidDirectionInit+0x54>)
 80001a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001a8:	60da      	str	r2, [r3, #12]
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800
 80001b8:	22222444 	.word	0x22222444
 80001bc:	222b44a2 	.word	0x222b44a2
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	40011000 	.word	0x40011000
 80001c8:	22200000 	.word	0x22200000

080001cc <GPIO_u8SetPinValue>:

//Seting Output value for certain pin
u8 GPIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	460b      	mov	r3, r1
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	4613      	mov	r3, r2
 80001dc:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState = OK ;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	if (Copy_u8Pin <= GPIO_PIN_15)	//Input Validation
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	2b0f      	cmp	r3, #15
 80001e6:	d873      	bhi.n	80002d0 <GPIO_u8SetPinValue+0x104>
		//Output High
		if(Copy_u8Value == GPIO_PIN_HIGH)
 80001e8:	797b      	ldrb	r3, [r7, #5]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d133      	bne.n	8000256 <GPIO_u8SetPinValue+0x8a>
			switch (Copy_u8Port)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d01c      	beq.n	800022e <GPIO_u8SetPinValue+0x62>
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	dc2b      	bgt.n	8000250 <GPIO_u8SetPinValue+0x84>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <GPIO_u8SetPinValue+0x36>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d00b      	beq.n	8000218 <GPIO_u8SetPinValue+0x4c>
 8000200:	e026      	b.n	8000250 <GPIO_u8SetPinValue+0x84>
			{
				case GPIO_PORTA : SET_BIT(GPIOA->ODR,Copy_u8Pin);break;
 8000202:	4b37      	ldr	r3, [pc, #220]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	79ba      	ldrb	r2, [r7, #6]
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	4611      	mov	r1, r2
 8000210:	4a33      	ldr	r2, [pc, #204]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000212:	430b      	orrs	r3, r1
 8000214:	60d3      	str	r3, [r2, #12]
 8000216:	e05d      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTB : SET_BIT(GPIOB->ODR,Copy_u8Pin);break;
 8000218:	4b32      	ldr	r3, [pc, #200]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	79ba      	ldrb	r2, [r7, #6]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	4611      	mov	r1, r2
 8000226:	4a2f      	ldr	r2, [pc, #188]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 8000228:	430b      	orrs	r3, r1
 800022a:	60d3      	str	r3, [r2, #12]
 800022c:	e052      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)SET_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	2b0c      	cmp	r3, #12
 8000232:	d90a      	bls.n	800024a <GPIO_u8SetPinValue+0x7e>
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	2101      	movs	r1, #1
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a29      	ldr	r2, [pc, #164]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 8000244:	430b      	orrs	r3, r1
 8000246:	60d3      	str	r3, [r2, #12]
 8000248:	e044      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
 800024a:	2301      	movs	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e041      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				default : Local_u8ErrorState =NOK ;
 8000250:	2301      	movs	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
 8000254:	e03e      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
			}
		//Output Low
		else if(Copy_u8Value == GPIO_PIN_LOW)
 8000256:	797b      	ldrb	r3, [r7, #5]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d136      	bne.n	80002ca <GPIO_u8SetPinValue+0xfe>
			switch (Copy_u8Port)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01e      	beq.n	80002a0 <GPIO_u8SetPinValue+0xd4>
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc2e      	bgt.n	80002c4 <GPIO_u8SetPinValue+0xf8>
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <GPIO_u8SetPinValue+0xa4>
 800026a:	2b01      	cmp	r3, #1
 800026c:	d00c      	beq.n	8000288 <GPIO_u8SetPinValue+0xbc>
 800026e:	e029      	b.n	80002c4 <GPIO_u8SetPinValue+0xf8>
			{
				case GPIO_PORTA : CLR_BIT(GPIOA->ODR,Copy_u8Pin);break;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <GPIO_u8SetPinValue+0x114>)
 8000282:	400b      	ands	r3, r1
 8000284:	60d3      	str	r3, [r2, #12]
 8000286:	e025      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTB : CLR_BIT(GPIOB->ODR,Copy_u8Pin);break;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	43d2      	mvns	r2, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <GPIO_u8SetPinValue+0x118>)
 800029a:	400b      	ands	r3, r1
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	e019      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				case GPIO_PORTC : if (Copy_u8Pin >= GPIO_PIN_13)CLR_BIT(GPIOC->ODR,Copy_u8Pin);else Local_u8ErrorState=NOK;break;
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2b0c      	cmp	r3, #12
 80002a4:	d90b      	bls.n	80002be <GPIO_u8SetPinValue+0xf2>
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	2101      	movs	r1, #1
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	43d2      	mvns	r2, r2
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <GPIO_u8SetPinValue+0x11c>)
 80002b8:	400b      	ands	r3, r1
 80002ba:	60d3      	str	r3, [r2, #12]
 80002bc:	e00a      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
 80002be:	2301      	movs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e007      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
				default : Local_u8ErrorState =NOK;		
 80002c4:	2301      	movs	r3, #1
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e004      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
			}
		//Wrong Input	
		else 
			Local_u8ErrorState =NOK;
 80002ca:	2301      	movs	r3, #1
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e001      	b.n	80002d4 <GPIO_u8SetPinValue+0x108>
	//Wrong Input
	else 
		Local_u8ErrorState =NOK ;
 80002d0:	2301      	movs	r3, #1
 80002d2:	73fb      	strb	r3, [r7, #15]
	
	return Local_u8ErrorState ;
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40010c00 	.word	0x40010c00
 80002e8:	40011000 	.word	0x40011000

080002ec <RCC_voidInit>:
#include "RCC_config.h"


//Initializing All Peripherals
void RCC_voidInit (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	RCC_u8ChangeModeBuses (RCC_CR_HSI , RCC_ENABLE) ;
 80002f0:	2101      	movs	r1, #1
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f882 	bl	80003fc <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_HSE , RCC_ENABLE) ;
 80002f8:	2101      	movs	r1, #1
 80002fa:	2010      	movs	r0, #16
 80002fc:	f000 f87e 	bl	80003fc <RCC_u8ChangeModeBuses>
	RCC_u8ChangeModeBuses (RCC_CR_PLL , RCC_ENABLE) ;
 8000300:	2101      	movs	r1, #1
 8000302:	2018      	movs	r0, #24
 8000304:	f000 f87a 	bl	80003fc <RCC_u8ChangeModeBuses>

	//Selection Section
	#if RCC_CLOCK_SYS	==  RCC_HSI_SELECTION
	RCC->CFGR&=~(3<<0);/***************EDIT***********/
 8000308:	4b3b      	ldr	r3, [pc, #236]	; (80003f8 <RCC_voidInit+0x10c>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a3a      	ldr	r2, [pc, #232]	; (80003f8 <RCC_voidInit+0x10c>)
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=RCC_HSI_SELECTION ;
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <RCC_voidInit+0x10c>)
 8000316:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <RCC_voidInit+0x10c>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	6053      	str	r3, [r2, #4]

	//Select the Secuity of RCC if the external clock is drop  the security mode convert to  the internal  clock
	#if RCC_SECURITY == RCC_ENABLE
	SET_BIT (RCC->CR ,RCC_ENABLE );
	#elif RCC_SECURITY == RCC_DISABLE
	CLR_BIT (RCC->CR ,RCC_ENABLE );
 800031c:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <RCC_voidInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a35      	ldr	r2, [pc, #212]	; (80003f8 <RCC_voidInit+0x10c>)
 8000322:	f023 0302 	bic.w	r3, r3, #2
 8000326:	6013      	str	r3, [r2, #0]
	#else
	#error "THE SELECTION OF RCC SECURITY "
	#endif

	//Clear the prescaler bits of  APB1
	RCC->CFGR&=~(7<<8);	/***************EDIT***********/
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <RCC_voidInit+0x10c>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a32      	ldr	r2, [pc, #200]	; (80003f8 <RCC_voidInit+0x10c>)
 800032e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000332:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<8);/***************EDIT***********/
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <RCC_voidInit+0x10c>)
 8000336:	4a30      	ldr	r2, [pc, #192]	; (80003f8 <RCC_voidInit+0x10c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	6053      	str	r3, [r2, #4]

	//Clear the prescaler bits of  APB2
	RCC->CFGR&=~(7<<11);/***************EDIT***********/
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <RCC_voidInit+0x10c>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <RCC_voidInit+0x10c>)
 8000342:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000346:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB2_PRESCALER<<11);/***************EDIT***********/
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <RCC_voidInit+0x10c>)
 800034a:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <RCC_voidInit+0x10c>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	6053      	str	r3, [r2, #4]

	//Clear the prescaler bits of  AHB
	RCC->CFGR&=~(15<<4);/***************EDIT***********/
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <RCC_voidInit+0x10c>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <RCC_voidInit+0x10c>)
 8000356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800035a:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_APB1_PRESCALER<<4);/***************EDIT***********/
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <RCC_voidInit+0x10c>)
 800035e:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <RCC_voidInit+0x10c>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	6053      	str	r3, [r2, #4]

	//Select the multiplication of PLL
	RCC->CFGR&=~(4<<18);/***************EDIT***********/
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <RCC_voidInit+0x10c>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a23      	ldr	r2, [pc, #140]	; (80003f8 <RCC_voidInit+0x10c>)
 800036a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800036e:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(RCC_PLL_MULL<<18);/***************EDIT***********/
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <RCC_voidInit+0x10c>)
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <RCC_voidInit+0x10c>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	6053      	str	r3, [r2, #4]

	//Adjust System Clock
	RCC_voidAjustmentClockSys();
 8000378:	f000 f8e4 	bl	8000544 <RCC_voidAjustmentClockSys>
	#if RCC_ADC3_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC3-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_USART1_STATE	    ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_USART1-RCC_APB2_OFFSET));
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <RCC_voidInit+0x10c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <RCC_voidInit+0x10c>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000386:	6193      	str	r3, [r2, #24]
	#if RCC_SPI1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_SPI1-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_TIM1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_TIM1-RCC_APB2_OFFSET));
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <RCC_voidInit+0x10c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <RCC_voidInit+0x10c>)
 800038e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000392:	6193      	str	r3, [r2, #24]
	#if RCC_ADC2_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC2-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_ADC1_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_ADC1-RCC_APB2_OFFSET));
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <RCC_voidInit+0x10c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <RCC_voidInit+0x10c>)
 800039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039e:	6193      	str	r3, [r2, #24]
	#if RCC_IOPD_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPD-RCC_APB2_OFFSET));
	#endif
	
	#if RCC_IOPC_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPC-RCC_APB2_OFFSET));
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <RCC_voidInit+0x10c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <RCC_voidInit+0x10c>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
	#endif
	
	#if RCC_IOPB_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPB-RCC_APB2_OFFSET));
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <RCC_voidInit+0x10c>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <RCC_voidInit+0x10c>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
	#endif
	
	#if RCC_IOPA_STATE	        ==     RCC_ENABLE
	SET_BIT(RCC->APB2ENR,(RCC_IOPA-RCC_APB2_OFFSET));
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <RCC_voidInit+0x10c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <RCC_voidInit+0x10c>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
	#if   RCC_BKP_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_BKP	-RCC_APB1_OFFSET));
	#endif
	
	#if   RCC_CAN_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_CAN	-RCC_APB1_OFFSET));
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <RCC_voidInit+0x10c>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <RCC_voidInit+0x10c>)
 80003ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ce:	61d3      	str	r3, [r2, #28]
	#endif
	
	#if   RCC_USB_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_USB	-RCC_APB1_OFFSET));
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <RCC_voidInit+0x10c>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <RCC_voidInit+0x10c>)
 80003d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003da:	61d3      	str	r3, [r2, #28]
	#if   RCC_SPI2_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_SPI2-RCC_APB1_OFFSET));
	#endif
	
	#if   RCC_WWDG_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_WWDG-RCC_APB1_OFFSET));
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <RCC_voidInit+0x10c>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <RCC_voidInit+0x10c>)
 80003e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e6:	61d3      	str	r3, [r2, #28]
	#if   RCC_TIM3_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_TIM3-RCC_APB1_OFFSET));
	#endif
	
	#if   RCC_TIM2_STATE	        ==    RCC_ENABLE
	SET_BIT(RCC->APB1ENR,(RCC_TIM2-RCC_APB1_OFFSET));
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <RCC_voidInit+0x10c>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4a02      	ldr	r2, [pc, #8]	; (80003f8 <RCC_voidInit+0x10c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	61d3      	str	r3, [r2, #28]
	#endif
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000

080003fc <RCC_u8ChangeModeBuses>:
	return Local_u8ErrorState;
}

//Changing Bus Mode
u8 RCC_u8ChangeModeBuses(u8 Copy_u8SysClock , u8 Copy_u8StateBus)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	460a      	mov	r2, r1
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	4613      	mov	r3, r2
 800040a:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8StateError = OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8StateBus == RCC_ENABLE)
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d142      	bne.n	800049c <RCC_u8ChangeModeBuses+0xa0>
		switch (Copy_u8SysClock)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b18      	cmp	r3, #24
 800041a:	d02a      	beq.n	8000472 <RCC_u8ChangeModeBuses+0x76>
 800041c:	2b18      	cmp	r3, #24
 800041e:	dc3a      	bgt.n	8000496 <RCC_u8ChangeModeBuses+0x9a>
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <RCC_u8ChangeModeBuses+0x2e>
 8000424:	2b10      	cmp	r3, #16
 8000426:	d012      	beq.n	800044e <RCC_u8ChangeModeBuses+0x52>
 8000428:	e035      	b.n	8000496 <RCC_u8ChangeModeBuses+0x9a>
		{
			case RCC_CR_HSI:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)==0);break;
 800042a:	4b45      	ldr	r3, [pc, #276]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	79fa      	ldrb	r2, [r7, #7]
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a41      	ldr	r2, [pc, #260]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 800043a:	430b      	orrs	r3, r1
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	bf00      	nop
 8000440:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f003 0302 	and.w	r3, r3, #2
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <RCC_u8ChangeModeBuses+0x44>
 800044c:	e071      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_HSE:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)==0);break;
 800044e:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	2101      	movs	r1, #1
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a38      	ldr	r2, [pc, #224]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 800045e:	430b      	orrs	r3, r1
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	bf00      	nop
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <RCC_u8ChangeModeBuses+0x68>
 8000470:	e05f      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_PLL:  SET_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)==0);break;
 8000472:	4b33      	ldr	r3, [pc, #204]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	bf00      	nop
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f9      	beq.n	8000488 <RCC_u8ChangeModeBuses+0x8c>
 8000494:	e04d      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			default: Local_u8StateError = NOK; break;	//Wrong Input
 8000496:	2301      	movs	r3, #1
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	e04a      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
		}

	else if (Copy_u8StateBus == RCC_DISABLE)
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d145      	bne.n	800052e <RCC_u8ChangeModeBuses+0x132>
		switch (Copy_u8SysClock)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b18      	cmp	r3, #24
 80004a6:	d02c      	beq.n	8000502 <RCC_u8ChangeModeBuses+0x106>
 80004a8:	2b18      	cmp	r3, #24
 80004aa:	dc3d      	bgt.n	8000528 <RCC_u8ChangeModeBuses+0x12c>
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d002      	beq.n	80004b6 <RCC_u8ChangeModeBuses+0xba>
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d013      	beq.n	80004dc <RCC_u8ChangeModeBuses+0xe0>
 80004b4:	e038      	b.n	8000528 <RCC_u8ChangeModeBuses+0x12c>
		{
			case RCC_CR_HSI:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSI_READY)!=0);break;
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	79fa      	ldrb	r2, [r7, #7]
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004c8:	400b      	ands	r3, r1
 80004ca:	6013      	str	r3, [r2, #0]
 80004cc:	bf00      	nop
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1f9      	bne.n	80004ce <RCC_u8ChangeModeBuses+0xd2>
 80004da:	e02a      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_HSE:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_HSE_READY)!=0);break;
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	79fa      	ldrb	r2, [r7, #7]
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004ee:	400b      	ands	r3, r1
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	bf00      	nop
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1f9      	bne.n	80004f4 <RCC_u8ChangeModeBuses+0xf8>
 8000500:	e017      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			case RCC_CR_PLL:  CLR_BIT(RCC->CR,Copy_u8SysClock);while (GET_BIT(RCC->CR,RCC_PLL_READY)!=0);break;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	79fa      	ldrb	r2, [r7, #7]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 8000514:	400b      	ands	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	bf00      	nop
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <RCC_u8ChangeModeBuses+0x144>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1f9      	bne.n	800051a <RCC_u8ChangeModeBuses+0x11e>
 8000526:	e004      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
			default: Local_u8StateError = NOK;	break;	//Wrong Input
 8000528:	2301      	movs	r3, #1
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e001      	b.n	8000532 <RCC_u8ChangeModeBuses+0x136>
		}
	//Wrong Input
	else
		Local_u8StateError = NOK;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]

	return Local_u8StateError ;
 8000532:	7bfb      	ldrb	r3, [r7, #15]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <RCC_voidAjustmentClockSys>:
	return Local_u8ErrorState;

}
//Adjusting System clock and calibrating error
void RCC_voidAjustmentClockSys ()
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
	u32 Local_u8RealValue ; // the value of HSICAL
	u8 Local_u8ChangeValue ;
	u8 Local_u8EditionValue ; // the value of the HSITRIM
	Local_u8RealValue = 255|(RCC->CR>>8); /***************EDIT***********/
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <RCC_voidAjustmentClockSys+0x58>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000554:	607b      	str	r3, [r7, #4]
	if (Local_u8RealValue != RCC_HSI_SPEED)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <RCC_voidAjustmentClockSys+0x5c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d018      	beq.n	8000590 <RCC_voidAjustmentClockSys+0x4c>
	{
		Local_u8ChangeValue = Local_u8RealValue - RCC_HSI_SPEED ;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	70fb      	strb	r3, [r7, #3]
		Local_u8ChangeValue /= 40 ;/***************EDIT***********/
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <RCC_voidAjustmentClockSys+0x60>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	095b      	lsrs	r3, r3, #5
 800056c:	70fb      	strb	r3, [r7, #3]
		Local_u8EditionValue= (31 | (RCC->CR>>3)) + 40 ;/***************EDIT***********/
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <RCC_voidAjustmentClockSys+0x58>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	08db      	lsrs	r3, r3, #3
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f043 031f 	orr.w	r3, r3, #31
 800057a:	b2db      	uxtb	r3, r3
 800057c:	3328      	adds	r3, #40	; 0x28
 800057e:	70bb      	strb	r3, [r7, #2]
		RCC->CR |=(Local_u8EditionValue <<3);/***************EDIT***********/
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <RCC_voidAjustmentClockSys+0x58>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	78ba      	ldrb	r2, [r7, #2]
 8000586:	00d2      	lsls	r2, r2, #3
 8000588:	4611      	mov	r1, r2
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <RCC_voidAjustmentClockSys+0x58>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6013      	str	r3, [r2, #0]
	}
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	007a1200 	.word	0x007a1200
 80005a4:	cccccccd 	.word	0xcccccccd

080005a8 <EXTI0_IRQHandler>:
{
	EXTI_CallBack[Copy_u8InterruptLine] = Copy_pvCallBackFunc; 
}

void EXTI0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE0]();
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <EXTI0_IRQHandler+0x1c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE0);
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI0_IRQHandler+0x20>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI0_IRQHandler+0x20>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000020 	.word	0x20000020
 80005c8:	40010400 	.word	0x40010400

080005cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE1]();
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <EXTI1_IRQHandler+0x1c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE1);
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <EXTI1_IRQHandler+0x20>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <EXTI1_IRQHandler+0x20>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6153      	str	r3, [r2, #20]
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000020 	.word	0x20000020
 80005ec:	40010400 	.word	0x40010400

080005f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE2]();
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <EXTI2_IRQHandler+0x1c>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE2);
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <EXTI2_IRQHandler+0x20>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <EXTI2_IRQHandler+0x20>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6153      	str	r3, [r2, #20]
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000020 	.word	0x20000020
 8000610:	40010400 	.word	0x40010400

08000614 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE3]();
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <EXTI3_IRQHandler+0x1c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE3);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <EXTI3_IRQHandler+0x20>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <EXTI3_IRQHandler+0x20>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6153      	str	r3, [r2, #20]
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000020 	.word	0x20000020
 8000634:	40010400 	.word	0x40010400

08000638 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_LINE4]();
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI4_IRQHandler+0x1c>)
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	4798      	blx	r3
	/*	Clear pending Bit  */
	SET_BIT(EXTI->PR, EXTI_LINE4);
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <EXTI4_IRQHandler+0x20>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <EXTI4_IRQHandler+0x20>)
 8000648:	f043 0310 	orr.w	r3, r3, #16
 800064c:	6153      	str	r3, [r2, #20]
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000020 	.word	0x20000020
 8000658:	40010400 	.word	0x40010400

0800065c <USART_Get>:
		(USART_t*)USART2_BASE,
		(USART_t*)USART3_BASE,
};

//Geting USART Port and setting correct base address
static USART_t *USART_Get(u8 usart) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	switch(usart) {
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d00a      	beq.n	8000682 <USART_Get+0x26>
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc0a      	bgt.n	8000686 <USART_Get+0x2a>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <USART_Get+0x1e>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d002      	beq.n	800067e <USART_Get+0x22>
 8000678:	e005      	b.n	8000686 <USART_Get+0x2a>
	case USART1: return (USART_t*)USART1_BASE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <USART_Get+0x38>)
 800067c:	e004      	b.n	8000688 <USART_Get+0x2c>
	case USART2: return (USART_t*)USART2_BASE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <USART_Get+0x3c>)
 8000680:	e002      	b.n	8000688 <USART_Get+0x2c>
	case USART3: return (USART_t*)USART3_BASE;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <USART_Get+0x40>)
 8000684:	e000      	b.n	8000688 <USART_Get+0x2c>
	default:     return (USART_t*)USART1_BASE;
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <USART_Get+0x38>)
	}
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40013800 	.word	0x40013800
 8000698:	40004400 	.word	0x40004400
 800069c:	40004800 	.word	0x40004800

080006a0 <USART_voidInit>:

//Initializing USART Communication
void USART_voidInit( u8 Copy_u8UsartPort )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	//USART_t *USART = usart_ports[Copy_u8UsartPort];
	USART_t *USART = USART_Get(Copy_u8UsartPort);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffd5 	bl	800065c <USART_Get>
 80006b2:	60f8      	str	r0, [r7, #12]
	/*FCK = 8 MHZ   baudrate = 9600*/
	USART->BRR =BAUD_RATE ;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f240 3241 	movw	r2, #833	; 0x341
 80006ba:	609a      	str	r2, [r3, #8]
	/*USART enable        */
	SET_BIT(USART -> CR1,USART_UE);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	60da      	str	r2, [r3, #12]
	/*Transmitter enable  */
	SET_BIT(USART -> CR1,USART_TE);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f043 0208 	orr.w	r2, r3, #8
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	60da      	str	r2, [r3, #12]
	/*Receiver enable     */
	SET_BIT(USART -> CR1,USART_RE);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	f043 0204 	orr.w	r2, r3, #4
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	60da      	str	r2, [r3, #12]
	/* Clear All The Register*/
	USART -> SR =0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <USART_voidTransmitSync>:

}

//Synchronous Transmition 
void USART_voidTransmitSync(u8 Copy_u8UsartPort, u8 Copy_u8DataArr[])
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
	USART_t *USART = usart_ports[Copy_u8UsartPort];
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <USART_voidTransmitSync+0x58>)
 8000700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000704:	60bb      	str	r3, [r7, #8]
	u8 Local_u8Iterator = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8DataArr[Local_u8Iterator] != USART_NULL_CHAR)
 800070a:	e010      	b.n	800072e <USART_voidTransmitSync+0x3e>
	{
		USART -> DR = Copy_u8DataArr[Local_u8Iterator];
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	605a      	str	r2, [r3, #4]
		while(GET_BIT (USART -> SR , USART_TC) == 0);
 800071a:	bf00      	nop
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f9      	beq.n	800071c <USART_voidTransmitSync+0x2c>
		Local_u8Iterator++;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
	while (Copy_u8DataArr[Local_u8Iterator] != USART_NULL_CHAR)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1e8      	bne.n	800070c <USART_voidTransmitSync+0x1c>
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	080028c4 	.word	0x080028c4

0800074c <USART_u8ReceiveChar>:

//Recieve data as character
u8 USART_u8ReceiveChar(u8 Copy_u8UsartPort)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Data;
	USART_t *USART = USART_Get(Copy_u8UsartPort);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff7f 	bl	800065c <USART_Get>
 800075e:	60f8      	str	r0, [r7, #12]

	while((GET_BIT((USART->SR), USART_RXNE) == 0));
 8000760:	bf00      	nop
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f9      	beq.n	8000762 <USART_u8ReceiveChar+0x16>

	Local_u8Data = USART -> DR;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	72fb      	strb	r3, [r7, #11]

	return Local_u8Data;
 8000774:	7afb      	ldrb	r3, [r7, #11]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <USART1_IRQHandler>:
	return Local_u8ErrorState ;
}

//ISR for USART1
void USART1_IRQHandler (void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART1)->CR1,USART_RXNIE))
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff69 	bl	800065c <USART_Get>
 800078a:	4603      	mov	r3, r0
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <USART1_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART1]();
 8000796:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <USART1_IRQHandler+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4798      	blx	r3
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000034 	.word	0x20000034

080007a4 <USART2_IRQHandler>:

//ISR for USART2
void USART2_IRQHandler (void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART2)->CR1,USART_RXNIE))
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff57 	bl	800065c <USART_Get>
 80007ae:	4603      	mov	r3, r0
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	f003 0320 	and.w	r3, r3, #32
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <USART2_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART2]();
 80007ba:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <USART2_IRQHandler+0x20>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4798      	blx	r3
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000034 	.word	0x20000034

080007c8 <USART3_IRQHandler>:

//ISR for USART3
void USART3_IRQHandler (void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	if (GET_BIT(USART_Get(USART3)->CR1,USART_RXNIE))
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff ff45 	bl	800065c <USART_Get>
 80007d2:	4603      	mov	r3, r0
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <USART3_IRQHandler+0x1c>
		USART_voidCallBackFunc[USART3]();
 80007de:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <USART3_IRQHandler+0x20>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4798      	blx	r3
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000034 	.word	0x20000034

080007ec <USB_LP_CAN_RX0_IRQHandler>:
	}
}


void USB_LP_CAN_RX0_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	if (CAN->RF0R & CAN_FIFO_FMP)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <USB_LP_CAN_RX0_IRQHandler+0x1c>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <USB_LP_CAN_RX0_IRQHandler+0x16>
	{
		CAN_CallBack[0]();
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <USB_LP_CAN_RX0_IRQHandler+0x20>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4798      	blx	r3
	}

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006400 	.word	0x40006400
 800080c:	20000040 	.word	0x20000040

08000810 <CAN_RX1_IRQHandler>:

void CAN_RX1_IRQHandler (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	if (CAN->RF1R & CAN_FIFO_FMP)
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <CAN_RX1_IRQHandler+0x1c>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	f003 0303 	and.w	r3, r3, #3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <CAN_RX1_IRQHandler+0x16>
	{
		CAN_CallBack[1]();
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <CAN_RX1_IRQHandler+0x20>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4798      	blx	r3
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40006400 	.word	0x40006400
 8000830:	20000040 	.word	0x20000040

08000834 <SysTick_Handler>:
}



void SysTick_Handler (void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	u8 Local_u8Val = 0 ;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]

	if (STK_u32_MODE == STK_SINGLE_MODE)
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <SysTick_Handler+0x48>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10b      	bne.n	800085e <SysTick_Handler+0x2a>
	{
		/*Disable the Timer*/
		CLR_BIT(STK->STK_CTRL, EN_ABLE) ;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <SysTick_Handler+0x4c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <SysTick_Handler+0x4c>)
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
		STK->STK_LOAD =0 ;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <SysTick_Handler+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
		STK->STK_VAL = 0;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <SysTick_Handler+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
	}

	STK_voidCallBackFunc();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <SysTick_Handler+0x50>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4798      	blx	r3

	Local_u8Val=GET_BIT(STK->STK_CTRL,COUNT_FLAG);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SysTick_Handler+0x4c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	71fb      	strb	r3, [r7, #7]


}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000004c 	.word	0x2000004c
 8000880:	e000e010 	.word	0xe000e010
 8000884:	20000048 	.word	0x20000048

08000888 <FPEC_voidInit>:
#include "FPEC_private.h"
#include "FPEC_register.h"

//Initializing FPEC
void FPEC_voidInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	//Enter the latency of the flash as 0<clk<24MHZ
	FPEC->FLASH_ACR = FPEC_LATENCY ;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <FPEC_voidInit+0x2c>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]

	//Unlock the flash and FPEC_CR
	if (GET_BIT(FPEC->FLASH_CR,7)== 1)
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <FPEC_voidInit+0x2c>)
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	09db      	lsrs	r3, r3, #7
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b01      	cmp	r3, #1
 800089e:	d105      	bne.n	80008ac <FPEC_voidInit+0x24>
	{
		FPEC->FLASH_KEYR =  0x45670123;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <FPEC_voidInit+0x2c>)
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <FPEC_voidInit+0x30>)
 80008a4:	605a      	str	r2, [r3, #4]
		FPEC->FLASH_KEYR =  0xCDEF89AB;
 80008a6:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <FPEC_voidInit+0x2c>)
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <FPEC_voidInit+0x34>)
 80008aa:	605a      	str	r2, [r3, #4]
	}
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40022000 	.word	0x40022000
 80008b8:	45670123 	.word	0x45670123
 80008bc:	cdef89ab 	.word	0xcdef89ab

080008c0 <FPEC_voidFlashPageErase>:
		FPEC_voidFlashPageErase(Local_u8Counter);
}

//Erase Flash Page
u8 FPEC_voidFlashPageErase(u8 Copy_u8PageNumber)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8PageNumber<=FPEC_MAX_NUM_PAGE)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d82c      	bhi.n	800092e <FPEC_voidFlashPageErase+0x6e>
	{
		//BSY: Busy flag
		while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 80008d4:	bf00      	nop
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d0f9      	beq.n	80008d6 <FPEC_voidFlashPageErase+0x16>

		SET_BIT(FPEC->FLASH_CR,FLASH_CR_PER);
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6113      	str	r3, [r2, #16]

		FPEC->FLASH_AR = (u32)(Copy_u8PageNumber*1024)+0x08000000 ;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	029b      	lsls	r3, r3, #10
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 80008f4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80008f8:	6153      	str	r3, [r2, #20]
		//Start operation erase
		SET_BIT(FPEC->FLASH_CR ,FLASH_CR_STRT) ;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6113      	str	r3, [r2, #16]

		while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 8000906:	bf00      	nop
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b01      	cmp	r3, #1
 8000912:	d0f9      	beq.n	8000908 <FPEC_voidFlashPageErase+0x48>

		//END OPERATION
		SET_BIT(FPEC->FLASH_SR ,FLASH_SR_EOP);
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->FLASH_CR,FLASH_CR_PER);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <FPEC_voidFlashPageErase+0x80>)
 8000926:	f023 0302 	bic.w	r3, r3, #2
 800092a:	6113      	str	r3, [r2, #16]
 800092c:	e001      	b.n	8000932 <FPEC_voidFlashPageErase+0x72>
	}
	else
		Local_u8ErrorState = NOK;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
	
	return Local_u8ErrorState;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <FPEC_voidFlashWrite>:

//Write to flash
void FPEC_voidFlashWrite(u32 Copy_u32Address, u16* Copy_u16Data, u8 Copy_u8Length)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	71fb      	strb	r3, [r7, #7]

	//BSY: Busy flag
			while (GET_BIT(FPEC->FLASH_SR ,BSY_FLAG)==1);
 8000952:	bf00      	nop
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b01      	cmp	r3, #1
 800095e:	d0f9      	beq.n	8000954 <FPEC_voidFlashWrite+0x10>

	for (u8 Local_u8Counter = 0 ; Local_u8Counter<Copy_u8Length ; Local_u8Counter++)
 8000960:	2300      	movs	r3, #0
 8000962:	75fb      	strb	r3, [r7, #23]
 8000964:	e025      	b.n	80009b2 <FPEC_voidFlashWrite+0x6e>
	{

		SET_BIT(FPEC->FLASH_CR,FLASH_CR_PG);
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6113      	str	r3, [r2, #16]

		*((volatile u16 *)(Copy_u32Address)) =  Copy_u16Data[Local_u8Counter];
 8000972:	7dfb      	ldrb	r3, [r7, #23]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	441a      	add	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	8812      	ldrh	r2, [r2, #0]
 800097e:	801a      	strh	r2, [r3, #0]

		/*Waitting util the write operation is end*/

		while (GET_BIT(FPEC->FLASH_SR,BSY_FLAG) == 1);
 8000980:	bf00      	nop
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b01      	cmp	r3, #1
 800098c:	d0f9      	beq.n	8000982 <FPEC_voidFlashWrite+0x3e>

		SET_BIT(FPEC->FLASH_SR,FLASH_SR_EOP);
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->FLASH_CR,FLASH_CR_PG);
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <FPEC_voidFlashWrite+0x84>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	6113      	str	r3, [r2, #16]

		Copy_u32Address=Copy_u32Address+2;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3302      	adds	r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
	for (u8 Local_u8Counter = 0 ; Local_u8Counter<Copy_u8Length ; Local_u8Counter++)
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	3301      	adds	r3, #1
 80009b0:	75fb      	strb	r3, [r7, #23]
 80009b2:	7dfa      	ldrb	r2, [r7, #23]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d5      	bcc.n	8000966 <FPEC_voidFlashWrite+0x22>

	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	371c      	adds	r7, #28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <Get_timer>:
void (*TIM3_CallBack)(void);
void (*TIM4_CallBack)(void);


static TIMER_t * Get_timer( u8 timer)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	switch (timer)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d814      	bhi.n	8000a06 <Get_timer+0x3a>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <Get_timer+0x18>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	080009f9 	.word	0x080009f9
 80009ec:	080009ff 	.word	0x080009ff
 80009f0:	08000a03 	.word	0x08000a03
	{
	case TIM1: return((TIMER_t *)TIM1_BASE);
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <Get_timer+0x48>)
 80009f6:	e008      	b.n	8000a0a <Get_timer+0x3e>
	case TIM2: return((TIMER_t *)TIM2_BASE);
 80009f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009fc:	e005      	b.n	8000a0a <Get_timer+0x3e>
	case TIM3: return((TIMER_t *)TIM3_BASE);
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <Get_timer+0x4c>)
 8000a00:	e003      	b.n	8000a0a <Get_timer+0x3e>
	case TIM4: return((TIMER_t *)TIM4_BASE);
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <Get_timer+0x50>)
 8000a04:	e001      	b.n	8000a0a <Get_timer+0x3e>
	default : return((TIMER_t *)TIM2_BASE);
 8000a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	}
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40012c00 	.word	0x40012c00
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40000800 	.word	0x40000800

08000a20 <TIM2_IRQHandler>:
	tim->CCR[Local_u8Channel-1] = Copy_u16Period * Copy_u16DutyCycle;

}

void TIM2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	TIMER_t* timer = Get_timer(TIM2);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff ffd0 	bl	80009cc <Get_timer>
 8000a2c:	6078      	str	r0, [r7, #4]
	TIM2_CallBack();
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <TIM2_IRQHandler+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4798      	blx	r3
	timer->SR = 0U; 		// reset interrupt
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000050 	.word	0x20000050

08000a48 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	TIMER_t *tim3 = Get_timer(TIM3);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff ffbc 	bl	80009cc <Get_timer>
 8000a54:	6078      	str	r0, [r7, #4]
	TIM3_CallBack();
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <TIM3_IRQHandler+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4798      	blx	r3
	tim3->SR = 0U;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000054 	.word	0x20000054

08000a70 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	TIMER_t *tim4 = Get_timer(TIM4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f7ff ffa8 	bl	80009cc <Get_timer>
 8000a7c:	6078      	str	r0, [r7, #4]
	TIM4_CallBack();
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <TIM4_IRQHandler+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4798      	blx	r3
	tim4->SR = 0U;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000058 	.word	0x20000058

08000a98 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
	u8 Local_u8Counter;
	Local_u8Counter++;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <PARSING_u8AsciToHex>:
u16 Data[100] = {0};
u32 Address= PARSING_BASE_ADDRESS;

//Convert from String to Hex
u8 PARSING_u8AsciToHex (u8 Copy_u8Asci)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8HexNum ;

	if ((Copy_u8Asci>=ASCI_ZERO)&&(Copy_u8Asci<=ASCI_NINE))
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b2f      	cmp	r3, #47	; 0x2f
 8000abc:	d906      	bls.n	8000acc <PARSING_u8AsciToHex+0x1e>
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b39      	cmp	r3, #57	; 0x39
 8000ac2:	d803      	bhi.n	8000acc <PARSING_u8AsciToHex+0x1e>
		Local_u8HexNum = Copy_u8Asci - ASCI_ZERO ;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	3b30      	subs	r3, #48	; 0x30
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e002      	b.n	8000ad2 <PARSING_u8AsciToHex+0x24>
	
	else
		Local_u8HexNum =Copy_u8Asci -ASCI_A_10 ;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	3b37      	subs	r3, #55	; 0x37
 8000ad0:	73fb      	strb	r3, [r7, #15]

	return Local_u8HexNum;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <PARSING_voidWriteData>:

//Write Program to flash
void PARSING_voidWriteData (u8* Copy_u8Data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	u8 Local_u8Data0 ;
	u8 Local_u8Data1 ;
	u8 Local_u8Data2 ;
	u8 Local_u8Data3 ;

	if (Copy_u8Data[8]=='0')
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3308      	adds	r3, #8
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b30      	cmp	r3, #48	; 0x30
 8000af0:	f040 80a2 	bne.w	8000c38 <PARSING_voidWriteData+0x158>
	{
		Local_u8MsbByte = PARSING_u8AsciToHex(Copy_u8Data[1]);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffd7 	bl	8000aae <PARSING_u8AsciToHex>
 8000b00:	4603      	mov	r3, r0
 8000b02:	75bb      	strb	r3, [r7, #22]
		Local_u8LsbByte =PARSING_u8AsciToHex(Copy_u8Data[2]);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3302      	adds	r3, #2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffcf 	bl	8000aae <PARSING_u8AsciToHex>
 8000b10:	4603      	mov	r3, r0
 8000b12:	757b      	strb	r3, [r7, #21]
		//Number of Byte of Data
		Local_u8NumByte =(Local_u8MsbByte<<4)|(Local_u8LsbByte);
 8000b14:	7dbb      	ldrb	r3, [r7, #22]
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	753b      	strb	r3, [r7, #20]

		Local_u8Address0 = PARSING_u8AsciToHex(Copy_u8Data[3]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3303      	adds	r3, #3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ffbf 	bl	8000aae <PARSING_u8AsciToHex>
 8000b30:	4603      	mov	r3, r0
 8000b32:	74fb      	strb	r3, [r7, #19]
		Local_u8Address1 = PARSING_u8AsciToHex(Copy_u8Data[4]);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3304      	adds	r3, #4
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffb7 	bl	8000aae <PARSING_u8AsciToHex>
 8000b40:	4603      	mov	r3, r0
 8000b42:	74bb      	strb	r3, [r7, #18]
		Local_u8Address2 = PARSING_u8AsciToHex(Copy_u8Data[5]);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3305      	adds	r3, #5
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ffaf 	bl	8000aae <PARSING_u8AsciToHex>
 8000b50:	4603      	mov	r3, r0
 8000b52:	747b      	strb	r3, [r7, #17]
		Local_u8Address3 = PARSING_u8AsciToHex(Copy_u8Data[6]);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3306      	adds	r3, #6
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffa7 	bl	8000aae <PARSING_u8AsciToHex>
 8000b60:	4603      	mov	r3, r0
 8000b62:	743b      	strb	r3, [r7, #16]

		Address = Address & 0xFFFF0000;
 8000b64:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <PARSING_voidWriteData+0x160>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	0c1b      	lsrs	r3, r3, #16
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	4a34      	ldr	r2, [pc, #208]	; (8000c40 <PARSING_voidWriteData+0x160>)
 8000b6e:	6013      	str	r3, [r2, #0]
		Local_u8MainAddress = Address | (Local_u8Address3)|(Local_u8Address2<<4)|(Local_u8Address1<<8)|(Local_u8Address0<<12);
 8000b70:	7c3a      	ldrb	r2, [r7, #16]
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <PARSING_voidWriteData+0x160>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	7c7a      	ldrb	r2, [r7, #17]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	7cba      	ldrb	r2, [r7, #18]
 8000b80:	0212      	lsls	r2, r2, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	7cfa      	ldrb	r2, [r7, #19]
 8000b86:	0312      	lsls	r2, r2, #12
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

		for (u8 Local_u8Counter =0 ; Local_u8Counter<Local_u8NumByte/2;Local_u8Counter++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	75fb      	strb	r3, [r7, #23]
 8000b90:	e044      	b.n	8000c1c <PARSING_voidWriteData+0x13c>
		{
			Local_u8Data0 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+9]);
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	3309      	adds	r3, #9
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff85 	bl	8000aae <PARSING_u8AsciToHex>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	72fb      	strb	r3, [r7, #11]
			Local_u8Data1 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+10]);
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	330a      	adds	r3, #10
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff7a 	bl	8000aae <PARSING_u8AsciToHex>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	72bb      	strb	r3, [r7, #10]
			Local_u8Data2 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+11]);
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	330b      	adds	r3, #11
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff6f 	bl	8000aae <PARSING_u8AsciToHex>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	727b      	strb	r3, [r7, #9]
			Local_u8Data3 = PARSING_u8AsciToHex(Copy_u8Data[4*Local_u8Counter+12]);
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	330c      	adds	r3, #12
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff64 	bl	8000aae <PARSING_u8AsciToHex>
 8000be6:	4603      	mov	r3, r0
 8000be8:	723b      	strb	r3, [r7, #8]

			Data[Local_u8Counter] = (Local_u8Data0<<4)|(Local_u8Data1)|(Local_u8Data2<<12)|(Local_u8Data3<<8);
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	7abb      	ldrb	r3, [r7, #10]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	7a7b      	ldrb	r3, [r7, #9]
 8000bfa:	031b      	lsls	r3, r3, #12
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	7a3b      	ldrb	r3, [r7, #8]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	b291      	uxth	r1, r2
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <PARSING_voidWriteData+0x164>)
 8000c12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (u8 Local_u8Counter =0 ; Local_u8Counter<Local_u8NumByte/2;Local_u8Counter++)
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
 8000c1c:	7d3b      	ldrb	r3, [r7, #20]
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	7dfa      	ldrb	r2, [r7, #23]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3b4      	bcc.n	8000b92 <PARSING_voidWriteData+0xb2>
		}
		FPEC_voidFlashWrite(Local_u8MainAddress,Data,Local_u8NumByte/2);
 8000c28:	7d3b      	ldrb	r3, [r7, #20]
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <PARSING_voidWriteData+0x164>)
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f7ff fe86 	bl	8000944 <FPEC_voidFlashWrite>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	2000005c 	.word	0x2000005c

08000c48 <main>:
volatile u16 my_variable __attribute__((section(".my_section"))) = 1; // Initial value



void main (void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0a4      	sub	sp, #144	; 0x90
 8000c4c:	af00      	add	r7, sp, #0
	/*Initialize RCC*/
	RCC_voidInit();
 8000c4e:	f7ff fb4d 	bl	80002ec <RCC_voidInit>

	/*Initialize USART*/
	GPIO_voidDirectionInit();
 8000c52:	f7ff fa8d 	bl	8000170 <GPIO_voidDirectionInit>

	/*Initialize USART*/
	USART_voidInit(USART1);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fd22 	bl	80006a0 <USART_voidInit>

	/*Initialize FPEC*/
	FPEC_voidInit();
 8000c5c:	f7ff fe14 	bl	8000888 <FPEC_voidInit>
	LED_voidLedOn(&Global_LED_tApp1);
	#elif BOOT_TARGET == BOOT_APP2
	LED_voidLedOn(&Global_LED_tApp2);
	#endif*/
	
	u16 Update = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	u16 No_update =1 ;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	u16 Corruption =2 ;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	u8 ok[]={"o"};
 8000c72:	236f      	movs	r3, #111	; 0x6f
 8000c74:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	FPEC_voidFlashWrite(BOOT_u8REQUESTFLAG, &Update, 1);
 8000c78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4875      	ldr	r0, [pc, #468]	; (8000e58 <main+0x210>)
 8000c82:	f7ff fe5f 	bl	8000944 <FPEC_voidFlashWrite>

	// Array of Data
	u8 BOOT_u8RecData[100];

	// Flag to Write
	u8 BOOT_u8FinRecFlag = 0 ;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	//index of Data
	u32 BOOT_u32RecCounter =0 ;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	//index of Erase pages
	u32 BOOT_u32EraseCounter =0 ;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	//Check Sum
	u8 Check_s32Sum = 0 ;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	u32 Check_s32Counter = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
	u8 BOOT_u8Digit0 ;
	u8 BOOT_u8Digit1 ;
	u8 BOOT_u8Data ;
	u8 Check_sum_Validation ;
	u8 flashing_var=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	// flag to start and end Erase operation
	u32 BOOT_u32EraseFlag =1 ;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	67bb      	str	r3, [r7, #120]	; 0x78
	/*******************************************************************************************/
	/*******************************************************************************************/
	/********************************BOOTLOADER**************************************************/
	if (flashing_var==0 )
 8000cac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f040 80cb 	bne.w	8000e4c <main+0x204>
	{
// to get the record
		while (BOOT_u8FinRecFlag ==0 )
 8000cb6:	e0c4      	b.n	8000e42 <main+0x1fa>
		{

			BOOT_u8RecData[BOOT_u32RecCounter]=USART_u8ReceiveChar(USART1);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fd47 	bl	800074c <USART_u8ReceiveChar>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	1d3a      	adds	r2, r7, #4
 8000cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]

			/**************************************************************************************/
			if (BOOT_u8RecData[BOOT_u32RecCounter]=='\n')
 8000cce:	1d3a      	adds	r2, r7, #4
 8000cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b0a      	cmp	r3, #10
 8000cda:	f040 80ad 	bne.w	8000e38 <main+0x1f0>
			{
				/****************************Erase APPLICATION 1 **************************************/
				if (BOOT_u32EraseFlag==1)
 8000cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d114      	bne.n	8000d0e <main+0xc6>
				{

					for (BOOT_u32EraseCounter=20 ;BOOT_u32EraseCounter<60 ;BOOT_u32EraseCounter++)
 8000ce4:	2314      	movs	r3, #20
 8000ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cea:	e00a      	b.n	8000d02 <main+0xba>
					{
						FPEC_voidFlashPageErase(BOOT_u32EraseCounter);
 8000cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fde4 	bl	80008c0 <FPEC_voidFlashPageErase>
					for (BOOT_u32EraseCounter=20 ;BOOT_u32EraseCounter<60 ;BOOT_u32EraseCounter++)
 8000cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d06:	2b3b      	cmp	r3, #59	; 0x3b
 8000d08:	d9f0      	bls.n	8000cec <main+0xa4>
					}
					BOOT_u32EraseFlag = 0 ;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	67bb      	str	r3, [r7, #120]	; 0x78
				}

				Check_s32Sum =0 ;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				Check_s32Counter = 1 ;
 8000d14:	2301      	movs	r3, #1
 8000d16:	67fb      	str	r3, [r7, #124]	; 0x7c

				while(Check_s32Counter<BOOT_u32RecCounter-2)
 8000d18:	e029      	b.n	8000d6e <main+0x126>
				{
					BOOT_u8Digit0=PARSING_u8AsciToHex(BOOT_u8RecData[Check_s32Counter]);
 8000d1a:	1d3a      	adds	r2, r7, #4
 8000d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fec3 	bl	8000aae <PARSING_u8AsciToHex>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

					BOOT_u8Digit1 =PARSING_u8AsciToHex(BOOT_u8RecData[Check_s32Counter+1]);
 8000d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d30:	3301      	adds	r3, #1
 8000d32:	3390      	adds	r3, #144	; 0x90
 8000d34:	443b      	add	r3, r7
 8000d36:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff feb7 	bl	8000aae <PARSING_u8AsciToHex>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

					BOOT_u8Data = (BOOT_u8Digit0<<4)|(BOOT_u8Digit1);
 8000d46:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

					Check_s32Sum =Check_s32Sum + BOOT_u8Data ;
 8000d5a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000d5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000d62:	4413      	add	r3, r2
 8000d64:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

					Check_s32Counter = Check_s32Counter+2 ;
 8000d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
				while(Check_s32Counter<BOOT_u32RecCounter-2)
 8000d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d72:	3b02      	subs	r3, #2
 8000d74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3cf      	bcc.n	8000d1a <main+0xd2>

				}
				Check_s32Sum =~(Check_s32Sum -1) ;
 8000d7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000d7e:	425b      	negs	r3, r3
 8000d80:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

				// Validation
				BOOT_u8Digit0=PARSING_u8AsciToHex(BOOT_u8RecData[BOOT_u32RecCounter-2]);
 8000d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d88:	3b02      	subs	r3, #2
 8000d8a:	3390      	adds	r3, #144	; 0x90
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fe8b 	bl	8000aae <PARSING_u8AsciToHex>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

				BOOT_u8Digit1 =PARSING_u8AsciToHex(BOOT_u8RecData[BOOT_u32RecCounter-1]);
 8000d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000da2:	3b01      	subs	r3, #1
 8000da4:	3390      	adds	r3, #144	; 0x90
 8000da6:	443b      	add	r3, r7
 8000da8:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe7e 	bl	8000aae <PARSING_u8AsciToHex>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

				Check_sum_Validation = (BOOT_u8Digit0<<4)|(BOOT_u8Digit1);
 8000db8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74


				if (Check_s32Sum !=Check_sum_Validation)
 8000dcc:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000dd0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d00e      	beq.n	8000df6 <main+0x1ae>
				{
					//Data Corruption
					GPIO_u8SetPinValue(GPIO_PORTA,GPIO_PIN_4, GPIO_PIN_HIGH);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2104      	movs	r1, #4
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff f9f5 	bl	80001cc <GPIO_u8SetPinValue>
					FPEC_voidFlashPageErase(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f7ff fd6c 	bl	80008c0 <FPEC_voidFlashPageErase>
					FPEC_voidFlashWrite(BOOT_u8REQUESTFLAG, &Corruption, 1);
 8000de8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4819      	ldr	r0, [pc, #100]	; (8000e58 <main+0x210>)
 8000df2:	f7ff fda7 	bl	8000944 <FPEC_voidFlashWrite>
					//IWDG_voidReset(100);

				}
				/**************************************************************************************/
				/*********************************Write Operation *************************************/
				PARSING_voidWriteData(BOOT_u8RecData);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe71 	bl	8000ae0 <PARSING_voidWriteData>
				USART_voidTransmitSync(USART1,ok);
 8000dfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e02:	4619      	mov	r1, r3
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fc73 	bl	80006f0 <USART_voidTransmitSync>
				BOOT_u32RecCounter =0 ;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				flashing_var = 1 ;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				//READ_REQUEST_FLAG = 1 ;
				if (BOOT_u8RecData[8]=='1')
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	2b31      	cmp	r3, #49	; 0x31
 8000e1a:	d112      	bne.n	8000e42 <main+0x1fa>
				{
					FPEC_voidFlashPageErase(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f7ff fd4f 	bl	80008c0 <FPEC_voidFlashPageErase>
					FPEC_voidFlashWrite(BOOT_u8REQUESTFLAG, &No_update, 1);
 8000e22:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8000e26:	2201      	movs	r2, #1
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <main+0x210>)
 8000e2c:	f7ff fd8a 	bl	8000944 <FPEC_voidFlashWrite>
					//IWDG_voidReset(100);
					BOOT_u8FinRecFlag=1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000e36:	e004      	b.n	8000e42 <main+0x1fa>


			}
			else
			{
				BOOT_u32RecCounter++;
 8000e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		while (BOOT_u8FinRecFlag ==0 )
 8000e42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f43f af36 	beq.w	8000cb8 <main+0x70>
	/*******************************************************************************************/
	/*******************************************************************************************/

	/********************************APPLICATION1************************************************/

		APP1();
 8000e4c:	f000 f806 	bl	8000e5c <APP1>
		APP2();
	}
*/


}
 8000e50:	bf00      	nop
 8000e52:	3790      	adds	r7, #144	; 0x90
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	080028c0 	.word	0x080028c0

08000e5c <APP1>:


/** to set the start address and allocate the vector table ****/

void APP1(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

	SCB_VTOR =0x08005000;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <APP1+0x1c>)
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <APP1+0x20>)
 8000e64:	601a      	str	r2, [r3, #0]
	AddrAPP1 =*(Application*)(0x08005004);
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <APP1+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <APP1+0x28>)
 8000e6c:	6013      	str	r3, [r2, #0]
	AddrAPP1();
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <APP1+0x28>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4798      	blx	r3

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	e000ed08 	.word	0xe000ed08
 8000e7c:	08005000 	.word	0x08005000
 8000e80:	08005004 	.word	0x08005004
 8000e84:	20000124 	.word	0x20000124

08000e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eb6:	f000 f811 	bl	8000edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fec5 	bl	8000c48 <main>

08000ebe <LoopForever>:

LoopForever:
  b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   r0, =_estack
 8000ec0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ecc:	080028d8 	.word	0x080028d8
  ldr r2, =_sbss
 8000ed0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ed4:	20000128 	.word	0x20000128

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <__libc_init_array>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	2600      	movs	r6, #0
 8000ee0:	4d0c      	ldr	r5, [pc, #48]	; (8000f14 <__libc_init_array+0x38>)
 8000ee2:	4c0d      	ldr	r4, [pc, #52]	; (8000f18 <__libc_init_array+0x3c>)
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	10a4      	asrs	r4, r4, #2
 8000ee8:	42a6      	cmp	r6, r4
 8000eea:	d109      	bne.n	8000f00 <__libc_init_array+0x24>
 8000eec:	f000 f81a 	bl	8000f24 <_init>
 8000ef0:	2600      	movs	r6, #0
 8000ef2:	4d0a      	ldr	r5, [pc, #40]	; (8000f1c <__libc_init_array+0x40>)
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <__libc_init_array+0x44>)
 8000ef6:	1b64      	subs	r4, r4, r5
 8000ef8:	10a4      	asrs	r4, r4, #2
 8000efa:	42a6      	cmp	r6, r4
 8000efc:	d105      	bne.n	8000f0a <__libc_init_array+0x2e>
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f04:	4798      	blx	r3
 8000f06:	3601      	adds	r6, #1
 8000f08:	e7ee      	b.n	8000ee8 <__libc_init_array+0xc>
 8000f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0e:	4798      	blx	r3
 8000f10:	3601      	adds	r6, #1
 8000f12:	e7f2      	b.n	8000efa <__libc_init_array+0x1e>
 8000f14:	080028d0 	.word	0x080028d0
 8000f18:	080028d0 	.word	0x080028d0
 8000f1c:	080028d0 	.word	0x080028d0
 8000f20:	080028d4 	.word	0x080028d4

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
