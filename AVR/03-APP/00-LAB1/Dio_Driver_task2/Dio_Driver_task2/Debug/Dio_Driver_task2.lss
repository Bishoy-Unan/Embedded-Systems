
Dio_Driver_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000040b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000419  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000123c  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e4  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ab  00000000  00000000  00001d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000202  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000890  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000035a  0000035a  000003ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_enumSetPinConfig 000001e6  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_enumGetPinVal 00000084  00000252  00000252  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000006e  000002d6  000002d6  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000362  00000362  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000364  00000364  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000366  00000366  000003da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000344  00000344  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000035e  0000035e  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
   8:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
   c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  10:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  14:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  18:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  1c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  20:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  24:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  28:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  2c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  30:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  34:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  38:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  3c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  40:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  44:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  48:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  4c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  50:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  64:	0c 94 a2 01 	jmp	0x344	; 0x344 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000035a <__bad_interrupt>:
 35a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.DIO_enumSetPinConfig:

0000006c <DIO_enumSetPinConfig>:
	
	
	
	
	
}/*set bin value function*/
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_enumSetPinConfig+0x6>
  70:	e0 c0       	rjmp	.+448    	; 0x232 <DIO_enumSetPinConfig+0x1c6>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_enumSetPinConfig+0xc>
  76:	df c0       	rjmp	.+446    	; 0x236 <DIO_enumSetPinConfig+0x1ca>
  78:	43 30       	cpi	r20, 0x03	; 3
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_enumSetPinConfig+0x12>
  7c:	de c0       	rjmp	.+444    	; 0x23a <DIO_enumSetPinConfig+0x1ce>
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	e1 f1       	breq	.+120    	; 0xfa <DIO_enumSetPinConfig+0x8e>
  82:	38 f0       	brcs	.+14     	; 0x92 <DIO_enumSetPinConfig+0x26>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	09 f4       	brne	.+2      	; 0x8a <DIO_enumSetPinConfig+0x1e>
  88:	6c c0       	rjmp	.+216    	; 0x162 <DIO_enumSetPinConfig+0xf6>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_enumSetPinConfig+0x24>
  8e:	9d c0       	rjmp	.+314    	; 0x1ca <DIO_enumSetPinConfig+0x15e>
  90:	d6 c0       	rjmp	.+428    	; 0x23e <DIO_enumSetPinConfig+0x1d2>
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	81 f0       	breq	.+32     	; 0xb6 <DIO_enumSetPinConfig+0x4a>
  96:	18 f0       	brcs	.+6      	; 0x9e <DIO_enumSetPinConfig+0x32>
  98:	42 30       	cpi	r20, 0x02	; 2
  9a:	f1 f0       	breq	.+60     	; 0xd8 <DIO_enumSetPinConfig+0x6c>
  9c:	d2 c0       	rjmp	.+420    	; 0x242 <DIO_enumSetPinConfig+0x1d6>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_enumSetPinConfig+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_enumSetPinConfig+0x3a>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_enumSetPinConfig+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_enumSetPinConfig+0x52>
  c6:	98 2f       	mov	r25, r24
  c8:	90 95       	com	r25
  ca:	92 23       	and	r25, r18
  cc:	9a bb       	out	0x1a, r25	; 26
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	89 2b       	or	r24, r25
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_enumSetPinConfig+0x78>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_enumSetPinConfig+0x74>
  e8:	80 95       	com	r24
  ea:	92 2f       	mov	r25, r18
  ec:	98 23       	and	r25, r24
  ee:	9a bb       	out	0x1a, r25	; 26
  f0:	9b b3       	in	r25, 0x1b	; 27
  f2:	89 23       	and	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	81 f0       	breq	.+32     	; 0x11e <DIO_enumSetPinConfig+0xb2>
  fe:	18 f0       	brcs	.+6      	; 0x106 <DIO_enumSetPinConfig+0x9a>
 100:	42 30       	cpi	r20, 0x02	; 2
 102:	f1 f0       	breq	.+60     	; 0x140 <DIO_enumSetPinConfig+0xd4>
 104:	a0 c0       	rjmp	.+320    	; 0x246 <DIO_enumSetPinConfig+0x1da>
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_enumSetPinConfig+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_enumSetPinConfig+0xa2>
 116:	82 2b       	or	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
 11e:	27 b3       	in	r18, 0x17	; 23
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_enumSetPinConfig+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_enumSetPinConfig+0xba>
 12e:	98 2f       	mov	r25, r24
 130:	90 95       	com	r25
 132:	92 23       	and	r25, r18
 134:	97 bb       	out	0x17, r25	; 23
 136:	98 b3       	in	r25, 0x18	; 24
 138:	89 2b       	or	r24, r25
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enumSetPinConfig+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enumSetPinConfig+0xdc>
 150:	80 95       	com	r24
 152:	92 2f       	mov	r25, r18
 154:	98 23       	and	r25, r24
 156:	97 bb       	out	0x17, r25	; 23
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	89 23       	and	r24, r25
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	81 f0       	breq	.+32     	; 0x186 <DIO_enumSetPinConfig+0x11a>
 166:	18 f0       	brcs	.+6      	; 0x16e <DIO_enumSetPinConfig+0x102>
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	f1 f0       	breq	.+60     	; 0x1a8 <DIO_enumSetPinConfig+0x13c>
 16c:	6e c0       	rjmp	.+220    	; 0x24a <DIO_enumSetPinConfig+0x1de>
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_enumSetPinConfig+0x10e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_enumSetPinConfig+0x10a>
 17e:	82 2b       	or	r24, r18
 180:	84 bb       	out	0x14, r24	; 20
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_enumSetPinConfig+0x126>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_enumSetPinConfig+0x122>
 196:	98 2f       	mov	r25, r24
 198:	90 95       	com	r25
 19a:	92 23       	and	r25, r18
 19c:	94 bb       	out	0x14, r25	; 20
 19e:	95 b3       	in	r25, 0x15	; 21
 1a0:	89 2b       	or	r24, r25
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_enumSetPinConfig+0x148>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_enumSetPinConfig+0x144>
 1b8:	80 95       	com	r24
 1ba:	92 2f       	mov	r25, r18
 1bc:	98 23       	and	r25, r24
 1be:	94 bb       	out	0x14, r25	; 20
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	89 23       	and	r24, r25
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	81 f0       	breq	.+32     	; 0x1ee <DIO_enumSetPinConfig+0x182>
 1ce:	18 f0       	brcs	.+6      	; 0x1d6 <DIO_enumSetPinConfig+0x16a>
 1d0:	42 30       	cpi	r20, 0x02	; 2
 1d2:	f1 f0       	breq	.+60     	; 0x210 <DIO_enumSetPinConfig+0x1a4>
 1d4:	3c c0       	rjmp	.+120    	; 0x24e <DIO_enumSetPinConfig+0x1e2>
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_enumSetPinConfig+0x176>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_enumSetPinConfig+0x172>
 1e6:	82 2b       	or	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	21 b3       	in	r18, 0x11	; 17
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enumSetPinConfig+0x18e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_enumSetPinConfig+0x18a>
 1fe:	98 2f       	mov	r25, r24
 200:	90 95       	com	r25
 202:	92 23       	and	r25, r18
 204:	91 bb       	out	0x11, r25	; 17
 206:	92 b3       	in	r25, 0x12	; 18
 208:	89 2b       	or	r24, r25
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	21 b3       	in	r18, 0x11	; 17
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_enumSetPinConfig+0x1b0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_enumSetPinConfig+0x1ac>
 220:	80 95       	com	r24
 222:	92 2f       	mov	r25, r18
 224:	98 23       	and	r25, r24
 226:	91 bb       	out	0x11, r25	; 17
 228:	92 b3       	in	r25, 0x12	; 18
 22a:	89 23       	and	r24, r25
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	08 95       	ret
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	08 95       	ret
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	08 95       	ret
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret

Disassembly of section .text.DIO_enumGetPinVal:

00000252 <DIO_enumGetPinVal>:
DIO_enumError_t DIO_enumGetPinVal(DIO_enumPorts_t Copy_enumPortNum, DIO_enumPins_t Copy_enumPinNum , u8 * Pu8PinVal)
{
	
	DIO_enumError_t Ret_enumERRORStatus = DIO_enumOK  ; 
	
	if( (Copy_enumPortNum > DIO_enumPORTD) || (Copy_enumPortNum < DIO_enumPORTA))
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	d0 f5       	brcc	.+116    	; 0x2ca <DIO_enumGetPinVal+0x78>
		{ 
			Ret_enumERRORStatus = DIO_enumINVALID_PORT ;
		}
	else if( (Copy_enumPinNum > DIO_enumPIN7) || (Copy_enumPinNum < DIO_enumPIN0))
 256:	68 30       	cpi	r22, 0x08	; 8
 258:	d0 f5       	brcc	.+116    	; 0x2ce <DIO_enumGetPinVal+0x7c>
			Ret_enumERRORStatus = DIO_enumINVALID_PIN ;
		}	
	
	else
		{
			switch(Copy_enumPortNum)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 f0       	breq	.+36     	; 0x282 <DIO_enumGetPinVal+0x30>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_enumGetPinVal+0x18>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	d9 f0       	breq	.+54     	; 0x29a <DIO_enumGetPinVal+0x48>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	29 f1       	breq	.+74     	; 0x2b2 <DIO_enumGetPinVal+0x60>
 268:	34 c0       	rjmp	.+104    	; 0x2d2 <DIO_enumGetPinVal+0x80>
			{
				case DIO_enumPORTA:
									*Pu8PinVal = GET_BIT(PINA,Copy_enumPinNum);
 26a:	89 b3       	in	r24, 0x19	; 25
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_enumGetPinVal+0x22>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_enumGetPinVal+0x1e>
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	fa 01       	movw	r30, r20
 27c:	80 83       	st	Z, r24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 27e:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_enumPortNum)
			{
				case DIO_enumPORTA:
									*Pu8PinVal = GET_BIT(PINA,Copy_enumPinNum);
					
				break;
 280:	08 95       	ret
				case DIO_enumPORTB:
									*Pu8PinVal = GET_BIT(PINB,Copy_enumPinNum);
 282:	86 b3       	in	r24, 0x16	; 22
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_enumGetPinVal+0x3a>
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_enumGetPinVal+0x36>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 296:	80 e0       	ldi	r24, 0x00	; 0
					
				break;
				case DIO_enumPORTB:
									*Pu8PinVal = GET_BIT(PINB,Copy_enumPinNum);
										
				break ;
 298:	08 95       	ret
				case DIO_enumPORTC:
									*Pu8PinVal = GET_BIT(PINC,Copy_enumPinNum);
 29a:	83 b3       	in	r24, 0x13	; 19
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_enumGetPinVal+0x52>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_enumGetPinVal+0x4e>
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	fa 01       	movw	r30, r20
 2ac:	80 83       	st	Z, r24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
										
				break ;
				case DIO_enumPORTC:
									*Pu8PinVal = GET_BIT(PINC,Copy_enumPinNum);
										
				break;
 2b0:	08 95       	ret
				case DIO_enumPORTD:
									*Pu8PinVal = GET_BIT(PIND,Copy_enumPinNum);
 2b2:	80 b3       	in	r24, 0x10	; 16
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enumGetPinVal+0x6a>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enumGetPinVal+0x66>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	fa 01       	movw	r30, r20
 2c4:	80 83       	st	Z, r24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
										
				break;
				case DIO_enumPORTD:
									*Pu8PinVal = GET_BIT(PIND,Copy_enumPinNum);
										
				break;
 2c8:	08 95       	ret
	
	DIO_enumError_t Ret_enumERRORStatus = DIO_enumOK  ; 
	
	if( (Copy_enumPortNum > DIO_enumPORTD) || (Copy_enumPortNum < DIO_enumPORTA))
		{ 
			Ret_enumERRORStatus = DIO_enumINVALID_PORT ;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	08 95       	ret
		}
	else if( (Copy_enumPinNum > DIO_enumPIN7) || (Copy_enumPinNum < DIO_enumPIN0))
		{
			Ret_enumERRORStatus = DIO_enumINVALID_PIN ;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	08 95       	ret
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
		}//els
	return Ret_enumERRORStatus ;
	
	
}/*get bin value function*/
 2d4:	08 95       	ret

Disassembly of section .text.main:

000002d6 <main>:




int main(void)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	0f 92       	push	r0
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Button = 1 ;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumConfig_t LED4Config = DIO_enumOUTPUT;
	DIO_enumConfig_t SwitchConfig = DIO_enumInputPullUp;
	
	
	
	DIO_enumSetPinConfig(LedPort,LED1Pin,LED1Config);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	DIO_enumSetPinConfig(LedPort,LED2Pin,LED2Config);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	DIO_enumSetPinConfig(LedPort,LED3Pin,LED3Config);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	DIO_enumSetPinConfig(LedPort,LED4Pin,LED4Config);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	DIO_enumSetPinConfig(SwitchPort,SwitchPin,SwitchConfig);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	/*enable pull up resistor at pin 4 port A*/
	//PORTA = 0b00010000;
	while(1)
	{
		/*because of avr by default is pull up resistor so when the switch pressed we read zero on p4*/
		 DIO_enumGetPinVal(SwitchPort,SwitchPin,&Local_u8Button);
 316:	ae 01       	movw	r20, r28
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 29 01 	call	0x252	; 0x252 <DIO_enumGetPinVal>
		if(Local_u8Button==0)
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	81 11       	cpse	r24, r1
 328:	f6 cf       	rjmp	.-20     	; 0x316 <main+0x40>
		{
			PORTA +=1;
 32a:	8b b3       	in	r24, 0x1b	; 27
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	2f e3       	ldi	r18, 0x3F	; 63
 332:	8d e0       	ldi	r24, 0x0D	; 13
 334:	93 e0       	ldi	r25, 0x03	; 3
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x60>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x6a>
 340:	00 00       	nop
 342:	e9 cf       	rjmp	.-46     	; 0x316 <main+0x40>

Disassembly of section .text.__dummy_fini:

00000362 <_fini>:
 362:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000364 <__funcs_on_exit>:
 364:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000366 <__simulator_exit>:
 366:	08 95       	ret

Disassembly of section .text.exit:

00000344 <exit>:
 344:	ec 01       	movw	r28, r24
 346:	0e 94 b2 01 	call	0x364	; 0x364 <__funcs_on_exit>
 34a:	0e 94 b1 01 	call	0x362	; 0x362 <_fini>
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 b3 01 	call	0x366	; 0x366 <__simulator_exit>
 354:	ce 01       	movw	r24, r28
 356:	0e 94 af 01 	call	0x35e	; 0x35e <_Exit>

Disassembly of section .text._Exit:

0000035e <_Exit>:
 35e:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
