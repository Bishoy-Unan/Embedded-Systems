
AVR_Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000fa6  0000105a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000c4  00000000  00000000  00001089  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  0000114d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003237  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9f  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018af  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000724  00000000  00000000  000068dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002387  00000000  00000000  000072fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00009682  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000f92  00000f92  00001046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009824  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.func1   00000032  00000ea8  00000ea8  00000f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001a  00000efc  00000efc  00000fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.toggle   00000001  0080007c  0080007c  0000105a  2**0
                  ALLOC
 17 .text.LED_enumdInit 0000010c  000006aa  000006aa  0000075e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LED_enuSetLedState 0000006a  00000b1a  00000b1a  00000bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .data.LEDS    00000006  00800060  00000fa0  00001054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .text.DIO_enumSetCFG 000003a8  000000b4  000000b4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_1 00000054  00000be2  00000be2  00000c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_2 00000054  00000c36  00000c36  00000cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000054  00000c8a  00000c8a  00000d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.ExtInt2_AddCallBack 00000002  00800066  00800066  0000105a  2**0
                  ALLOC
 25 .bss.ExtInt1_AddCallBack 00000002  00800068  00800068  0000105a  2**0
                  ALLOC
 26 .bss.ExtInt0_AddCallBack 00000002  0080006a  0080006a  0000105a  2**0
                  ALLOC
 27 .text.Timer2_enumSetTimer_OV 0000024e  0000045c  0000045c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TIMER2_enuSetOVFINT 00000014  00000f2c  00000f2c  00000fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_11 0000006c  00000a42  00000a42  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_10 0000004e  00000cde  00000cde  00000d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_9 00000070  000009d2  000009d2  00000a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_7 0000004e  00000d2c  00000d2c  00000de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_8 0000004e  00000d7a  00000d7a  00000e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_6 0000004e  00000dc8  00000dc8  00000e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_5 0000006c  00000aae  00000aae  00000b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_4 0000004e  00000e16  00000e16  00000eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss.Timer2_u8LoadVal 00000001  0080007d  0080007d  0000105a  2**0
                  ALLOC
 38 .bss.Timer2_u8Counter 00000001  0080007e  0080007e  0000105a  2**0
                  ALLOC
 39 .bss.Timer2_u8OVCounter 00000001  0080007f  0080007f  0000105a  2**0
                  ALLOC
 40 .bss.Timer1_u8LoadVal 00000001  00800080  00800080  0000105a  2**0
                  ALLOC
 41 .bss.Timer1_u8Counter 00000001  00800081  00800081  0000105a  2**0
                  ALLOC
 42 .bss.Timer1_u8OVCounter 00000001  00800082  00800082  0000105a  2**0
                  ALLOC
 43 .bss.Timer0_u8LoadVal 00000001  00800083  00800083  0000105a  2**0
                  ALLOC
 44 .bss.Timer0_u8Counter 00000001  00800084  00800084  0000105a  2**0
                  ALLOC
 45 .bss.Timer0_u8OVCounter 00000001  00800085  00800085  0000105a  2**0
                  ALLOC
 46 .bss.Timer2_AddCTC_CallBack 00000002  0080006c  0080006c  0000105a  2**0
                  ALLOC
 47 .bss.Timer2_AddOVF_CallBack 00000002  0080006e  0080006e  0000105a  2**0
                  ALLOC
 48 .bss.Timer1_Add_INP_CAP_CallBack 00000002  00800070  00800070  0000105a  2**0
                  ALLOC
 49 .bss.Timer1_AddCTC_CHB_CallBack 00000002  00800072  00800072  0000105a  2**0
                  ALLOC
 50 .bss.Timer1_AddCTC_CHA_CallBack 00000002  00800074  00800074  0000105a  2**0
                  ALLOC
 51 .bss.Timer1_AddOVF_CallBack 00000002  00800076  00800076  0000105a  2**0
                  ALLOC
 52 .bss.Timer0_AddCTC_CallBack 00000002  00800078  00800078  0000105a  2**0
                  ALLOC
 53 .bss.Timer0_AddOVF_CallBack 00000002  0080007a  0080007a  0000105a  2**0
                  ALLOC
 54 .text         0000000e  00000f40  00000f40  00000ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text         000000ce  0000088a  0000088a  0000093e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text         0000005e  00000b84  00000b84  00000c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text         0000007a  00000958  00000958  00000a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text         0000000c  00000f78  00000f78  0000102c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text         00000006  00000f8c  00000f8c  00001040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text         0000000e  00000f4e  00000f4e  00001002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text         0000000e  00000f5c  00000f5c  00001010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text         00000022  00000eda  00000eda  00000f8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text         00000044  00000e64  00000e64  00000f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text         0000000e  00000f6a  00000f6a  0000101e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text         00000008  00000f84  00000f84  00001038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text         000000d4  000007b6  000007b6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_fini 00000002  00000f9a  00000f9a  0000104e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__dummy_funcs_on_exit 00000002  00000f9c  00000f9c  00001050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_simulator_exit 00000002  00000f9e  00000f9e  00001052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.exit    00000016  00000f16  00000f16  00000fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text._Exit   00000004  00000f96  00000f96  0000104a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_1>
   8:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_2>
   c:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__vector_3>
  10:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_4>
  14:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_5>
  18:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_6>
  1c:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_7>
  20:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_8>
  24:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_9>
  28:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_10>
  2c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_11>
  30:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  34:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  38:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  3c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  40:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  44:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  48:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  4c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>
  50:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 66       	ori	r16, 0x60	; 96
  58:	00 0f       	add	r16, r16
  5a:	a0 00       	.word	0x00a0	; ????
  5c:	66 00       	.word	0x0066	; ????
  5e:	86 80       	ldd	r8, Z+6	; 0x06

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 7e 07 	call	0xefc	; 0xefc <main>
  ac:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

00000f92 <__bad_interrupt>:
 f92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.func1:

00000ea8 <func1>:
	);
	
	}
	

}
 ea8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <toggle>
 eac:	81 11       	cpse	r24, r1
 eae:	0a c0       	rjmp	.+20     	; 0xec4 <func1+0x1c>
 eb0:	60 e0       	ldi	r22, 0x00	; 0
 eb2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_enuSetLedState>
 eb6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <toggle>
 eba:	81 e0       	ldi	r24, 0x01	; 1
 ebc:	89 27       	eor	r24, r25
 ebe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <toggle>
 ec2:	08 95       	ret
 ec4:	61 e0       	ldi	r22, 0x01	; 1
 ec6:	80 e0       	ldi	r24, 0x00	; 0
 ec8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_enuSetLedState>
 ecc:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <toggle>
 ed0:	81 e0       	ldi	r24, 0x01	; 1
 ed2:	89 27       	eor	r24, r25
 ed4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <toggle>
 ed8:	08 95       	ret

Disassembly of section .text.main:

00000efc <main>:



int main(void)
{
	TIMER2_enuSetOVFINT(func1);
 efc:	84 e5       	ldi	r24, 0x54	; 84
 efe:	97 e0       	ldi	r25, 0x07	; 7
 f00:	0e 94 96 07 	call	0xf2c	; 0xf2c <TIMER2_enuSetOVFINT>

	LED_enumdInit();
 f04:	0e 94 55 03 	call	0x6aa	; 0x6aa <LED_enumdInit>

	Timer2_enumSetTimer_OV(1000000);
 f08:	60 e4       	ldi	r22, 0x40	; 64
 f0a:	72 e4       	ldi	r23, 0x42	; 66
 f0c:	8f e0       	ldi	r24, 0x0F	; 15
 f0e:	90 e0       	ldi	r25, 0x00	; 0
 f10:	0e 94 2e 02 	call	0x45c	; 0x45c <Timer2_enumSetTimer_OV>
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <main+0x18>

Disassembly of section .text.LED_enumdInit:

000006aa <LED_enumdInit>:
 *@brief  : Function to Configure the  LEDS Pins to be active high or active low .
 *@param  : Address to struct in which i configure port num and pin num and pin configration.
 *@return : Error State                                               
 */
LED_enumErrorState LED_enumdInit(void)
{
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <LED_enumdInit+0xc>
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <LED_enumdInit+0xe>
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <LED_enumdInit+0x10>
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
	
	u8 LOCAL_u8Iterator = 0 ;
	
	PPRT_strCFG_t LOCAL_strCurrentLed[NumOfLeds];

	for( LOCAL_u8Iterator = 0 ; LOCAL_u8Iterator < NumOfLeds ; LOCAL_u8Iterator++)
 6be:	f1 2c       	mov	r15, r1
 *@param  : Address to struct in which i configure port num and pin num and pin configration.
 *@return : Error State                                               
 */
LED_enumErrorState LED_enumdInit(void)
{
	LED_enumErrorState LOCAL_enumReturnStatus = LED_enumOK ;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
	
	u8 LOCAL_u8Iterator = 0 ;
	
	PPRT_strCFG_t LOCAL_strCurrentLed[NumOfLeds];

	for( LOCAL_u8Iterator = 0 ; LOCAL_u8Iterator < NumOfLeds ; LOCAL_u8Iterator++)
 6c2:	69 c0       	rjmp	.+210    	; 0x796 <LED_enumdInit+0xec>
	{
		LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strPORT = LEDS[LOCAL_u8Iterator].LED_strPORT ;
 6c4:	8f 2d       	mov	r24, r15
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	fc 01       	movw	r30, r24
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	e8 0f       	add	r30, r24
 6d0:	f9 1f       	adc	r31, r25
 6d2:	df 01       	movw	r26, r30
 6d4:	a0 5a       	subi	r26, 0xA0	; 160
 6d6:	bf 4f       	sbci	r27, 0xFF	; 255
 6d8:	2c 91       	ld	r18, X
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	4c 0f       	add	r20, r28
 6e0:	5d 1f       	adc	r21, r29
 6e2:	e4 0f       	add	r30, r20
 6e4:	f5 1f       	adc	r31, r21
 6e6:	20 83       	st	Z, r18
		
		LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strPIN = LEDS[LOCAL_u8Iterator].LED_strPIN ;
 6e8:	11 96       	adiw	r26, 0x01	; 1
 6ea:	2c 91       	ld	r18, X
 6ec:	11 97       	sbiw	r26, 0x01	; 1
 6ee:	21 83       	std	Z+1, r18	; 0x01
		
		switch(LEDS[LOCAL_u8Iterator].LED_strSTATE){
 6f0:	12 96       	adiw	r26, 0x02	; 2
 6f2:	2c 91       	ld	r18, X
 6f4:	21 30       	cpi	r18, 0x01	; 1
 6f6:	99 f0       	breq	.+38     	; 0x71e <LED_enumdInit+0x74>
 6f8:	28 f0       	brcs	.+10     	; 0x704 <LED_enumdInit+0x5a>
 6fa:	22 30       	cpi	r18, 0x02	; 2
 6fc:	f1 f0       	breq	.+60     	; 0x73a <LED_enumdInit+0x90>
 6fe:	23 30       	cpi	r18, 0x03	; 3
 700:	51 f1       	breq	.+84     	; 0x756 <LED_enumdInit+0xac>
 702:	35 c0       	rjmp	.+106    	; 0x76e <LED_enumdInit+0xc4>
										case LED_enumActiveHigh_ON:
												LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strCFGType = DIO_enumOUTPUTHIGH ;		
 704:	fc 01       	movw	r30, r24
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	e8 0f       	add	r30, r24
 70c:	f9 1f       	adc	r31, r25
 70e:	21 e0       	ldi	r18, 0x01	; 1
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	2c 0f       	add	r18, r28
 714:	3d 1f       	adc	r19, r29
 716:	e2 0f       	add	r30, r18
 718:	f3 1f       	adc	r31, r19
 71a:	12 82       	std	Z+2, r1	; 0x02
										break;
 71c:	28 c0       	rjmp	.+80     	; 0x76e <LED_enumdInit+0xc4>
										case LED_enumActiveHigh_OFF:
												LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strCFGType = DIO_enumOUTPUTLOW ;			
 71e:	fc 01       	movw	r30, r24
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	e8 0f       	add	r30, r24
 726:	f9 1f       	adc	r31, r25
 728:	41 e0       	ldi	r20, 0x01	; 1
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	4c 0f       	add	r20, r28
 72e:	5d 1f       	adc	r21, r29
 730:	e4 0f       	add	r30, r20
 732:	f5 1f       	adc	r31, r21
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	22 83       	std	Z+2, r18	; 0x02
										break;
 738:	1a c0       	rjmp	.+52     	; 0x76e <LED_enumdInit+0xc4>
										case LED_enumActiveLow_ON:
												LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strCFGType = DIO_enumOUTPUTLOW ;
 73a:	fc 01       	movw	r30, r24
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	e8 0f       	add	r30, r24
 742:	f9 1f       	adc	r31, r25
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	2c 0f       	add	r18, r28
 74a:	3d 1f       	adc	r19, r29
 74c:	e2 0f       	add	r30, r18
 74e:	f3 1f       	adc	r31, r19
 750:	21 e0       	ldi	r18, 0x01	; 1
 752:	22 83       	std	Z+2, r18	; 0x02
										break;
 754:	0c c0       	rjmp	.+24     	; 0x76e <LED_enumdInit+0xc4>
										case LED_enumActiveLOw_OFF:
												LOCAL_strCurrentLed[LOCAL_u8Iterator].PORT_strCFGType = DIO_enumOUTPUTHIGH ;
 756:	fc 01       	movw	r30, r24
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	e8 0f       	add	r30, r24
 75e:	f9 1f       	adc	r31, r25
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	4c 0f       	add	r20, r28
 766:	5d 1f       	adc	r21, r29
 768:	e4 0f       	add	r30, r20
 76a:	f5 1f       	adc	r31, r21
 76c:	12 82       	std	Z+2, r1	; 0x02
		
	/**
	*@ call DIO_enumSetCFG function to set configration in DIO Driver
	*@ and check return of DIO_enumSetCFG function ok or not ok
	*/		
		DIO_enumSetCFG( & LOCAL_strCurrentLed [LOCAL_u8Iterator] );
 76e:	8c 01       	movw	r16, r24
 770:	00 0f       	add	r16, r16
 772:	11 1f       	adc	r17, r17
 774:	80 0f       	add	r24, r16
 776:	91 1f       	adc	r25, r17
 778:	01 e0       	ldi	r16, 0x01	; 1
 77a:	10 e0       	ldi	r17, 0x00	; 0
 77c:	0c 0f       	add	r16, r28
 77e:	1d 1f       	adc	r17, r29
 780:	08 0f       	add	r16, r24
 782:	19 1f       	adc	r17, r25
 784:	c8 01       	movw	r24, r16
 786:	0e 94 5a 00 	call	0xb4	; 0xb4 <_etext>
			
		if( ! (DIO_enumSetCFG( & LOCAL_strCurrentLed [LOCAL_u8Iterator] ))){
 78a:	c8 01       	movw	r24, r16
 78c:	0e 94 5a 00 	call	0xb4	; 0xb4 <_etext>
 790:	81 11       	cpse	r24, r1
			LOCAL_enumReturnStatus = LED_enumOK ;
		}/*if*/
		else {
			LOCAL_enumReturnStatus = LED_enumNOK ;
 792:	81 e0       	ldi	r24, 0x01	; 1
	
	u8 LOCAL_u8Iterator = 0 ;
	
	PPRT_strCFG_t LOCAL_strCurrentLed[NumOfLeds];

	for( LOCAL_u8Iterator = 0 ; LOCAL_u8Iterator < NumOfLeds ; LOCAL_u8Iterator++)
 794:	f3 94       	inc	r15
 796:	51 e0       	ldi	r21, 0x01	; 1
 798:	5f 15       	cp	r21, r15
 79a:	08 f0       	brcs	.+2      	; 0x79e <LED_enumdInit+0xf4>
 79c:	93 cf       	rjmp	.-218    	; 0x6c4 <LED_enumdInit+0x1a>
	

return LOCAL_enumReturnStatus ;
	
	
}/*led init function */
 79e:	26 96       	adiw	r28, 0x06	; 6
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	ff 90       	pop	r15
 7b4:	08 95       	ret

Disassembly of section .text.LED_enuSetLedState:

00000b1a <LED_enuSetLedState>:
 *@param  : take led name and led state .
 *@return : Error State                                               
 */

LED_enumErrorState LED_enuSetLedState(u8 Copy_u8LedName , u8 Copy_u8State)
{
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	00 d0       	rcall	.+0      	; 0xb20 <LED_enuSetLedState+0x6>
 b20:	0f 92       	push	r0
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
	*/
	PPRT_strCFG_t LOCAL_strCurrentLed;
	/**
	*@ reconfigure led state which is element of array of leds
	*/
	LEDS[Copy_u8LedName].LED_strSTATE = Copy_u8State ;
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	fc 01       	movw	r30, r24
 b2a:	ee 0f       	add	r30, r30
 b2c:	ff 1f       	adc	r31, r31
 b2e:	8e 0f       	add	r24, r30
 b30:	9f 1f       	adc	r25, r31
 b32:	fc 01       	movw	r30, r24
 b34:	e0 5a       	subi	r30, 0xA0	; 160
 b36:	ff 4f       	sbci	r31, 0xFF	; 255
 b38:	62 83       	std	Z+2, r22	; 0x02
	
	LOCAL_strCurrentLed.PORT_strPORT = LEDS[Copy_u8LedName].LED_strPORT ;
 b3a:	80 81       	ld	r24, Z
 b3c:	89 83       	std	Y+1, r24	; 0x01
	
	LOCAL_strCurrentLed.PORT_strPIN = LEDS[Copy_u8LedName].LED_strPIN ;
 b3e:	81 81       	ldd	r24, Z+1	; 0x01
 b40:	8a 83       	std	Y+2, r24	; 0x02
	
	switch(LEDS[Copy_u8LedName].LED_strSTATE){
 b42:	61 30       	cpi	r22, 0x01	; 1
 b44:	41 f0       	breq	.+16     	; 0xb56 <LED_enuSetLedState+0x3c>
 b46:	28 f0       	brcs	.+10     	; 0xb52 <LED_enuSetLedState+0x38>
 b48:	62 30       	cpi	r22, 0x02	; 2
 b4a:	41 f0       	breq	.+16     	; 0xb5c <LED_enuSetLedState+0x42>
 b4c:	63 30       	cpi	r22, 0x03	; 3
 b4e:	49 f0       	breq	.+18     	; 0xb62 <LED_enuSetLedState+0x48>
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <LED_enuSetLedState+0x4a>
		
		case LED_enumActiveHigh_ON:
	    LOCAL_strCurrentLed.PORT_strCFGType = DIO_enumOUTPUTHIGH ;
 b52:	1b 82       	std	Y+3, r1	; 0x03
		break;
 b54:	07 c0       	rjmp	.+14     	; 0xb64 <LED_enuSetLedState+0x4a>
		case LED_enumActiveHigh_OFF:
		LOCAL_strCurrentLed.PORT_strCFGType = DIO_enumOUTPUTLOW ;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	8b 83       	std	Y+3, r24	; 0x03
		break;
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <LED_enuSetLedState+0x4a>
		case LED_enumActiveLow_ON:
		LOCAL_strCurrentLed.PORT_strCFGType = DIO_enumOUTPUTLOW ;
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	8b 83       	std	Y+3, r24	; 0x03
		break;
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <LED_enuSetLedState+0x4a>
		case LED_enumActiveLOw_OFF:
		LOCAL_strCurrentLed.PORT_strCFGType = DIO_enumOUTPUTHIGH ;
 b62:	1b 82       	std	Y+3, r1	; 0x03
	
	/**
	*@ call DIO_enumSetCFG function to set configration in DIO Driver
	*@ and check return of DIO_enumSetCFG function ok or not ok
	*/		
		 DIO_enumSetCFG( & LOCAL_strCurrentLed );
 b64:	ce 01       	movw	r24, r28
 b66:	01 96       	adiw	r24, 0x01	; 1
 b68:	0e 94 5a 00 	call	0xb4	; 0xb4 <_etext>
			
		if( ! (DIO_enumSetCFG( & LOCAL_strCurrentLed  )))
 b6c:	ce 01       	movw	r24, r28
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	0e 94 5a 00 	call	0xb4	; 0xb4 <_etext>
 b74:	81 11       	cpse	r24, r1
		{
			LOCAL_enumReturnStatus = LED_enumOK ;
		}/*if*/
		else {
			LOCAL_enumReturnStatus = LED_enumNOK ;
 b76:	81 e0       	ldi	r24, 0x01	; 1
		}/*else*/
	
	
return LOCAL_enumReturnStatus ;	
	
 b78:	0f 90       	pop	r0
 b7a:	0f 90       	pop	r0
 b7c:	0f 90       	pop	r0
 b7e:	df 91       	pop	r29
 b80:	cf 91       	pop	r28
 b82:	08 95       	ret

Disassembly of section .text.DIO_enumSetCFG:

000000b4 <DIO_enumSetCFG>:
 */	
DIO_enumError_t DIO_enumSetCFG( PPRT_strCFG_t * ADD_strPORT_CFG )
{
	DIO_enumError_t Ret_enumERRORStatus = DIO_enumOK  ; 
	
	if( ((ADD_strPORT_CFG -> PORT_strPORT) > DIO_enumPORTD) || ((ADD_strPORT_CFG -> PORT_strPORT) < DIO_enumPORTA) )
  b4:	fc 01       	movw	r30, r24
  b6:	20 81       	ld	r18, Z
  b8:	24 30       	cpi	r18, 0x04	; 4
  ba:	08 f0       	brcs	.+2      	; 0xbe <DIO_enumSetCFG+0xa>
  bc:	bf c1       	rjmp	.+894    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		{ 
			Ret_enumERRORStatus = DIO_enumINVALID_PORT ;
		}
	else if( ((ADD_strPORT_CFG -> PORT_strPIN) > DIO_enumPIN7) || ((ADD_strPORT_CFG -> PORT_strPIN) < DIO_enumPIN0) )
  be:	31 81       	ldd	r19, Z+1	; 0x01
  c0:	38 30       	cpi	r19, 0x08	; 8
  c2:	08 f0       	brcs	.+2      	; 0xc6 <DIO_enumSetCFG+0x12>
  c4:	bd c1       	rjmp	.+890    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
			Ret_enumERRORStatus = DIO_enumINVALID_PIN ;
		}	
	else if( ((ADD_strPORT_CFG -> PORT_strCFGType) > DIO_enumInputExternalPullDown) || ((ADD_strPORT_CFG -> PORT_strCFGType) < DIO_enumOUTPUTHIGH) )
  c6:	42 81       	ldd	r20, Z+2	; 0x02
  c8:	44 30       	cpi	r20, 0x04	; 4
  ca:	08 f0       	brcs	.+2      	; 0xce <DIO_enumSetCFG+0x1a>
  cc:	bb c1       	rjmp	.+886    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			Ret_enumERRORStatus = DIO_enumINVALID_MODE ;
		}
	else
		{
			switch(ADD_strPORT_CFG -> PORT_strPORT)
  ce:	21 30       	cpi	r18, 0x01	; 1
  d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_enumSetCFG+0x20>
  d2:	73 c0       	rjmp	.+230    	; 0x1ba <DIO_enumSetCFG+0x106>
  d4:	38 f0       	brcs	.+14     	; 0xe4 <DIO_enumSetCFG+0x30>
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	09 f4       	brne	.+2      	; 0xdc <DIO_enumSetCFG+0x28>
  da:	da c0       	rjmp	.+436    	; 0x290 <DIO_enumSetCFG+0x1dc>
  dc:	23 30       	cpi	r18, 0x03	; 3
  de:	09 f4       	brne	.+2      	; 0xe2 <DIO_enumSetCFG+0x2e>
  e0:	42 c1       	rjmp	.+644    	; 0x366 <DIO_enumSetCFG+0x2b2>
  e2:	b2 c1       	rjmp	.+868    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			{
				case DIO_enumPORTA:
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	f9 f0       	breq	.+62     	; 0x126 <DIO_enumSetCFG+0x72>
  e8:	30 f0       	brcs	.+12     	; 0xf6 <DIO_enumSetCFG+0x42>
  ea:	42 30       	cpi	r20, 0x02	; 2
  ec:	a9 f1       	breq	.+106    	; 0x158 <DIO_enumSetCFG+0xa4>
  ee:	43 30       	cpi	r20, 0x03	; 3
  f0:	09 f4       	brne	.+2      	; 0xf4 <DIO_enumSetCFG+0x40>
  f2:	4a c0       	rjmp	.+148    	; 0x188 <DIO_enumSetCFG+0xd4>
  f4:	ab c1       	rjmp	.+854    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;		
  f6:	6a b3       	in	r22, 0x1a	; 26
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	fa 01       	movw	r30, r20
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_enumSetCFG+0x50>
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	3a 95       	dec	r19
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_enumSetCFG+0x4c>
 108:	9f 01       	movw	r18, r30
 10a:	26 2b       	or	r18, r22
 10c:	2a bb       	out	0x1a, r18	; 26
												SET_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;		
 10e:	2b b3       	in	r18, 0x1b	; 27
 110:	fc 01       	movw	r30, r24
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_enumSetCFG+0x66>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_enumSetCFG+0x62>
 11e:	42 2b       	or	r20, r18
 120:	4b bb       	out	0x1b, r20	; 27
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 122:	80 e0       	ldi	r24, 0x00	; 0
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;		
												SET_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 124:	08 95       	ret
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;		
 126:	6a b3       	in	r22, 0x1a	; 26
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	fa 01       	movw	r30, r20
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_enumSetCFG+0x80>
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	3a 95       	dec	r19
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_enumSetCFG+0x7c>
 138:	9f 01       	movw	r18, r30
 13a:	26 2b       	or	r18, r22
 13c:	2a bb       	out	0x1a, r18	; 26
												CLR_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;		
 13e:	2b b3       	in	r18, 0x1b	; 27
 140:	fc 01       	movw	r30, r24
 142:	01 80       	ldd	r0, Z+1	; 0x01
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enumSetCFG+0x96>
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_enumSetCFG+0x92>
 14e:	40 95       	com	r20
 150:	42 23       	and	r20, r18
 152:	4b bb       	out	0x1b, r20	; 27
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 154:	80 e0       	ldi	r24, 0x00	; 0
										break;
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;		
												CLR_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 156:	08 95       	ret
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	ba 01       	movw	r22, r20
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_enumSetCFG+0xb2>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	3a 95       	dec	r19
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_enumSetCFG+0xae>
 16a:	60 95       	com	r22
 16c:	26 23       	and	r18, r22
 16e:	2a bb       	out	0x1a, r18	; 26
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;			
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	fc 01       	movw	r30, r24
 174:	01 80       	ldd	r0, Z+1	; 0x01
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_enumSetCFG+0xc8>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_enumSetCFG+0xc4>
 180:	42 2b       	or	r20, r18
 182:	4b bb       	out	0x1b, r20	; 27
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 184:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN) ;			
										break;
 186:	08 95       	ret
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;
 188:	2a b3       	in	r18, 0x1a	; 26
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	ba 01       	movw	r22, r20
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_enumSetCFG+0xe2>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	3a 95       	dec	r19
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_enumSetCFG+0xde>
 19a:	60 95       	com	r22
 19c:	26 23       	and	r18, r22
 19e:	2a bb       	out	0x1a, r18	; 26
												/*diable pull up resistors*/
												CLR_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN); 
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	fc 01       	movw	r30, r24
 1a4:	01 80       	ldd	r0, Z+1	; 0x01
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_enumSetCFG+0xf8>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_enumSetCFG+0xf4>
 1b0:	40 95       	com	r20
 1b2:	42 23       	and	r20, r18
 1b4:	4b bb       	out	0x1b, r20	; 27
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRA,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*diable pull up resistors*/
												CLR_BIT(PORTA,ADD_strPORT_CFG -> PORT_strPIN); 
										break;
 1b8:	08 95       	ret
										default:
										break;
									}//switch2
				break;
				case DIO_enumPORTB:
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	f9 f0       	breq	.+62     	; 0x1fc <DIO_enumSetCFG+0x148>
 1be:	30 f0       	brcs	.+12     	; 0x1cc <DIO_enumSetCFG+0x118>
 1c0:	42 30       	cpi	r20, 0x02	; 2
 1c2:	a9 f1       	breq	.+106    	; 0x22e <DIO_enumSetCFG+0x17a>
 1c4:	43 30       	cpi	r20, 0x03	; 3
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_enumSetCFG+0x116>
 1c8:	4a c0       	rjmp	.+148    	; 0x25e <DIO_enumSetCFG+0x1aa>
 1ca:	42 c1       	rjmp	.+644    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;		
 1cc:	67 b3       	in	r22, 0x17	; 23
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	fa 01       	movw	r30, r20
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_enumSetCFG+0x126>
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	3a 95       	dec	r19
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_enumSetCFG+0x122>
 1de:	9f 01       	movw	r18, r30
 1e0:	26 2b       	or	r18, r22
 1e2:	27 bb       	out	0x17, r18	; 23
												SET_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;		
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	fc 01       	movw	r30, r24
 1e8:	01 80       	ldd	r0, Z+1	; 0x01
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_enumSetCFG+0x13c>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_enumSetCFG+0x138>
 1f4:	42 2b       	or	r20, r18
 1f6:	48 bb       	out	0x18, r20	; 24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;		
												SET_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 1fa:	08 95       	ret
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;		
 1fc:	67 b3       	in	r22, 0x17	; 23
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	fa 01       	movw	r30, r20
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_enumSetCFG+0x156>
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	3a 95       	dec	r19
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_enumSetCFG+0x152>
 20e:	9f 01       	movw	r18, r30
 210:	26 2b       	or	r18, r22
 212:	27 bb       	out	0x17, r18	; 23
												CLR_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;		
 214:	28 b3       	in	r18, 0x18	; 24
 216:	fc 01       	movw	r30, r24
 218:	01 80       	ldd	r0, Z+1	; 0x01
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_enumSetCFG+0x16c>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_enumSetCFG+0x168>
 224:	40 95       	com	r20
 226:	42 23       	and	r20, r18
 228:	48 bb       	out	0x18, r20	; 24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 22a:	80 e0       	ldi	r24, 0x00	; 0
										break;
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;		
												CLR_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 22c:	08 95       	ret
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;
 22e:	27 b3       	in	r18, 0x17	; 23
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	ba 01       	movw	r22, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_enumSetCFG+0x188>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	3a 95       	dec	r19
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_enumSetCFG+0x184>
 240:	60 95       	com	r22
 242:	26 23       	and	r18, r22
 244:	27 bb       	out	0x17, r18	; 23
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;			
 246:	28 b3       	in	r18, 0x18	; 24
 248:	fc 01       	movw	r30, r24
 24a:	01 80       	ldd	r0, Z+1	; 0x01
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_enumSetCFG+0x19e>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_enumSetCFG+0x19a>
 256:	42 2b       	or	r20, r18
 258:	48 bb       	out	0x18, r20	; 24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 25a:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN) ;			
										break;
 25c:	08 95       	ret
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;
 25e:	27 b3       	in	r18, 0x17	; 23
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	ba 01       	movw	r22, r20
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_enumSetCFG+0x1b8>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	3a 95       	dec	r19
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_enumSetCFG+0x1b4>
 270:	60 95       	com	r22
 272:	26 23       	and	r18, r22
 274:	27 bb       	out	0x17, r18	; 23
												/*diable pull up resistors*/
												CLR_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN); 
 276:	28 b3       	in	r18, 0x18	; 24
 278:	fc 01       	movw	r30, r24
 27a:	01 80       	ldd	r0, Z+1	; 0x01
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_enumSetCFG+0x1ce>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_enumSetCFG+0x1ca>
 286:	40 95       	com	r20
 288:	42 23       	and	r20, r18
 28a:	48 bb       	out	0x18, r20	; 24
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 28c:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRB,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*diable pull up resistors*/
												CLR_BIT(PORTB,ADD_strPORT_CFG -> PORT_strPIN); 
										break;
 28e:	08 95       	ret
										break;
									}//switch2
										
				break ;
				case DIO_enumPORTC:
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	f9 f0       	breq	.+62     	; 0x2d2 <DIO_enumSetCFG+0x21e>
 294:	30 f0       	brcs	.+12     	; 0x2a2 <DIO_enumSetCFG+0x1ee>
 296:	42 30       	cpi	r20, 0x02	; 2
 298:	a9 f1       	breq	.+106    	; 0x304 <DIO_enumSetCFG+0x250>
 29a:	43 30       	cpi	r20, 0x03	; 3
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_enumSetCFG+0x1ec>
 29e:	4a c0       	rjmp	.+148    	; 0x334 <DIO_enumSetCFG+0x280>
 2a0:	d9 c0       	rjmp	.+434    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;		
 2a2:	64 b3       	in	r22, 0x14	; 20
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	fa 01       	movw	r30, r20
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_enumSetCFG+0x1fc>
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	3a 95       	dec	r19
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_enumSetCFG+0x1f8>
 2b4:	9f 01       	movw	r18, r30
 2b6:	26 2b       	or	r18, r22
 2b8:	24 bb       	out	0x14, r18	; 20
												SET_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;		
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	fc 01       	movw	r30, r24
 2be:	01 80       	ldd	r0, Z+1	; 0x01
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_enumSetCFG+0x212>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_enumSetCFG+0x20e>
 2ca:	42 2b       	or	r20, r18
 2cc:	45 bb       	out	0x15, r20	; 21
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;		
												SET_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 2d0:	08 95       	ret
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;		
 2d2:	64 b3       	in	r22, 0x14	; 20
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	fa 01       	movw	r30, r20
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_enumSetCFG+0x22c>
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	3a 95       	dec	r19
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_enumSetCFG+0x228>
 2e4:	9f 01       	movw	r18, r30
 2e6:	26 2b       	or	r18, r22
 2e8:	24 bb       	out	0x14, r18	; 20
												CLR_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;		
 2ea:	25 b3       	in	r18, 0x15	; 21
 2ec:	fc 01       	movw	r30, r24
 2ee:	01 80       	ldd	r0, Z+1	; 0x01
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_enumSetCFG+0x242>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_enumSetCFG+0x23e>
 2fa:	40 95       	com	r20
 2fc:	42 23       	and	r20, r18
 2fe:	45 bb       	out	0x15, r20	; 21
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 300:	80 e0       	ldi	r24, 0x00	; 0
										break;
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;		
												CLR_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 302:	08 95       	ret
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;
 304:	24 b3       	in	r18, 0x14	; 20
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	ba 01       	movw	r22, r20
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_enumSetCFG+0x25e>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	3a 95       	dec	r19
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_enumSetCFG+0x25a>
 316:	60 95       	com	r22
 318:	26 23       	and	r18, r22
 31a:	24 bb       	out	0x14, r18	; 20
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;			
 31c:	25 b3       	in	r18, 0x15	; 21
 31e:	fc 01       	movw	r30, r24
 320:	01 80       	ldd	r0, Z+1	; 0x01
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_enumSetCFG+0x274>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_enumSetCFG+0x270>
 32c:	42 2b       	or	r20, r18
 32e:	45 bb       	out	0x15, r20	; 21
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 330:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN) ;			
										break;
 332:	08 95       	ret
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;
 334:	24 b3       	in	r18, 0x14	; 20
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	ba 01       	movw	r22, r20
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_enumSetCFG+0x28e>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	3a 95       	dec	r19
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_enumSetCFG+0x28a>
 346:	60 95       	com	r22
 348:	26 23       	and	r18, r22
 34a:	24 bb       	out	0x14, r18	; 20
												/*diable pull up resistors*/
												CLR_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN); 
 34c:	25 b3       	in	r18, 0x15	; 21
 34e:	fc 01       	movw	r30, r24
 350:	01 80       	ldd	r0, Z+1	; 0x01
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_enumSetCFG+0x2a4>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_enumSetCFG+0x2a0>
 35c:	40 95       	com	r20
 35e:	42 23       	and	r20, r18
 360:	45 bb       	out	0x15, r20	; 21
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 362:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRC,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*diable pull up resistors*/
												CLR_BIT(PORTC,ADD_strPORT_CFG -> PORT_strPIN); 
										break;
 364:	08 95       	ret
										default:
										break;
									}//switch2
				break;
				case DIO_enumPORTD:
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	f9 f0       	breq	.+62     	; 0x3a8 <DIO_enumSetCFG+0x2f4>
 36a:	30 f0       	brcs	.+12     	; 0x378 <DIO_enumSetCFG+0x2c4>
 36c:	42 30       	cpi	r20, 0x02	; 2
 36e:	a9 f1       	breq	.+106    	; 0x3da <DIO_enumSetCFG+0x326>
 370:	43 30       	cpi	r20, 0x03	; 3
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_enumSetCFG+0x2c2>
 374:	4a c0       	rjmp	.+148    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 376:	70 c0       	rjmp	.+224    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;		
 378:	61 b3       	in	r22, 0x11	; 17
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	fa 01       	movw	r30, r20
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_enumSetCFG+0x2d2>
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	3a 95       	dec	r19
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_enumSetCFG+0x2ce>
 38a:	9f 01       	movw	r18, r30
 38c:	26 2b       	or	r18, r22
 38e:	21 bb       	out	0x11, r18	; 17
												SET_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;		
 390:	22 b3       	in	r18, 0x12	; 18
 392:	fc 01       	movw	r30, r24
 394:	01 80       	ldd	r0, Z+1	; 0x01
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_enumSetCFG+0x2e8>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_enumSetCFG+0x2e4>
 3a0:	42 2b       	or	r20, r18
 3a2:	42 bb       	out	0x12, r20	; 18
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
									switch(ADD_strPORT_CFG -> PORT_strCFGType){
										case DIO_enumOUTPUTHIGH:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;		
												SET_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 3a6:	08 95       	ret
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;		
 3a8:	61 b3       	in	r22, 0x11	; 17
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	fa 01       	movw	r30, r20
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_enumSetCFG+0x302>
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	3a 95       	dec	r19
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_enumSetCFG+0x2fe>
 3ba:	9f 01       	movw	r18, r30
 3bc:	26 2b       	or	r18, r22
 3be:	21 bb       	out	0x11, r18	; 17
												CLR_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;		
 3c0:	22 b3       	in	r18, 0x12	; 18
 3c2:	fc 01       	movw	r30, r24
 3c4:	01 80       	ldd	r0, Z+1	; 0x01
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_enumSetCFG+0x318>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_enumSetCFG+0x314>
 3d0:	40 95       	com	r20
 3d2:	42 23       	and	r20, r18
 3d4:	42 bb       	out	0x12, r20	; 18
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
										break;
										case DIO_enumOUTPUTLOW:
												/*set port A(0:7) as ouput mode*/
												SET_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;		
												CLR_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;		
										break;
 3d8:	08 95       	ret
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;
 3da:	21 b3       	in	r18, 0x11	; 17
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	ba 01       	movw	r22, r20
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_enumSetCFG+0x334>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	3a 95       	dec	r19
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_enumSetCFG+0x330>
 3ec:	60 95       	com	r22
 3ee:	26 23       	and	r18, r22
 3f0:	21 bb       	out	0x11, r18	; 17
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;			
 3f2:	22 b3       	in	r18, 0x12	; 18
 3f4:	fc 01       	movw	r30, r24
 3f6:	01 80       	ldd	r0, Z+1	; 0x01
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_enumSetCFG+0x34a>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_enumSetCFG+0x346>
 402:	42 2b       	or	r20, r18
 404:	42 bb       	out	0x12, r20	; 18
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 406:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputPullUp:
												/*set this bit as input */
												CLR_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*Enable pull up resistor for this pin*/
												SET_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN) ;			
										break;
 408:	08 95       	ret
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;
 40a:	21 b3       	in	r18, 0x11	; 17
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	ba 01       	movw	r22, r20
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	3a 95       	dec	r19
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	60 95       	com	r22
 41e:	26 23       	and	r18, r22
 420:	21 bb       	out	0x11, r18	; 17
												/*diable pull up resistors*/
												CLR_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN); 
 422:	22 b3       	in	r18, 0x12	; 18
 424:	fc 01       	movw	r30, r24
 426:	01 80       	ldd	r0, Z+1	; 0x01
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	40 95       	com	r20
 434:	42 23       	and	r20, r18
 436:	42 bb       	out	0x12, r20	; 18
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 438:	80 e0       	ldi	r24, 0x00	; 0
										case DIO_enumInputExternalPullDown:
												/*set this bit as input*/
												CLR_BIT(DDRD,ADD_strPORT_CFG -> PORT_strPIN) ;
												/*diable pull up resistors*/
												CLR_BIT(PORTD,ADD_strPORT_CFG -> PORT_strPIN); 
										break;
 43a:	08 95       	ret
{
	DIO_enumError_t Ret_enumERRORStatus = DIO_enumOK  ; 
	
	if( ((ADD_strPORT_CFG -> PORT_strPORT) > DIO_enumPORTD) || ((ADD_strPORT_CFG -> PORT_strPORT) < DIO_enumPORTA) )
		{ 
			Ret_enumERRORStatus = DIO_enumINVALID_PORT ;
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	08 95       	ret
		}
	else if( ((ADD_strPORT_CFG -> PORT_strPIN) > DIO_enumPIN7) || ((ADD_strPORT_CFG -> PORT_strPIN) < DIO_enumPIN0) )
		{
			Ret_enumERRORStatus = DIO_enumINVALID_PIN ;
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	08 95       	ret
		}	
	else if( ((ADD_strPORT_CFG -> PORT_strCFGType) > DIO_enumInputExternalPullDown) || ((ADD_strPORT_CFG -> PORT_strCFGType) < DIO_enumOUTPUTHIGH) )
		{
			Ret_enumERRORStatus = DIO_enumINVALID_MODE ;
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	08 95       	ret
			
			
			
			
			
			Ret_enumERRORStatus = DIO_enumOK ;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
 458:	80 e0       	ldi	r24, 0x00	; 0
	
	
	
	
	
}/*set pin configration function*/
 45a:	08 95       	ret

Disassembly of section .text.__vector_1:

00000be2 <__vector_1>:
/**
* ISR of External Interrupt0
*/

ISR(EXT_INT0)
{
 be2:	1f 92       	push	r1
 be4:	0f 92       	push	r0
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	0f 92       	push	r0
 bea:	11 24       	eor	r1, r1
 bec:	2f 93       	push	r18
 bee:	3f 93       	push	r19
 bf0:	4f 93       	push	r20
 bf2:	5f 93       	push	r21
 bf4:	6f 93       	push	r22
 bf6:	7f 93       	push	r23
 bf8:	8f 93       	push	r24
 bfa:	9f 93       	push	r25
 bfc:	af 93       	push	r26
 bfe:	bf 93       	push	r27
 c00:	ef 93       	push	r30
 c02:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt0_AddCallBack();
 c04:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ExtInt0_AddCallBack>
 c08:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ExtInt0_AddCallBack+0x1>
 c0c:	09 95       	icall
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,6);
 c0e:	8a b7       	in	r24, 0x3a	; 58
 c10:	80 64       	ori	r24, 0x40	; 64
 c12:	8a bf       	out	0x3a, r24	; 58
	
}/*EXT_INT0 ISR*/
 c14:	ff 91       	pop	r31
 c16:	ef 91       	pop	r30
 c18:	bf 91       	pop	r27
 c1a:	af 91       	pop	r26
 c1c:	9f 91       	pop	r25
 c1e:	8f 91       	pop	r24
 c20:	7f 91       	pop	r23
 c22:	6f 91       	pop	r22
 c24:	5f 91       	pop	r21
 c26:	4f 91       	pop	r20
 c28:	3f 91       	pop	r19
 c2a:	2f 91       	pop	r18
 c2c:	0f 90       	pop	r0
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	0f 90       	pop	r0
 c32:	1f 90       	pop	r1
 c34:	18 95       	reti

Disassembly of section .text.__vector_2:

00000c36 <__vector_2>:

/**
* ISR of External Interrupt1
*/
ISR(EXT_INT1)
{
 c36:	1f 92       	push	r1
 c38:	0f 92       	push	r0
 c3a:	0f b6       	in	r0, 0x3f	; 63
 c3c:	0f 92       	push	r0
 c3e:	11 24       	eor	r1, r1
 c40:	2f 93       	push	r18
 c42:	3f 93       	push	r19
 c44:	4f 93       	push	r20
 c46:	5f 93       	push	r21
 c48:	6f 93       	push	r22
 c4a:	7f 93       	push	r23
 c4c:	8f 93       	push	r24
 c4e:	9f 93       	push	r25
 c50:	af 93       	push	r26
 c52:	bf 93       	push	r27
 c54:	ef 93       	push	r30
 c56:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt1_AddCallBack();
 c58:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <ExtInt1_AddCallBack>
 c5c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <ExtInt1_AddCallBack+0x1>
 c60:	09 95       	icall
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,7);
 c62:	8a b7       	in	r24, 0x3a	; 58
 c64:	80 68       	ori	r24, 0x80	; 128
 c66:	8a bf       	out	0x3a, r24	; 58

}/* EXT_INT1 ISR*/
 c68:	ff 91       	pop	r31
 c6a:	ef 91       	pop	r30
 c6c:	bf 91       	pop	r27
 c6e:	af 91       	pop	r26
 c70:	9f 91       	pop	r25
 c72:	8f 91       	pop	r24
 c74:	7f 91       	pop	r23
 c76:	6f 91       	pop	r22
 c78:	5f 91       	pop	r21
 c7a:	4f 91       	pop	r20
 c7c:	3f 91       	pop	r19
 c7e:	2f 91       	pop	r18
 c80:	0f 90       	pop	r0
 c82:	0f be       	out	0x3f, r0	; 63
 c84:	0f 90       	pop	r0
 c86:	1f 90       	pop	r1
 c88:	18 95       	reti

Disassembly of section .text.__vector_3:

00000c8a <__vector_3>:

/**
* ISR of External Interrupt2
*/
ISR(EXT_INT2)
{
 c8a:	1f 92       	push	r1
 c8c:	0f 92       	push	r0
 c8e:	0f b6       	in	r0, 0x3f	; 63
 c90:	0f 92       	push	r0
 c92:	11 24       	eor	r1, r1
 c94:	2f 93       	push	r18
 c96:	3f 93       	push	r19
 c98:	4f 93       	push	r20
 c9a:	5f 93       	push	r21
 c9c:	6f 93       	push	r22
 c9e:	7f 93       	push	r23
 ca0:	8f 93       	push	r24
 ca2:	9f 93       	push	r25
 ca4:	af 93       	push	r26
 ca6:	bf 93       	push	r27
 ca8:	ef 93       	push	r30
 caa:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt2_AddCallBack();
 cac:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ExtInt2_AddCallBack>
 cb0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ExtInt2_AddCallBack+0x1>
 cb4:	09 95       	icall
	
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,5);
 cb6:	8a b7       	in	r24, 0x3a	; 58
 cb8:	80 62       	ori	r24, 0x20	; 32
 cba:	8a bf       	out	0x3a, r24	; 58

}/* EXT_INT2 ISR */
 cbc:	ff 91       	pop	r31
 cbe:	ef 91       	pop	r30
 cc0:	bf 91       	pop	r27
 cc2:	af 91       	pop	r26
 cc4:	9f 91       	pop	r25
 cc6:	8f 91       	pop	r24
 cc8:	7f 91       	pop	r23
 cca:	6f 91       	pop	r22
 ccc:	5f 91       	pop	r21
 cce:	4f 91       	pop	r20
 cd0:	3f 91       	pop	r19
 cd2:	2f 91       	pop	r18
 cd4:	0f 90       	pop	r0
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	0f 90       	pop	r0
 cda:	1f 90       	pop	r1
 cdc:	18 95       	reti

Disassembly of section .text.Timer2_enumSetTimer_OV:

0000045c <Timer2_enumSetTimer_OV>:
	



return Local_enuReturnStatus ;		
}/*TIMER1_enuSetINP_CAP_INT*/
 45c:	cf 92       	push	r12
 45e:	df 92       	push	r13
 460:	ef 92       	push	r14
 462:	ff 92       	push	r15
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	25 b5       	in	r18, 0x25	; 37
 46a:	20 68       	ori	r18, 0x80	; 128
 46c:	25 bd       	out	0x25, r18	; 37
 46e:	25 b5       	in	r18, 0x25	; 37
 470:	27 7b       	andi	r18, 0xB7	; 183
 472:	25 bd       	out	0x25, r18	; 37
 474:	25 b5       	in	r18, 0x25	; 37
 476:	25 bd       	out	0x25, r18	; 37
 478:	25 b5       	in	r18, 0x25	; 37
 47a:	28 7f       	andi	r18, 0xF8	; 248
 47c:	25 bd       	out	0x25, r18	; 37
 47e:	8b 01       	movw	r16, r22
 480:	9c 01       	movw	r18, r24
 482:	01 50       	subi	r16, 0x01	; 1
 484:	11 09       	sbc	r17, r1
 486:	21 09       	sbc	r18, r1
 488:	31 09       	sbc	r19, r1
 48a:	0f 31       	cpi	r16, 0x1F	; 31
 48c:	11 05       	cpc	r17, r1
 48e:	21 05       	cpc	r18, r1
 490:	31 05       	cpc	r19, r1
 492:	10 f5       	brcc	.+68     	; 0x4d8 <Timer2_enumSetTimer_OV+0x7c>
 494:	25 b5       	in	r18, 0x25	; 37
 496:	21 60       	ori	r18, 0x01	; 1
 498:	25 bd       	out	0x25, r18	; 37
 49a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer2_u8OVCounter>
 49e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 4a2:	00 e2       	ldi	r16, 0x20	; 32
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	68 01       	movw	r12, r16
 4ac:	79 01       	movw	r14, r18
 4ae:	c6 1a       	sub	r12, r22
 4b0:	d7 0a       	sbc	r13, r23
 4b2:	e8 0a       	sbc	r14, r24
 4b4:	f9 0a       	sbc	r15, r25
 4b6:	c7 01       	movw	r24, r14
 4b8:	b6 01       	movw	r22, r12
 4ba:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	51 e4       	ldi	r21, 0x41	; 65
 4c6:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
 4ca:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fixunssfsi>
 4ce:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <Timer2_u8LoadVal>
 4d2:	64 bd       	out	0x24, r22	; 36
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	dc c0       	rjmp	.+440    	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 4d8:	8b 01       	movw	r16, r22
 4da:	9c 01       	movw	r18, r24
 4dc:	01 52       	subi	r16, 0x21	; 33
 4de:	11 09       	sbc	r17, r1
 4e0:	21 09       	sbc	r18, r1
 4e2:	31 09       	sbc	r19, r1
 4e4:	0f 3d       	cpi	r16, 0xDF	; 223
 4e6:	11 05       	cpc	r17, r1
 4e8:	21 05       	cpc	r18, r1
 4ea:	31 05       	cpc	r19, r1
 4ec:	b0 f4       	brcc	.+44     	; 0x51a <Timer2_enumSetTimer_OV+0xbe>
 4ee:	25 b5       	in	r18, 0x25	; 37
 4f0:	22 60       	ori	r18, 0x02	; 2
 4f2:	25 bd       	out	0x25, r18	; 37
 4f4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer2_u8OVCounter>
 4f8:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 4fc:	00 e0       	ldi	r16, 0x00	; 0
 4fe:	11 e0       	ldi	r17, 0x01	; 1
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	68 01       	movw	r12, r16
 506:	79 01       	movw	r14, r18
 508:	c6 1a       	sub	r12, r22
 50a:	d7 0a       	sbc	r13, r23
 50c:	e8 0a       	sbc	r14, r24
 50e:	f9 0a       	sbc	r15, r25
 510:	c0 92 7d 00 	sts	0x007D, r12	; 0x80007d <Timer2_u8LoadVal>
 514:	c4 bc       	out	0x24, r12	; 36
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	bb c0       	rjmp	.+374    	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 51a:	8b 01       	movw	r16, r22
 51c:	9c 01       	movw	r18, r24
 51e:	01 50       	subi	r16, 0x01	; 1
 520:	11 40       	sbci	r17, 0x01	; 1
 522:	21 09       	sbc	r18, r1
 524:	31 09       	sbc	r19, r1
 526:	0f 3f       	cpi	r16, 0xFF	; 255
 528:	16 40       	sbci	r17, 0x06	; 6
 52a:	21 05       	cpc	r18, r1
 52c:	31 05       	cpc	r19, r1
 52e:	10 f5       	brcc	.+68     	; 0x574 <Timer2_enumSetTimer_OV+0x118>
 530:	25 b5       	in	r18, 0x25	; 37
 532:	24 60       	ori	r18, 0x04	; 4
 534:	25 bd       	out	0x25, r18	; 37
 536:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer2_u8OVCounter>
 53a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 53e:	00 e0       	ldi	r16, 0x00	; 0
 540:	18 e0       	ldi	r17, 0x08	; 8
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	68 01       	movw	r12, r16
 548:	79 01       	movw	r14, r18
 54a:	c6 1a       	sub	r12, r22
 54c:	d7 0a       	sbc	r13, r23
 54e:	e8 0a       	sbc	r14, r24
 550:	f9 0a       	sbc	r15, r25
 552:	d7 01       	movw	r26, r14
 554:	c6 01       	movw	r24, r12
 556:	68 94       	set
 558:	12 f8       	bld	r1, 2
 55a:	b6 95       	lsr	r27
 55c:	a7 95       	ror	r26
 55e:	97 95       	ror	r25
 560:	87 95       	ror	r24
 562:	16 94       	lsr	r1
 564:	d1 f7       	brne	.-12     	; 0x55a <Timer2_enumSetTimer_OV+0xfe>
 566:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Timer0_u8LoadVal>
 56a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Timer2_u8LoadVal>
 56e:	84 bd       	out	0x24, r24	; 36
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	8e c0       	rjmp	.+284    	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 574:	8b 01       	movw	r16, r22
 576:	9c 01       	movw	r18, r24
 578:	01 50       	subi	r16, 0x01	; 1
 57a:	18 40       	sbci	r17, 0x08	; 8
 57c:	21 09       	sbc	r18, r1
 57e:	31 09       	sbc	r19, r1
 580:	0f 3f       	cpi	r16, 0xFF	; 255
 582:	17 41       	sbci	r17, 0x17	; 23
 584:	21 05       	cpc	r18, r1
 586:	31 05       	cpc	r19, r1
 588:	00 f5       	brcc	.+64     	; 0x5ca <Timer2_enumSetTimer_OV+0x16e>
 58a:	25 b5       	in	r18, 0x25	; 37
 58c:	26 60       	ori	r18, 0x06	; 6
 58e:	25 bd       	out	0x25, r18	; 37
 590:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer2_u8OVCounter>
 594:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 598:	00 e0       	ldi	r16, 0x00	; 0
 59a:	10 e2       	ldi	r17, 0x20	; 32
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	68 01       	movw	r12, r16
 5a2:	79 01       	movw	r14, r18
 5a4:	c6 1a       	sub	r12, r22
 5a6:	d7 0a       	sbc	r13, r23
 5a8:	e8 0a       	sbc	r14, r24
 5aa:	f9 0a       	sbc	r15, r25
 5ac:	d7 01       	movw	r26, r14
 5ae:	c6 01       	movw	r24, r12
 5b0:	68 94       	set
 5b2:	14 f8       	bld	r1, 4
 5b4:	b6 95       	lsr	r27
 5b6:	a7 95       	ror	r26
 5b8:	97 95       	ror	r25
 5ba:	87 95       	ror	r24
 5bc:	16 94       	lsr	r1
 5be:	d1 f7       	brne	.-12     	; 0x5b4 <Timer2_enumSetTimer_OV+0x158>
 5c0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Timer2_u8LoadVal>
 5c4:	84 bd       	out	0x24, r24	; 36
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	63 c0       	rjmp	.+198    	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 5ca:	8b 01       	movw	r16, r22
 5cc:	9c 01       	movw	r18, r24
 5ce:	01 50       	subi	r16, 0x01	; 1
 5d0:	10 42       	sbci	r17, 0x20	; 32
 5d2:	21 09       	sbc	r18, r1
 5d4:	31 09       	sbc	r19, r1
 5d6:	0f 3f       	cpi	r16, 0xFF	; 255
 5d8:	1f 45       	sbci	r17, 0x5F	; 95
 5da:	21 05       	cpc	r18, r1
 5dc:	31 05       	cpc	r19, r1
 5de:	00 f5       	brcc	.+64     	; 0x620 <Timer2_enumSetTimer_OV+0x1c4>
 5e0:	25 b5       	in	r18, 0x25	; 37
 5e2:	27 60       	ori	r18, 0x07	; 7
 5e4:	25 bd       	out	0x25, r18	; 37
 5e6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer2_u8OVCounter>
 5ea:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 5ee:	00 e0       	ldi	r16, 0x00	; 0
 5f0:	10 e8       	ldi	r17, 0x80	; 128
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	68 01       	movw	r12, r16
 5f8:	79 01       	movw	r14, r18
 5fa:	c6 1a       	sub	r12, r22
 5fc:	d7 0a       	sbc	r13, r23
 5fe:	e8 0a       	sbc	r14, r24
 600:	f9 0a       	sbc	r15, r25
 602:	d7 01       	movw	r26, r14
 604:	c6 01       	movw	r24, r12
 606:	68 94       	set
 608:	16 f8       	bld	r1, 6
 60a:	b6 95       	lsr	r27
 60c:	a7 95       	ror	r26
 60e:	97 95       	ror	r25
 610:	87 95       	ror	r24
 612:	16 94       	lsr	r1
 614:	d1 f7       	brne	.-12     	; 0x60a <Timer2_enumSetTimer_OV+0x1ae>
 616:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Timer2_u8LoadVal>
 61a:	84 bd       	out	0x24, r24	; 36
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	38 c0       	rjmp	.+112    	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 620:	61 30       	cpi	r22, 0x01	; 1
 622:	20 e8       	ldi	r18, 0x80	; 128
 624:	72 07       	cpc	r23, r18
 626:	81 05       	cpc	r24, r1
 628:	91 05       	cpc	r25, r1
 62a:	88 f1       	brcs	.+98     	; 0x68e <Timer2_enumSetTimer_OV+0x232>
 62c:	25 b5       	in	r18, 0x25	; 37
 62e:	27 60       	ori	r18, 0x07	; 7
 630:	25 bd       	out	0x25, r18	; 37
 632:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	58 e3       	ldi	r21, 0x38	; 56
 63e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
 642:	6b 01       	movw	r12, r22
 644:	7c 01       	movw	r14, r24
 646:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fixunssfsi>
 64a:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <Timer2_u8OVCounter>
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 658:	9b 01       	movw	r18, r22
 65a:	ac 01       	movw	r20, r24
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 a0 07 	call	0xf40	; 0xf40 <__subsf3>
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	9f e3       	ldi	r25, 0x3F	; 63
 670:	0e 94 a0 07 	call	0xf40	; 0xf40 <__subsf3>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	53 e4       	ldi	r21, 0x43	; 67
 67c:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
 680:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fixunssfsi>
 684:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <Timer2_u8LoadVal>
 688:	64 bd       	out	0x24, r22	; 36
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	01 c0       	rjmp	.+2      	; 0x690 <Timer2_enumSetTimer_OV+0x234>
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	99 b7       	in	r25, 0x39	; 57
 692:	90 64       	ori	r25, 0x40	; 64
 694:	99 bf       	out	0x39, r25	; 57
 696:	9f b7       	in	r25, 0x3f	; 63
 698:	90 68       	ori	r25, 0x80	; 128
 69a:	9f bf       	out	0x3f, r25	; 63
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	08 95       	ret

Disassembly of section .text.TIMER2_enuSetOVFINT:

00000f2c <TIMER2_enuSetOVFINT>:
		Timers_ErrorSTATUS_t Local_enuReturnStatus = Timers_enuOK ;
	
		/**
		*@ check if the user pass correct function or not
		*/
		if( ptr == NULL )
 f2c:	00 97       	sbiw	r24, 0x00	; 0
 f2e:	31 f0       	breq	.+12     	; 0xf3c <TIMER2_enuSetOVFINT+0x10>
		{
			Local_enuReturnStatus = Timers_enuNOK ;
		}
		else
		{
			Timer2_AddOVF_CallBack = ptr ;
 f30:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <Timer2_AddOVF_CallBack+0x1>
 f34:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Timer2_AddOVF_CallBack>
Timers_ErrorSTATUS_t TIMER2_enuSetOVFINT(void(*ptr)(void))
{
		/**
		*@ return variable to check the behavior of the function
		*/
		Timers_ErrorSTATUS_t Local_enuReturnStatus = Timers_enuOK ;
 f38:	80 e0       	ldi	r24, 0x00	; 0
 f3a:	08 95       	ret
		/**
		*@ check if the user pass correct function or not
		*/
		if( ptr == NULL )
		{
			Local_enuReturnStatus = Timers_enuNOK ;
 f3c:	81 e0       	ldi	r24, 0x01	; 1
	



return Local_enuReturnStatus ;		
}/*TIMER2_enuSetOVFINT*/
 f3e:	08 95       	ret

Disassembly of section .text.__vector_11:

00000a42 <__vector_11>:
	



return Local_enuReturnStatus ;		
}/*TIMER1_enuSetINP_CAP_INT*/
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
 a64:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Timer0_u8Counter>
 a68:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <Timer0_u8OVCounter>
 a6c:	89 13       	cpse	r24, r25
 a6e:	0b c0       	rjmp	.+22     	; 0xa86 <__vector_11+0x44>
 a70:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Timer0_AddOVF_CallBack>
 a74:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Timer0_AddOVF_CallBack+0x1>
 a78:	09 95       	icall
 a7a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Timer0_u8LoadVal>
 a7e:	82 bf       	out	0x32, r24	; 50
 a80:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <Timer0_u8Counter>
 a84:	03 c0       	rjmp	.+6      	; 0xa8c <__vector_11+0x4a>
 a86:	8f 5f       	subi	r24, 0xFF	; 255
 a88:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Timer0_u8Counter>
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

Disassembly of section .text.__vector_10:

00000cde <__vector_10>:
 cde:	1f 92       	push	r1
 ce0:	0f 92       	push	r0
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	0f 92       	push	r0
 ce6:	11 24       	eor	r1, r1
 ce8:	2f 93       	push	r18
 cea:	3f 93       	push	r19
 cec:	4f 93       	push	r20
 cee:	5f 93       	push	r21
 cf0:	6f 93       	push	r22
 cf2:	7f 93       	push	r23
 cf4:	8f 93       	push	r24
 cf6:	9f 93       	push	r25
 cf8:	af 93       	push	r26
 cfa:	bf 93       	push	r27
 cfc:	ef 93       	push	r30
 cfe:	ff 93       	push	r31
 d00:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Timer0_AddCTC_CallBack>
 d04:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Timer0_AddCTC_CallBack+0x1>
 d08:	09 95       	icall
 d0a:	ff 91       	pop	r31
 d0c:	ef 91       	pop	r30
 d0e:	bf 91       	pop	r27
 d10:	af 91       	pop	r26
 d12:	9f 91       	pop	r25
 d14:	8f 91       	pop	r24
 d16:	7f 91       	pop	r23
 d18:	6f 91       	pop	r22
 d1a:	5f 91       	pop	r21
 d1c:	4f 91       	pop	r20
 d1e:	3f 91       	pop	r19
 d20:	2f 91       	pop	r18
 d22:	0f 90       	pop	r0
 d24:	0f be       	out	0x3f, r0	; 63
 d26:	0f 90       	pop	r0
 d28:	1f 90       	pop	r1
 d2a:	18 95       	reti

Disassembly of section .text.__vector_9:

000009d2 <__vector_9>:
 9d2:	1f 92       	push	r1
 9d4:	0f 92       	push	r0
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	0f 92       	push	r0
 9da:	11 24       	eor	r1, r1
 9dc:	2f 93       	push	r18
 9de:	3f 93       	push	r19
 9e0:	4f 93       	push	r20
 9e2:	5f 93       	push	r21
 9e4:	6f 93       	push	r22
 9e6:	7f 93       	push	r23
 9e8:	8f 93       	push	r24
 9ea:	9f 93       	push	r25
 9ec:	af 93       	push	r26
 9ee:	bf 93       	push	r27
 9f0:	ef 93       	push	r30
 9f2:	ff 93       	push	r31
 9f4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Timer1_u8Counter>
 9f8:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Timer1_u8OVCounter>
 9fc:	89 13       	cpse	r24, r25
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <__vector_9+0x48>
 a00:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Timer1_AddOVF_CallBack>
 a04:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Timer1_AddOVF_CallBack+0x1>
 a08:	09 95       	icall
 a0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Timer1_u8LoadVal>
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	9d bd       	out	0x2d, r25	; 45
 a12:	8c bd       	out	0x2c, r24	; 44
 a14:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <Timer1_u8Counter>
 a18:	03 c0       	rjmp	.+6      	; 0xa20 <__vector_9+0x4e>
 a1a:	8f 5f       	subi	r24, 0xFF	; 255
 a1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Timer1_u8Counter>
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

Disassembly of section .text.__vector_7:

00000d2c <__vector_7>:
 d2c:	1f 92       	push	r1
 d2e:	0f 92       	push	r0
 d30:	0f b6       	in	r0, 0x3f	; 63
 d32:	0f 92       	push	r0
 d34:	11 24       	eor	r1, r1
 d36:	2f 93       	push	r18
 d38:	3f 93       	push	r19
 d3a:	4f 93       	push	r20
 d3c:	5f 93       	push	r21
 d3e:	6f 93       	push	r22
 d40:	7f 93       	push	r23
 d42:	8f 93       	push	r24
 d44:	9f 93       	push	r25
 d46:	af 93       	push	r26
 d48:	bf 93       	push	r27
 d4a:	ef 93       	push	r30
 d4c:	ff 93       	push	r31
 d4e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Timer1_AddCTC_CHA_CallBack>
 d52:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <Timer1_AddCTC_CHA_CallBack+0x1>
 d56:	09 95       	icall
 d58:	ff 91       	pop	r31
 d5a:	ef 91       	pop	r30
 d5c:	bf 91       	pop	r27
 d5e:	af 91       	pop	r26
 d60:	9f 91       	pop	r25
 d62:	8f 91       	pop	r24
 d64:	7f 91       	pop	r23
 d66:	6f 91       	pop	r22
 d68:	5f 91       	pop	r21
 d6a:	4f 91       	pop	r20
 d6c:	3f 91       	pop	r19
 d6e:	2f 91       	pop	r18
 d70:	0f 90       	pop	r0
 d72:	0f be       	out	0x3f, r0	; 63
 d74:	0f 90       	pop	r0
 d76:	1f 90       	pop	r1
 d78:	18 95       	reti

Disassembly of section .text.__vector_8:

00000d7a <__vector_8>:
 d7a:	1f 92       	push	r1
 d7c:	0f 92       	push	r0
 d7e:	0f b6       	in	r0, 0x3f	; 63
 d80:	0f 92       	push	r0
 d82:	11 24       	eor	r1, r1
 d84:	2f 93       	push	r18
 d86:	3f 93       	push	r19
 d88:	4f 93       	push	r20
 d8a:	5f 93       	push	r21
 d8c:	6f 93       	push	r22
 d8e:	7f 93       	push	r23
 d90:	8f 93       	push	r24
 d92:	9f 93       	push	r25
 d94:	af 93       	push	r26
 d96:	bf 93       	push	r27
 d98:	ef 93       	push	r30
 d9a:	ff 93       	push	r31
 d9c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer1_AddCTC_CHB_CallBack>
 da0:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer1_AddCTC_CHB_CallBack+0x1>
 da4:	09 95       	icall
 da6:	ff 91       	pop	r31
 da8:	ef 91       	pop	r30
 daa:	bf 91       	pop	r27
 dac:	af 91       	pop	r26
 dae:	9f 91       	pop	r25
 db0:	8f 91       	pop	r24
 db2:	7f 91       	pop	r23
 db4:	6f 91       	pop	r22
 db6:	5f 91       	pop	r21
 db8:	4f 91       	pop	r20
 dba:	3f 91       	pop	r19
 dbc:	2f 91       	pop	r18
 dbe:	0f 90       	pop	r0
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	0f 90       	pop	r0
 dc4:	1f 90       	pop	r1
 dc6:	18 95       	reti

Disassembly of section .text.__vector_6:

00000dc8 <__vector_6>:
 dc8:	1f 92       	push	r1
 dca:	0f 92       	push	r0
 dcc:	0f b6       	in	r0, 0x3f	; 63
 dce:	0f 92       	push	r0
 dd0:	11 24       	eor	r1, r1
 dd2:	2f 93       	push	r18
 dd4:	3f 93       	push	r19
 dd6:	4f 93       	push	r20
 dd8:	5f 93       	push	r21
 dda:	6f 93       	push	r22
 ddc:	7f 93       	push	r23
 dde:	8f 93       	push	r24
 de0:	9f 93       	push	r25
 de2:	af 93       	push	r26
 de4:	bf 93       	push	r27
 de6:	ef 93       	push	r30
 de8:	ff 93       	push	r31
 dea:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_Add_INP_CAP_CallBack>
 dee:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_Add_INP_CAP_CallBack+0x1>
 df2:	09 95       	icall
 df4:	ff 91       	pop	r31
 df6:	ef 91       	pop	r30
 df8:	bf 91       	pop	r27
 dfa:	af 91       	pop	r26
 dfc:	9f 91       	pop	r25
 dfe:	8f 91       	pop	r24
 e00:	7f 91       	pop	r23
 e02:	6f 91       	pop	r22
 e04:	5f 91       	pop	r21
 e06:	4f 91       	pop	r20
 e08:	3f 91       	pop	r19
 e0a:	2f 91       	pop	r18
 e0c:	0f 90       	pop	r0
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	0f 90       	pop	r0
 e12:	1f 90       	pop	r1
 e14:	18 95       	reti

Disassembly of section .text.__vector_5:

00000aae <__vector_5>:
 aae:	1f 92       	push	r1
 ab0:	0f 92       	push	r0
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	0f 92       	push	r0
 ab6:	11 24       	eor	r1, r1
 ab8:	2f 93       	push	r18
 aba:	3f 93       	push	r19
 abc:	4f 93       	push	r20
 abe:	5f 93       	push	r21
 ac0:	6f 93       	push	r22
 ac2:	7f 93       	push	r23
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	af 93       	push	r26
 aca:	bf 93       	push	r27
 acc:	ef 93       	push	r30
 ace:	ff 93       	push	r31
 ad0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Timer2_u8Counter>
 ad4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Timer2_u8OVCounter>
 ad8:	89 13       	cpse	r24, r25
 ada:	0b c0       	rjmp	.+22     	; 0xaf2 <__vector_5+0x44>
 adc:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer2_AddOVF_CallBack>
 ae0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer2_AddOVF_CallBack+0x1>
 ae4:	09 95       	icall
 ae6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Timer2_u8LoadVal>
 aea:	84 bd       	out	0x24, r24	; 36
 aec:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <Timer2_u8Counter>
 af0:	03 c0       	rjmp	.+6      	; 0xaf8 <__vector_5+0x4a>
 af2:	8f 5f       	subi	r24, 0xFF	; 255
 af4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <Timer2_u8Counter>
 af8:	ff 91       	pop	r31
 afa:	ef 91       	pop	r30
 afc:	bf 91       	pop	r27
 afe:	af 91       	pop	r26
 b00:	9f 91       	pop	r25
 b02:	8f 91       	pop	r24
 b04:	7f 91       	pop	r23
 b06:	6f 91       	pop	r22
 b08:	5f 91       	pop	r21
 b0a:	4f 91       	pop	r20
 b0c:	3f 91       	pop	r19
 b0e:	2f 91       	pop	r18
 b10:	0f 90       	pop	r0
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	0f 90       	pop	r0
 b16:	1f 90       	pop	r1
 b18:	18 95       	reti

Disassembly of section .text.__vector_4:

00000e16 <__vector_4>:
 e16:	1f 92       	push	r1
 e18:	0f 92       	push	r0
 e1a:	0f b6       	in	r0, 0x3f	; 63
 e1c:	0f 92       	push	r0
 e1e:	11 24       	eor	r1, r1
 e20:	2f 93       	push	r18
 e22:	3f 93       	push	r19
 e24:	4f 93       	push	r20
 e26:	5f 93       	push	r21
 e28:	6f 93       	push	r22
 e2a:	7f 93       	push	r23
 e2c:	8f 93       	push	r24
 e2e:	9f 93       	push	r25
 e30:	af 93       	push	r26
 e32:	bf 93       	push	r27
 e34:	ef 93       	push	r30
 e36:	ff 93       	push	r31
 e38:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer2_AddCTC_CallBack>
 e3c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer2_AddCTC_CallBack+0x1>
 e40:	09 95       	icall
 e42:	ff 91       	pop	r31
 e44:	ef 91       	pop	r30
 e46:	bf 91       	pop	r27
 e48:	af 91       	pop	r26
 e4a:	9f 91       	pop	r25
 e4c:	8f 91       	pop	r24
 e4e:	7f 91       	pop	r23
 e50:	6f 91       	pop	r22
 e52:	5f 91       	pop	r21
 e54:	4f 91       	pop	r20
 e56:	3f 91       	pop	r19
 e58:	2f 91       	pop	r18
 e5a:	0f 90       	pop	r0
 e5c:	0f be       	out	0x3f, r0	; 63
 e5e:	0f 90       	pop	r0
 e60:	1f 90       	pop	r1
 e62:	18 95       	reti

Disassembly of section .text:

00000f40 <__subsf3>:
 f40:	50 58       	subi	r21, 0x80	; 128

00000f42 <__addsf3>:
 f42:	bb 27       	eor	r27, r27
 f44:	aa 27       	eor	r26, r26
 f46:	0e 94 45 04 	call	0x88a	; 0x88a <__addsf3x>
 f4a:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_round>

Disassembly of section .text:

0000088a <__addsf3x>:
 88a:	11 c0       	rjmp	.+34     	; 0x8ae <__addsf3x+0x24>
 88c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscA>
 890:	38 f0       	brcs	.+14     	; 0x8a0 <__addsf3x+0x16>
 892:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscB>
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__addsf3x+0x16>
 898:	39 f4       	brne	.+14     	; 0x8a8 <__addsf3x+0x1e>
 89a:	9f 3f       	cpi	r25, 0xFF	; 255
 89c:	19 f4       	brne	.+6      	; 0x8a4 <__addsf3x+0x1a>
 89e:	26 f4       	brtc	.+8      	; 0x8a8 <__addsf3x+0x1e>
 8a0:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_nan>
 8a4:	0e f4       	brtc	.+2      	; 0x8a8 <__addsf3x+0x1e>
 8a6:	e0 95       	com	r30
 8a8:	e7 fb       	bst	r30, 7
 8aa:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_inf>
 8ae:	e9 2f       	mov	r30, r25
 8b0:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_split3>
 8b4:	58 f3       	brcs	.-42     	; 0x88c <__addsf3x+0x2>
 8b6:	ba 17       	cp	r27, r26
 8b8:	62 07       	cpc	r22, r18
 8ba:	73 07       	cpc	r23, r19
 8bc:	84 07       	cpc	r24, r20
 8be:	95 07       	cpc	r25, r21
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__addsf3x+0x40>
 8c2:	79 f4       	brne	.+30     	; 0x8e2 <__addsf3x+0x58>
 8c4:	a6 f5       	brtc	.+104    	; 0x92e <__addsf3x+0xa4>
 8c6:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_zero>
 8ca:	0e f4       	brtc	.+2      	; 0x8ce <__addsf3x+0x44>
 8cc:	e0 95       	com	r30
 8ce:	0b 2e       	mov	r0, r27
 8d0:	ba 2f       	mov	r27, r26
 8d2:	a0 2d       	mov	r26, r0
 8d4:	0b 01       	movw	r0, r22
 8d6:	b9 01       	movw	r22, r18
 8d8:	90 01       	movw	r18, r0
 8da:	0c 01       	movw	r0, r24
 8dc:	ca 01       	movw	r24, r20
 8de:	a0 01       	movw	r20, r0
 8e0:	11 24       	eor	r1, r1
 8e2:	ff 27       	eor	r31, r31
 8e4:	59 1b       	sub	r21, r25
 8e6:	99 f0       	breq	.+38     	; 0x90e <__addsf3x+0x84>
 8e8:	59 3f       	cpi	r21, 0xF9	; 249
 8ea:	50 f4       	brcc	.+20     	; 0x900 <__addsf3x+0x76>
 8ec:	50 3e       	cpi	r21, 0xE0	; 224
 8ee:	68 f1       	brcs	.+90     	; 0x94a <__addsf3x+0xc0>
 8f0:	1a 16       	cp	r1, r26
 8f2:	f0 40       	sbci	r31, 0x00	; 0
 8f4:	a2 2f       	mov	r26, r18
 8f6:	23 2f       	mov	r18, r19
 8f8:	34 2f       	mov	r19, r20
 8fa:	44 27       	eor	r20, r20
 8fc:	58 5f       	subi	r21, 0xF8	; 248
 8fe:	f3 cf       	rjmp	.-26     	; 0x8e6 <__addsf3x+0x5c>
 900:	46 95       	lsr	r20
 902:	37 95       	ror	r19
 904:	27 95       	ror	r18
 906:	a7 95       	ror	r26
 908:	f0 40       	sbci	r31, 0x00	; 0
 90a:	53 95       	inc	r21
 90c:	c9 f7       	brne	.-14     	; 0x900 <__addsf3x+0x76>
 90e:	7e f4       	brtc	.+30     	; 0x92e <__addsf3x+0xa4>
 910:	1f 16       	cp	r1, r31
 912:	ba 0b       	sbc	r27, r26
 914:	62 0b       	sbc	r22, r18
 916:	73 0b       	sbc	r23, r19
 918:	84 0b       	sbc	r24, r20
 91a:	ba f0       	brmi	.+46     	; 0x94a <__addsf3x+0xc0>
 91c:	91 50       	subi	r25, 0x01	; 1
 91e:	a1 f0       	breq	.+40     	; 0x948 <__addsf3x+0xbe>
 920:	ff 0f       	add	r31, r31
 922:	bb 1f       	adc	r27, r27
 924:	66 1f       	adc	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	c2 f7       	brpl	.-16     	; 0x91c <__addsf3x+0x92>
 92c:	0e c0       	rjmp	.+28     	; 0x94a <__addsf3x+0xc0>
 92e:	ba 0f       	add	r27, r26
 930:	62 1f       	adc	r22, r18
 932:	73 1f       	adc	r23, r19
 934:	84 1f       	adc	r24, r20
 936:	48 f4       	brcc	.+18     	; 0x94a <__addsf3x+0xc0>
 938:	87 95       	ror	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b7 95       	ror	r27
 940:	f7 95       	ror	r31
 942:	9e 3f       	cpi	r25, 0xFE	; 254
 944:	08 f0       	brcs	.+2      	; 0x948 <__addsf3x+0xbe>
 946:	b0 cf       	rjmp	.-160    	; 0x8a8 <__addsf3x+0x1e>
 948:	93 95       	inc	r25
 94a:	88 0f       	add	r24, r24
 94c:	08 f0       	brcs	.+2      	; 0x950 <__addsf3x+0xc6>
 94e:	99 27       	eor	r25, r25
 950:	ee 0f       	add	r30, r30
 952:	97 95       	ror	r25
 954:	87 95       	ror	r24
 956:	08 95       	ret

Disassembly of section .text:

00000b84 <__fixunssfsi>:
 b84:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fp_splitA>
 b88:	88 f0       	brcs	.+34     	; 0xbac <__fixunssfsi+0x28>
 b8a:	9f 57       	subi	r25, 0x7F	; 127
 b8c:	98 f0       	brcs	.+38     	; 0xbb4 <__fixunssfsi+0x30>
 b8e:	b9 2f       	mov	r27, r25
 b90:	99 27       	eor	r25, r25
 b92:	b7 51       	subi	r27, 0x17	; 23
 b94:	b0 f0       	brcs	.+44     	; 0xbc2 <__fixunssfsi+0x3e>
 b96:	e1 f0       	breq	.+56     	; 0xbd0 <__fixunssfsi+0x4c>
 b98:	66 0f       	add	r22, r22
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 1f       	adc	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	1a f0       	brmi	.+6      	; 0xba8 <__fixunssfsi+0x24>
 ba2:	ba 95       	dec	r27
 ba4:	c9 f7       	brne	.-14     	; 0xb98 <__fixunssfsi+0x14>
 ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <__fixunssfsi+0x4c>
 ba8:	b1 30       	cpi	r27, 0x01	; 1
 baa:	91 f0       	breq	.+36     	; 0xbd0 <__fixunssfsi+0x4c>
 bac:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_zero>
 bb0:	b1 e0       	ldi	r27, 0x01	; 1
 bb2:	08 95       	ret
 bb4:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_zero>
 bb8:	67 2f       	mov	r22, r23
 bba:	78 2f       	mov	r23, r24
 bbc:	88 27       	eor	r24, r24
 bbe:	b8 5f       	subi	r27, 0xF8	; 248
 bc0:	39 f0       	breq	.+14     	; 0xbd0 <__fixunssfsi+0x4c>
 bc2:	b9 3f       	cpi	r27, 0xF9	; 249
 bc4:	cc f3       	brlt	.-14     	; 0xbb8 <__fixunssfsi+0x34>
 bc6:	86 95       	lsr	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b3 95       	inc	r27
 bce:	d9 f7       	brne	.-10     	; 0xbc6 <__fixunssfsi+0x42>
 bd0:	3e f4       	brtc	.+14     	; 0xbe0 <__fixunssfsi+0x5c>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	08 95       	ret

Disassembly of section .text:

00000958 <__floatunsisf>:
 958:	e8 94       	clt
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
 95c:	97 fb       	bst	r25, 7
 95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
 960:	90 95       	com	r25
 962:	80 95       	com	r24
 964:	70 95       	com	r23
 966:	61 95       	neg	r22
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	99 23       	and	r25, r25
 970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
 972:	f9 2f       	mov	r31, r25
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	bb 27       	eor	r27, r27
 978:	93 95       	inc	r25
 97a:	f6 95       	lsr	r31
 97c:	87 95       	ror	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f1 11       	cpse	r31, r1
 986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
 988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
 98a:	bb 0f       	add	r27, r27
 98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
 98e:	60 ff       	sbrs	r22, 0
 990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
 99c:	88 23       	and	r24, r24
 99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
 9a4:	77 23       	and	r23, r23
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
 9a8:	9e e8       	ldi	r25, 0x8E	; 142
 9aa:	87 2f       	mov	r24, r23
 9ac:	76 2f       	mov	r23, r22
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
 9b0:	66 23       	and	r22, r22
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
 9b4:	96 e8       	ldi	r25, 0x86	; 134
 9b6:	86 2f       	mov	r24, r22
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
 9be:	9a 95       	dec	r25
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
 9c8:	88 0f       	add	r24, r24
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

Disassembly of section .text:

00000f78 <__fp_inf>:
 f78:	97 f9       	bld	r25, 7
 f7a:	9f 67       	ori	r25, 0x7F	; 127
 f7c:	80 e8       	ldi	r24, 0x80	; 128
 f7e:	70 e0       	ldi	r23, 0x00	; 0
 f80:	60 e0       	ldi	r22, 0x00	; 0
 f82:	08 95       	ret

Disassembly of section .text:

00000f8c <__fp_nan>:
 f8c:	9f ef       	ldi	r25, 0xFF	; 255
 f8e:	80 ec       	ldi	r24, 0xC0	; 192
 f90:	08 95       	ret

Disassembly of section .text:

00000f4e <__fp_pscA>:
 f4e:	00 24       	eor	r0, r0
 f50:	0a 94       	dec	r0
 f52:	16 16       	cp	r1, r22
 f54:	17 06       	cpc	r1, r23
 f56:	18 06       	cpc	r1, r24
 f58:	09 06       	cpc	r0, r25
 f5a:	08 95       	ret

Disassembly of section .text:

00000f5c <__fp_pscB>:
 f5c:	00 24       	eor	r0, r0
 f5e:	0a 94       	dec	r0
 f60:	12 16       	cp	r1, r18
 f62:	13 06       	cpc	r1, r19
 f64:	14 06       	cpc	r1, r20
 f66:	05 06       	cpc	r0, r21
 f68:	08 95       	ret

Disassembly of section .text:

00000eda <__fp_round>:
 eda:	09 2e       	mov	r0, r25
 edc:	03 94       	inc	r0
 ede:	00 0c       	add	r0, r0
 ee0:	11 f4       	brne	.+4      	; 0xee6 <__fp_round+0xc>
 ee2:	88 23       	and	r24, r24
 ee4:	52 f0       	brmi	.+20     	; 0xefa <__fp_round+0x20>
 ee6:	bb 0f       	add	r27, r27
 ee8:	40 f4       	brcc	.+16     	; 0xefa <__fp_round+0x20>
 eea:	bf 2b       	or	r27, r31
 eec:	11 f4       	brne	.+4      	; 0xef2 <__fp_round+0x18>
 eee:	60 ff       	sbrs	r22, 0
 ef0:	04 c0       	rjmp	.+8      	; 0xefa <__fp_round+0x20>
 ef2:	6f 5f       	subi	r22, 0xFF	; 255
 ef4:	7f 4f       	sbci	r23, 0xFF	; 255
 ef6:	8f 4f       	sbci	r24, 0xFF	; 255
 ef8:	9f 4f       	sbci	r25, 0xFF	; 255
 efa:	08 95       	ret

Disassembly of section .text:

00000e64 <__fp_split3>:
 e64:	57 fd       	sbrc	r21, 7
 e66:	90 58       	subi	r25, 0x80	; 128
 e68:	44 0f       	add	r20, r20
 e6a:	55 1f       	adc	r21, r21
 e6c:	59 f0       	breq	.+22     	; 0xe84 <__fp_splitA+0x10>
 e6e:	5f 3f       	cpi	r21, 0xFF	; 255
 e70:	71 f0       	breq	.+28     	; 0xe8e <__fp_splitA+0x1a>
 e72:	47 95       	ror	r20

00000e74 <__fp_splitA>:
 e74:	88 0f       	add	r24, r24
 e76:	97 fb       	bst	r25, 7
 e78:	99 1f       	adc	r25, r25
 e7a:	61 f0       	breq	.+24     	; 0xe94 <__fp_splitA+0x20>
 e7c:	9f 3f       	cpi	r25, 0xFF	; 255
 e7e:	79 f0       	breq	.+30     	; 0xe9e <__fp_splitA+0x2a>
 e80:	87 95       	ror	r24
 e82:	08 95       	ret
 e84:	12 16       	cp	r1, r18
 e86:	13 06       	cpc	r1, r19
 e88:	14 06       	cpc	r1, r20
 e8a:	55 1f       	adc	r21, r21
 e8c:	f2 cf       	rjmp	.-28     	; 0xe72 <__fp_split3+0xe>
 e8e:	46 95       	lsr	r20
 e90:	f1 df       	rcall	.-30     	; 0xe74 <__fp_splitA>
 e92:	08 c0       	rjmp	.+16     	; 0xea4 <__fp_splitA+0x30>
 e94:	16 16       	cp	r1, r22
 e96:	17 06       	cpc	r1, r23
 e98:	18 06       	cpc	r1, r24
 e9a:	99 1f       	adc	r25, r25
 e9c:	f1 cf       	rjmp	.-30     	; 0xe80 <__fp_splitA+0xc>
 e9e:	86 95       	lsr	r24
 ea0:	71 05       	cpc	r23, r1
 ea2:	61 05       	cpc	r22, r1
 ea4:	08 94       	sec
 ea6:	08 95       	ret

Disassembly of section .text:

00000f6a <__fp_zero>:
 f6a:	e8 94       	clt

00000f6c <__fp_szero>:
 f6c:	bb 27       	eor	r27, r27
 f6e:	66 27       	eor	r22, r22
 f70:	77 27       	eor	r23, r23
 f72:	cb 01       	movw	r24, r22
 f74:	97 f9       	bld	r25, 7
 f76:	08 95       	ret

Disassembly of section .text:

00000f84 <__mulsf3>:
 f84:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__mulsf3x>
 f88:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_round>

Disassembly of section .text:

000007b6 <__mulsf3x>:
 7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <__mulsf3x+0x20>
 7b8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscA>
 7bc:	38 f0       	brcs	.+14     	; 0x7cc <__mulsf3x+0x16>
 7be:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscB>
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__mulsf3x+0x16>
 7c4:	95 23       	and	r25, r21
 7c6:	11 f0       	breq	.+4      	; 0x7cc <__mulsf3x+0x16>
 7c8:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_inf>
 7cc:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_nan>
 7d0:	11 24       	eor	r1, r1
 7d2:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
 7d6:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_split3>
 7da:	70 f3       	brcs	.-36     	; 0x7b8 <__mulsf3x+0x2>

000007dc <__mulsf3_pse>:
 7dc:	95 9f       	mul	r25, r21
 7de:	c1 f3       	breq	.-16     	; 0x7d0 <__mulsf3x+0x1a>
 7e0:	95 0f       	add	r25, r21
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	55 1f       	adc	r21, r21
 7e6:	62 9f       	mul	r22, r18
 7e8:	f0 01       	movw	r30, r0
 7ea:	72 9f       	mul	r23, r18
 7ec:	bb 27       	eor	r27, r27
 7ee:	f0 0d       	add	r31, r0
 7f0:	b1 1d       	adc	r27, r1
 7f2:	63 9f       	mul	r22, r19
 7f4:	aa 27       	eor	r26, r26
 7f6:	f0 0d       	add	r31, r0
 7f8:	b1 1d       	adc	r27, r1
 7fa:	aa 1f       	adc	r26, r26
 7fc:	64 9f       	mul	r22, r20
 7fe:	66 27       	eor	r22, r22
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	66 1f       	adc	r22, r22
 806:	82 9f       	mul	r24, r18
 808:	22 27       	eor	r18, r18
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	62 1f       	adc	r22, r18
 810:	73 9f       	mul	r23, r19
 812:	b0 0d       	add	r27, r0
 814:	a1 1d       	adc	r26, r1
 816:	62 1f       	adc	r22, r18
 818:	83 9f       	mul	r24, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	22 1f       	adc	r18, r18
 820:	74 9f       	mul	r23, r20
 822:	33 27       	eor	r19, r19
 824:	a0 0d       	add	r26, r0
 826:	61 1d       	adc	r22, r1
 828:	23 1f       	adc	r18, r19
 82a:	84 9f       	mul	r24, r20
 82c:	60 0d       	add	r22, r0
 82e:	21 1d       	adc	r18, r1
 830:	82 2f       	mov	r24, r18
 832:	76 2f       	mov	r23, r22
 834:	6a 2f       	mov	r22, r26
 836:	11 24       	eor	r1, r1
 838:	9f 57       	subi	r25, 0x7F	; 127
 83a:	50 40       	sbci	r21, 0x00	; 0
 83c:	9a f0       	brmi	.+38     	; 0x864 <__stack+0x5>
 83e:	f1 f0       	breq	.+60     	; 0x87c <__stack+0x1d>
 840:	88 23       	and	r24, r24
 842:	4a f0       	brmi	.+18     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	bb 1f       	adc	r27, r27
 84a:	66 1f       	adc	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	91 50       	subi	r25, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	a9 f7       	brne	.-22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	80 f0       	brcs	.+32     	; 0x87c <__stack+0x1d>
 85c:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_inf>
 860:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	e4 f3       	brlt	.-8      	; 0x860 <__stack+0x1>
 868:	98 3e       	cpi	r25, 0xE8	; 232
 86a:	d4 f3       	brlt	.-12     	; 0x860 <__stack+0x1>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f7 95       	ror	r31
 876:	e7 95       	ror	r30
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	c1 f7       	brne	.-16     	; 0x86c <__stack+0xd>
 87c:	fe 2b       	or	r31, r30
 87e:	88 0f       	add	r24, r24
 880:	91 1d       	adc	r25, r1
 882:	96 95       	lsr	r25
 884:	87 95       	ror	r24
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000f9a <_fini>:
 f9a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f9c <__funcs_on_exit>:
 f9c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f9e <__simulator_exit>:
 f9e:	08 95       	ret

Disassembly of section .text.exit:

00000f16 <exit>:
 f16:	ec 01       	movw	r28, r24
 f18:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__funcs_on_exit>
 f1c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_fini>
 f20:	ce 01       	movw	r24, r28
 f22:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__simulator_exit>
 f26:	ce 01       	movw	r24, r28
 f28:	0e 94 cb 07 	call	0xf96	; 0xf96 <_Exit>

Disassembly of section .text._Exit:

00000f96 <_Exit>:
 f96:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
