
LCD_runing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000626  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000663  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cfd  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083e  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae4  00000000  00000000  00002c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00003774  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000285  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ef6  00000000  00000000  00003c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000584  00000584  00000618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 00000009  0000006c  0000006c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    0000008a  00000246  00000246  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LOC_VidSendInstruction 00000058  0000034c  0000034c  000003e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_VidInit 0000007c  000002d0  000002d0  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_VidDisplayChar 00000058  000003a4  000003a4  00000438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_VidSendCommand 00000058  000003fc  000003fc  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_VidClearScreen 00000014  00000570  00000570  00000604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_VidDisplayString 00000036  000004a2  000004a2  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_VidGoToRowCol 0000002e  000004d8  000004d8  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_VidShiftRight 0000002e  00000506  00000506  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DIO_VidSetPortDir 0000004e  00000454  00000454  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DIO_VidSetPinDir 000000f0  00000076  00000076  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.DIO_VidSetPortValue 00000026  00000534  00000534  000005c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.DIO_VidSetPinValue 000000e0  00000166  00000166  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  0000058c  0000058c  00000620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000058e  0000058e  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  00000590  00000590  00000624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  0000055a  0000055a  000005ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000588  00000588  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
   8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
   c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  10:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  14:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  18:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  1c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  20:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  24:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  28:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  2c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  30:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  34:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  38:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  3c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  40:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  44:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  48:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  4c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
  50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 23 01 	call	0x246	; 0x246 <main>
  64:	0c 94 ad 02 	jmp	0x55a	; 0x55a <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000584 <__bad_interrupt>:
 584:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000246 <main>:



u32 main(){
	u8 i,j;
	DIO_VidSetPortValue(PORTC,0x00);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_VidSetPortValue>
	DIO_VidSetPortValue(PORTA,0x00);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_VidSetPortValue>

	LCD_VidClearScreen();
 256:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_VidClearScreen>
	LCD_VidInit();
 25a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_VidInit>
			LCD_VidGoToRowCol(0,10);
			LCD_VidDisplayString("pola\0");

				LCD_VidShiftRight(10);
				*/
				LCD_VidClearScreen();
 25e:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_VidClearScreen>

				LCD_VidGoToRowCol(0,10);
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_VidGoToRowCol>
		
				LCD_VidDisplayString(" Bishoy\0");
 26a:	6c e6       	ldi	r22, 0x6C	; 108
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_VidDisplayString>
				//LCD_VidGoToRowCol(0,3);
			//	LCD_VidDisplayInt(5);
				for(i=0;i<10;i++){
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	0d c0       	rjmp	.+26     	; 0x292 <main+0x4c>
	
				LCD_VidShiftRight(1);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 83 02 	call	0x506	; 0x506 <LCD_VidShiftRight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	80 e7       	ldi	r24, 0x70	; 112
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x3e>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x48>
 28e:	00 00       	nop
				LCD_VidGoToRowCol(0,10);
		
				LCD_VidDisplayString(" Bishoy\0");
				//LCD_VidGoToRowCol(0,3);
			//	LCD_VidDisplayInt(5);
				for(i=0;i<10;i++){
 290:	cf 5f       	subi	r28, 0xFF	; 255
 292:	ca 30       	cpi	r28, 0x0A	; 10
 294:	88 f3       	brcs	.-30     	; 0x278 <main+0x32>
				LCD_VidShiftRight(1);
		
				_delay_ms(100);
								}//for
			
			LCD_VidClearScreen();
 296:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_VidClearScreen>
				LCD_VidGoToRowCol(1,10);
 29a:	6a e0       	ldi	r22, 0x0A	; 10
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_VidGoToRowCol>
			
				LCD_VidDisplayString(" Bishoy\0");
 2a2:	6c e6       	ldi	r22, 0x6C	; 108
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_VidDisplayString>
			
				for(j=0;j<10;j++){
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <main+0x84>
					
								LCD_VidShiftRight(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 83 02 	call	0x506	; 0x506 <LCD_VidShiftRight>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	80 e7       	ldi	r24, 0x70	; 112
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x76>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x80>
 2c6:	00 00       	nop
			LCD_VidClearScreen();
				LCD_VidGoToRowCol(1,10);
			
				LCD_VidDisplayString(" Bishoy\0");
			
				for(j=0;j<10;j++){
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	ca 30       	cpi	r28, 0x0A	; 10
 2cc:	88 f3       	brcs	.-30     	; 0x2b0 <main+0x6a>
 2ce:	c7 cf       	rjmp	.-114    	; 0x25e <main+0x18>

Disassembly of section .text.LOC_VidSendInstruction:

0000034c <LOC_VidSendInstruction>:
 for(i=0 ; i<shift_num ;i++)
 {
  LCD_VidSendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(500);
 }
}
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <LOC_VidSendInstruction+0x1a>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LOC_VidSendInstruction+0x20>
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <LOC_VidSendInstruction+0x2c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LOC_VidSendInstruction+0x32>
 37e:	6c 2f       	mov	r22, r28
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_VidSetPortValue>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <LOC_VidSendInstruction+0x3c>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LOC_VidSendInstruction+0x42>
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <LOC_VidSendInstruction+0x4e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LOC_VidSendInstruction+0x54>
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

Disassembly of section .text.LCD_VidInit:

000002d0 <LCD_VidInit>:
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_VidSetPortDir>
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	0e 94 3b 00 	call	0x76	; 0x76 <DIO_VidSetPinDir>
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 3b 00 	call	0x76	; 0x76 <DIO_VidSetPinDir>
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	0e 94 3b 00 	call	0x76	; 0x76 <DIO_VidSetPinDir>
 2f6:	8f e5       	ldi	r24, 0x5F	; 95
 2f8:	9a ee       	ldi	r25, 0xEA	; 234
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_VidInit+0x2a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_VidInit+0x30>
 300:	00 00       	nop
 302:	8c e3       	ldi	r24, 0x3C	; 60
 304:	0e 94 a6 01 	call	0x34c	; 0x34c <LOC_VidSendInstruction>
 308:	8f e9       	ldi	r24, 0x9F	; 159
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_VidInit+0x3c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_VidInit+0x42>
 312:	00 00       	nop
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	0e 94 a6 01 	call	0x34c	; 0x34c <LOC_VidSendInstruction>
 31a:	8f e9       	ldi	r24, 0x9F	; 159
 31c:	9f e0       	ldi	r25, 0x0F	; 15
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_VidInit+0x4e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_VidInit+0x54>
 324:	00 00       	nop
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 a6 01 	call	0x34c	; 0x34c <LOC_VidSendInstruction>
 32c:	8f e9       	ldi	r24, 0x9F	; 159
 32e:	9f e0       	ldi	r25, 0x0F	; 15
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_VidInit+0x60>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_VidInit+0x66>
 336:	00 00       	nop
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 a6 01 	call	0x34c	; 0x34c <LOC_VidSendInstruction>
 33e:	8f e9       	ldi	r24, 0x9F	; 159
 340:	9f e0       	ldi	r25, 0x0F	; 15
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_VidInit+0x72>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_VidInit+0x78>
 348:	00 00       	nop
 34a:	08 95       	ret

Disassembly of section .text.LCD_VidDisplayChar:

000003a4 <LCD_VidDisplayChar>:
 3a4:	cf 93       	push	r28
 3a6:	c8 2f       	mov	r28, r24
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_VidDisplayChar+0x1a>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_VidDisplayChar+0x20>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_VidDisplayChar+0x2c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_VidDisplayChar+0x32>
 3d6:	6c 2f       	mov	r22, r28
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_VidSetPortValue>
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_VidDisplayChar+0x3c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_VidDisplayChar+0x42>
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_VidDisplayChar+0x4e>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_VidDisplayChar+0x54>
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

Disassembly of section .text.LCD_VidSendCommand:

000003fc <LCD_VidSendCommand>:
 3fc:	cf 93       	push	r28
 3fe:	c8 2f       	mov	r28, r24
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	8a 95       	dec	r24
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	6c 2f       	mov	r22, r28
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_VidSetPortValue>
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	8a 95       	dec	r24
 43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_VidSetPinValue>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	8a 95       	dec	r24
 44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	cf 91       	pop	r28
 452:	08 95       	ret

Disassembly of section .text.LCD_VidClearScreen:

00000570 <LCD_VidClearScreen>:

}

extern void LCD_VidClearScreen(void)
{
  LCD_VidSendCommand(DISPLAY_CLEAR);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_VidSendCommand>
 576:	8f e9       	ldi	r24, 0x9F	; 159
 578:	9f e0       	ldi	r25, 0x0F	; 15
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_VidClearScreen+0xa>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_VidClearScreen+0x10>
 580:	00 00       	nop
 582:	08 95       	ret

Disassembly of section .text.LCD_VidDisplayString:

000004a2 <LCD_VidDisplayString>:
 for(i=0 ; i<shift_num ;i++)
 {
  LCD_VidSendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(500);
 }
}
 4a2:	cf 92       	push	r12
 4a4:	df 92       	push	r13
 4a6:	ef 92       	push	r14
 4a8:	cf 93       	push	r28
 4aa:	6b 01       	movw	r12, r22
 4ac:	e8 2e       	mov	r14, r24
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <LCD_VidDisplayString+0x16>
 4b2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_VidDisplayChar>
 4b6:	cf 5f       	subi	r28, 0xFF	; 255
 4b8:	ae 2d       	mov	r26, r14
 4ba:	c6 01       	movw	r24, r12
 4bc:	8c 0f       	add	r24, r28
 4be:	91 1d       	adc	r25, r1
 4c0:	a1 1d       	adc	r26, r1
 4c2:	fc 01       	movw	r30, r24
 4c4:	84 91       	lpm	r24, Z
 4c6:	a7 fd       	sbrc	r26, 7
 4c8:	80 81       	ld	r24, Z
 4ca:	81 11       	cpse	r24, r1
 4cc:	f2 cf       	rjmp	.-28     	; 0x4b2 <LCD_VidDisplayString+0x10>
 4ce:	cf 91       	pop	r28
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	08 95       	ret

Disassembly of section .text.LCD_VidGoToRowCol:

000004d8 <LCD_VidGoToRowCol>:
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	31 f0       	breq	.+12     	; 0x4e8 <LCD_VidGoToRowCol+0x10>
 4dc:	70 f0       	brcs	.+28     	; 0x4fa <LCD_VidGoToRowCol+0x22>
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	31 f0       	breq	.+12     	; 0x4ee <LCD_VidGoToRowCol+0x16>
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <LCD_VidGoToRowCol+0x1c>
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <LCD_VidGoToRowCol+0x24>
 4e8:	90 e4       	ldi	r25, 0x40	; 64
 4ea:	96 0f       	add	r25, r22
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <LCD_VidGoToRowCol+0x24>
 4ee:	90 e1       	ldi	r25, 0x10	; 16
 4f0:	96 0f       	add	r25, r22
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <LCD_VidGoToRowCol+0x24>
 4f4:	90 e5       	ldi	r25, 0x50	; 80
 4f6:	96 0f       	add	r25, r22
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <LCD_VidGoToRowCol+0x24>
 4fa:	96 2f       	mov	r25, r22
 4fc:	89 2f       	mov	r24, r25
 4fe:	80 68       	ori	r24, 0x80	; 128
 500:	0e 94 a6 01 	call	0x34c	; 0x34c <LOC_VidSendInstruction>
 504:	08 95       	ret

Disassembly of section .text.LCD_VidShiftRight:

00000506 <LCD_VidShiftRight>:

extern void LCD_VidShiftRight(u8 shift_num)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	d8 2f       	mov	r29, r24
	for(u8 i=0;i <shift_num;i++)
 50c:	c0 e0       	ldi	r28, 0x00	; 0
 50e:	0d c0       	rjmp	.+26     	; 0x52a <LCD_VidShiftRight+0x24>
	{
      LCD_VidSendCommand(DISPLAY_SHIFT_RIGHT);
 510:	8c e1       	ldi	r24, 0x1C	; 28
 512:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_VidSendCommand>
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	84 e3       	ldi	r24, 0x34	; 52
 51a:	9c e0       	ldi	r25, 0x0C	; 12
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <LCD_VidShiftRight+0x16>
 524:	00 c0       	rjmp	.+0      	; 0x526 <LCD_VidShiftRight+0x20>
 526:	00 00       	nop
 }
}

extern void LCD_VidShiftRight(u8 shift_num)
{
	for(u8 i=0;i <shift_num;i++)
 528:	cf 5f       	subi	r28, 0xFF	; 255
 52a:	cd 17       	cp	r28, r29
 52c:	88 f3       	brcs	.-30     	; 0x510 <LCD_VidShiftRight+0xa>
	{
      LCD_VidSendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(500);
	}
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

Disassembly of section .text.DIO_VidSetPortDir:

00000454 <DIO_VidSetPortDir>:
#define PORTD_REGISTER *((volatile u8*) 0x32)
#define PIND_REGISTER  *((volatile u8*) 0x30)

void DIO_VidSetPortDir(u8 PortName, u8 PortDir)
{
	switch (PortName)
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	81 f0       	breq	.+32     	; 0x478 <DIO_VidSetPortDir+0x24>
 458:	18 f4       	brcc	.+6      	; 0x460 <DIO_VidSetPortDir+0xc>
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	31 f0       	breq	.+12     	; 0x46a <DIO_VidSetPortDir+0x16>
 45e:	08 95       	ret
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	89 f0       	breq	.+34     	; 0x486 <DIO_VidSetPortDir+0x32>
 464:	84 30       	cpi	r24, 0x04	; 4
 466:	b1 f0       	breq	.+44     	; 0x494 <DIO_VidSetPortDir+0x40>
 468:	08 95       	ret
	{
		case PORTA :
		{
			if(PortDir == INPUT)
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	11 f4       	brne	.+4      	; 0x472 <DIO_VidSetPortDir+0x1e>
			{
				DDRA_REGISTER = 0x00 ;
 46e:	1a ba       	out	0x1a, r1	; 26
 470:	08 95       	ret
			}
			else /*Direction is output*/
			{
				DDRA_REGISTER = 0xFF ;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	8a bb       	out	0x1a, r24	; 26
 476:	08 95       	ret
			}
		}break;

		case PORTB :
		{
			if(PortDir == INPUT)
 478:	61 30       	cpi	r22, 0x01	; 1
 47a:	11 f4       	brne	.+4      	; 0x480 <DIO_VidSetPortDir+0x2c>
			{
				DDRB_REGISTER = 0x00 ;
 47c:	17 ba       	out	0x17, r1	; 23
 47e:	08 95       	ret
			}
			else /*Direction is output*/
			{
				DDRB_REGISTER = 0xFF ;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	87 bb       	out	0x17, r24	; 23
 484:	08 95       	ret
			}
		}break;

		case PORTC :
		{
			if(PortDir == INPUT)
 486:	61 30       	cpi	r22, 0x01	; 1
 488:	11 f4       	brne	.+4      	; 0x48e <DIO_VidSetPortDir+0x3a>
			{
				DDRC_REGISTER = 0x00 ;
 48a:	14 ba       	out	0x14, r1	; 20
 48c:	08 95       	ret
			}
			else /*Direction is output*/
			{
				DDRC_REGISTER = 0xFF ;
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	84 bb       	out	0x14, r24	; 20
 492:	08 95       	ret
			}
		}break;

		case PORTD :
		{
			if(PortDir == INPUT)
 494:	61 30       	cpi	r22, 0x01	; 1
 496:	11 f4       	brne	.+4      	; 0x49c <DIO_VidSetPortDir+0x48>
			{
				DDRD_REGISTER = 0x00 ;
 498:	11 ba       	out	0x11, r1	; 17
 49a:	08 95       	ret
			}
			else /*Direction is output*/
			{
				DDRD_REGISTER = 0xFF ;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	81 bb       	out	0x11, r24	; 17
 4a0:	08 95       	ret

Disassembly of section .text.DIO_VidSetPinDir:

00000076 <DIO_VidSetPinDir>:
		}break;
	}
}

void DIO_VidSetPinDir(u8 PortName, u8 PinNo , u8 PinDir){
	switch (PortName)
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	29 f1       	breq	.+74     	; 0xc4 <DIO_VidSetPinDir+0x4e>
  7a:	18 f4       	brcc	.+6      	; 0x82 <DIO_VidSetPinDir+0xc>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	39 f0       	breq	.+14     	; 0x8e <DIO_VidSetPinDir+0x18>
  80:	08 95       	ret
  82:	83 30       	cpi	r24, 0x03	; 3
  84:	d1 f1       	breq	.+116    	; 0xfa <DIO_VidSetPinDir+0x84>
  86:	84 30       	cpi	r24, 0x04	; 4
  88:	09 f4       	brne	.+2      	; 0x8c <DIO_VidSetPinDir+0x16>
  8a:	52 c0       	rjmp	.+164    	; 0x130 <DIO_VidSetPinDir+0xba>
  8c:	08 95       	ret
	{
		case PORTA :
		{
			if (PinDir == INPUT)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	61 f4       	brne	.+24     	; 0xaa <DIO_VidSetPinDir+0x34>
			{
				clr_bit(DDRA_REGISTER ,PinNo);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <DIO_VidSetPinDir+0x28>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <DIO_VidSetPinDir+0x24>
  a2:	80 95       	com	r24
  a4:	82 23       	and	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
			}
			else if (PinDir == OUTPUT)
  aa:	41 11       	cpse	r20, r1
  ac:	5b c0       	rjmp	.+182    	; 0x164 <DIO_VidSetPinDir+0xee>
			{
				set_bit(DDRA_REGISTER , PinNo );
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_VidSetPinDir+0x44>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_VidSetPinDir+0x40>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret

		}break;

		case PORTB :
		{
			if (PinDir == INPUT)
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	61 f4       	brne	.+24     	; 0xe0 <DIO_VidSetPinDir+0x6a>
			{
				clr_bit(DDRB_REGISTER ,PinNo);
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_VidSetPinDir+0x5e>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_VidSetPinDir+0x5a>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
			}
			else if (PinDir == OUTPUT)
  e0:	41 11       	cpse	r20, r1
  e2:	40 c0       	rjmp	.+128    	; 0x164 <DIO_VidSetPinDir+0xee>
			{
				set_bit(DDRB_REGISTER , PinNo );
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_VidSetPinDir+0x7a>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_VidSetPinDir+0x76>
  f4:	82 2b       	or	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
			}
		}break;

		case PORTC :
		{
			if (PinDir == INPUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	61 f4       	brne	.+24     	; 0x116 <DIO_VidSetPinDir+0xa0>
			{
				clr_bit(DDRC_REGISTER ,PinNo);
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_VidSetPinDir+0x94>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_VidSetPinDir+0x90>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	84 bb       	out	0x14, r24	; 20
 114:	08 95       	ret
			}
			else if (PinDir == OUTPUT)
 116:	41 11       	cpse	r20, r1
 118:	25 c0       	rjmp	.+74     	; 0x164 <DIO_VidSetPinDir+0xee>
			{
				set_bit(DDRC_REGISTER , PinNo );
 11a:	24 b3       	in	r18, 0x14	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_VidSetPinDir+0xb0>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_VidSetPinDir+0xac>
 12a:	82 2b       	or	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
			}

		}break;
		case PORTD :
		{
			if (PinDir == INPUT)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	61 f4       	brne	.+24     	; 0x14c <DIO_VidSetPinDir+0xd6>
			{
				clr_bit(DDRD_REGISTER ,PinNo);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_VidSetPinDir+0xca>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_VidSetPinDir+0xc6>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret
			}
			else if (PinDir == OUTPUT)
 14c:	41 11       	cpse	r20, r1
 14e:	0a c0       	rjmp	.+20     	; 0x164 <DIO_VidSetPinDir+0xee>
			{
				set_bit(DDRD_REGISTER , PinNo );
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_VidSetPinDir+0xe6>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_VidSetPinDir+0xe2>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret

Disassembly of section .text.DIO_VidSetPortValue:

00000534 <DIO_VidSetPortValue>:
	}
}

void DIO_VidSetPortValue (u8 PortName , u8 PortValue)
{
	switch (PortName)
 534:	82 30       	cpi	r24, 0x02	; 2
 536:	59 f0       	breq	.+22     	; 0x54e <DIO_VidSetPortValue+0x1a>
 538:	18 f4       	brcc	.+6      	; 0x540 <DIO_VidSetPortValue+0xc>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	31 f0       	breq	.+12     	; 0x54a <DIO_VidSetPortValue+0x16>
 53e:	08 95       	ret
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	39 f0       	breq	.+14     	; 0x552 <DIO_VidSetPortValue+0x1e>
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	39 f0       	breq	.+14     	; 0x556 <DIO_VidSetPortValue+0x22>
 548:	08 95       	ret
	{
		case PORTA :
		{
			PORTA_REGISTER = PortValue;
 54a:	6b bb       	out	0x1b, r22	; 27
		}break;
 54c:	08 95       	ret

		case PORTB :
		{
			PORTB_REGISTER = PortValue;
 54e:	68 bb       	out	0x18, r22	; 24
		}break ;
 550:	08 95       	ret

		case PORTC :
		{
			PORTC_REGISTER = PortValue;
 552:	65 bb       	out	0x15, r22	; 21
		}break ;
 554:	08 95       	ret

		case PORTD :
		{
			PORTD_REGISTER = PortValue;
 556:	62 bb       	out	0x12, r22	; 18
 558:	08 95       	ret

Disassembly of section .text.DIO_VidSetPinValue:

00000166 <DIO_VidSetPinValue>:



void DIO_VidSetPinValue (u8 PortName , u8 PinNo , u8 PinValue)
{
	switch (PortName)
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	19 f1       	breq	.+70     	; 0x1b0 <DIO_VidSetPinValue+0x4a>
 16a:	18 f4       	brcc	.+6      	; 0x172 <DIO_VidSetPinValue+0xc>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	39 f0       	breq	.+14     	; 0x17e <DIO_VidSetPinValue+0x18>
 170:	08 95       	ret
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	b1 f1       	breq	.+108    	; 0x1e2 <DIO_VidSetPinValue+0x7c>
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	09 f4       	brne	.+2      	; 0x17c <DIO_VidSetPinValue+0x16>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <DIO_VidSetPinValue+0xae>
 17c:	08 95       	ret
	{
		case PORTA :
		{
			assign_bit(PORTA_REGISTER,PinNo,PinValue) ;
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <DIO_VidSetPinValue+0x32>
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_VidSetPinValue+0x28>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_VidSetPinValue+0x24>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_VidSetPinValue+0x3e>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_VidSetPinValue+0x3a>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		}break;

		case PORTB :
		{
			assign_bit(PORTB_REGISTER,PinNo,PinValue) ;
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_VidSetPinValue+0x64>
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_VidSetPinValue+0x5a>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_VidSetPinValue+0x56>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_VidSetPinValue+0x70>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_VidSetPinValue+0x6c>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		}break ;

		case PORTC :
		{
			assign_bit(PORTC_REGISTER,PinNo,PinValue) ;
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <DIO_VidSetPinValue+0x96>
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_VidSetPinValue+0x8c>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_VidSetPinValue+0x88>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_VidSetPinValue+0xa2>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_VidSetPinValue+0x9e>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		}break ;

		case PORTD :
		{
			assign_bit(PORTD_REGISTER,PinNo,PinValue) ;
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <DIO_VidSetPinValue+0xc8>
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_VidSetPinValue+0xbe>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_VidSetPinValue+0xba>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_VidSetPinValue+0xd4>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_VidSetPinValue+0xd0>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000058c <_fini>:
 58c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000058e <__funcs_on_exit>:
 58e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000590 <__simulator_exit>:
 590:	08 95       	ret

Disassembly of section .text.exit:

0000055a <exit>:
 55a:	ec 01       	movw	r28, r24
 55c:	0e 94 c7 02 	call	0x58e	; 0x58e <__funcs_on_exit>
 560:	0e 94 c6 02 	call	0x58c	; 0x58c <_fini>
 564:	ce 01       	movw	r24, r28
 566:	0e 94 c8 02 	call	0x590	; 0x590 <__simulator_exit>
 56a:	ce 01       	movw	r24, r28
 56c:	0e 94 c4 02 	call	0x588	; 0x588 <_Exit>

Disassembly of section .text._Exit:

00000588 <_Exit>:
 588:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
