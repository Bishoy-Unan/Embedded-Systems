
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ba  0000026c  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000248a  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f9  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011f6  00000000  00000000  000036ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006f4  00000000  00000000  000048a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028a  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b87  00000000  00000000  00005222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00006da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000610  00000610  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.fi      00000002  00000618  00000618  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000048  00000580  00000580  00000694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_enuInit 00000032  000005c8  000005c8  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADC_enuStartConversionAsynch 0000005e  000002a0  000002a0  000003b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_16 0000009e  000000ba  000000ba  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.Adc_u8IndexConversion 00000001  0080007d  0080007d  00000735  2**0
                  ALLOC
 20 .data.ADC_u8BusyState 00000001  0080007e  00000620  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .bss.ADC_strGlobalChain 00000007  00800060  00800060  00000735  2**0
                  ALLOC
 22 .text.__vector_1 00000054  000002fe  000002fe  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_2 00000054  00000352  00000352  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_3 00000054  000003a6  000003a6  000004ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.ExtInt2_AddCallBack 00000002  00800067  00800067  00000735  2**0
                  ALLOC
 26 .bss.ExtInt1_AddCallBack 00000002  00800069  00800069  00000735  2**0
                  ALLOC
 27 .bss.ExtInt0_AddCallBack 00000002  0080006b  0080006b  00000735  2**0
                  ALLOC
 28 .text.__vector_11 0000006c  000001c8  000001c8  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_10 0000004e  000003fa  000003fa  0000050e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_9 00000070  00000158  00000158  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_7 0000004e  00000448  00000448  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_8 0000004e  00000496  00000496  000005aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_6 0000004e  000004e4  000004e4  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_5 0000006c  00000234  00000234  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_4 0000004e  00000532  00000532  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.Timer2_u8LoadVal 00000001  0080007f  0080007f  00000735  2**0
                  ALLOC
 37 .bss.Timer2_u8Counter 00000001  00800080  00800080  00000735  2**0
                  ALLOC
 38 .bss.Timer2_u8OVCounter 00000001  00800081  00800081  00000735  2**0
                  ALLOC
 39 .bss.Timer1_u8LoadVal 00000001  00800082  00800082  00000735  2**0
                  ALLOC
 40 .bss.Timer1_u8Counter 00000001  00800083  00800083  00000735  2**0
                  ALLOC
 41 .bss.Timer1_u8OVCounter 00000001  00800084  00800084  00000735  2**0
                  ALLOC
 42 .bss.Timer0_u8LoadVal 00000001  00800085  00800085  00000735  2**0
                  ALLOC
 43 .bss.Timer0_u8Counter 00000001  00800086  00800086  00000735  2**0
                  ALLOC
 44 .bss.Timer0_u8OVCounter 00000001  00800087  00800087  00000735  2**0
                  ALLOC
 45 .bss.Timer2_AddCTC_CallBack 00000002  0080006d  0080006d  00000735  2**0
                  ALLOC
 46 .bss.Timer2_AddOVF_CallBack 00000002  0080006f  0080006f  00000735  2**0
                  ALLOC
 47 .bss.Timer1_Add_INP_CAP_CallBack 00000002  00800071  00800071  00000735  2**0
                  ALLOC
 48 .bss.Timer1_AddCTC_CHB_CallBack 00000002  00800073  00800073  00000735  2**0
                  ALLOC
 49 .bss.Timer1_AddCTC_CHA_CallBack 00000002  00800075  00800075  00000735  2**0
                  ALLOC
 50 .bss.Timer1_AddOVF_CallBack 00000002  00800077  00800077  00000735  2**0
                  ALLOC
 51 .bss.Timer0_AddCTC_CallBack 00000002  00800079  00800079  00000735  2**0
                  ALLOC
 52 .bss.Timer0_AddOVF_CallBack 00000002  0080007b  0080007b  00000735  2**0
                  ALLOC
 53 .text.__dummy_fini 00000002  0000061a  0000061a  0000072e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_funcs_on_exit 00000002  0000061c  0000061c  00000730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_simulator_exit 00000002  0000061e  0000061e  00000732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.exit    00000016  000005fa  000005fa  0000070e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text._Exit   00000004  00000614  00000614  00000728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
   8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_2>
   c:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_3>
  10:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_4>
  14:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_5>
  18:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_6>
  1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_7>
  20:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_8>
  24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_9>
  28:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_10>
  2c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_11>
  30:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  34:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  38:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  3c:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <_etext>
  44:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  48:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  4c:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>
  50:	0c 94 08 03 	jmp	0x610	; 0x610 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 7e       	andi	r16, 0xE0	; 224
  58:	80 00       	.word	0x0080	; ????
  5a:	7e 00       	.word	0x007e	; ????
  5c:	7f 00       	.word	0x007f	; ????
  5e:	06 20       	and	r0, r6
  60:	00 7f       	andi	r16, 0xF0	; 240
  62:	00 88       	ldd	r0, Z+16	; 0x10
  64:	80 00       	.word	0x0080	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	e4 e5       	ldi	r30, 0x54	; 84
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__do_clear_bss+0x8>
  7a:	b5 91       	lpm	r27, Z+
  7c:	a5 91       	lpm	r26, Z+
  7e:	35 91       	lpm	r19, Z+
  80:	25 91       	lpm	r18, Z+
  82:	05 91       	lpm	r16, Z+
  84:	07 fd       	sbrc	r16, 7
  86:	0c c0       	rjmp	.+24     	; 0xa0 <__do_clear_bss>
  88:	95 91       	lpm	r25, Z+
  8a:	85 91       	lpm	r24, Z+
  8c:	ef 01       	movw	r28, r30
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0x20>
  9c:	fe 01       	movw	r30, r28
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_clear_bss+0x8>

000000a0 <__do_clear_bss>:
  a0:	1d 92       	st	X+, r1
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__do_clear_bss>
  a8:	e5 36       	cpi	r30, 0x65	; 101
  aa:	f4 07       	cpc	r31, r20
  ac:	31 f7       	brne	.-52     	; 0x7a <__do_copy_data+0x8>
  ae:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  b2:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <exit>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>

Disassembly of section .text:

00000610 <__bad_interrupt>:
 610:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.fi:

00000618 <fi>:
#include"../MCAL/ADC/ADC_Interface.h"



void fi(void)
{
 618:	08 95       	ret

Disassembly of section .text.main:

00000580 <main>:
	
}

int main(void)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	2b 97       	sbiw	r28, 0x0b	; 11
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
	u8 length =3;
	u8  chan[] = {1,3,5};
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	8a 83       	std	Y+2, r24	; 0x02
 59c:	95 e0       	ldi	r25, 0x05	; 5
 59e:	9b 83       	std	Y+3, r25	; 0x03
	u8 Res[]={0};	
 5a0:	1c 82       	std	Y+4, r1	; 0x04
	ADC_strChannelChain_t chain = {length,chan,Res,fi};
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	ce 01       	movw	r24, r28
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	9f 83       	std	Y+7, r25	; 0x07
 5aa:	8e 83       	std	Y+6, r24	; 0x06
 5ac:	03 96       	adiw	r24, 0x03	; 3
 5ae:	99 87       	std	Y+9, r25	; 0x09
 5b0:	88 87       	std	Y+8, r24	; 0x08
 5b2:	8c e0       	ldi	r24, 0x0C	; 12
 5b4:	93 e0       	ldi	r25, 0x03	; 3
 5b6:	9b 87       	std	Y+11, r25	; 0x0b
 5b8:	8a 87       	std	Y+10, r24	; 0x0a
	ADC_enuInit();
 5ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <ADC_enuInit>
	ADC_enuStartConversionAsynch(& chain);
 5be:	ce 01       	movw	r24, r28
 5c0:	05 96       	adiw	r24, 0x05	; 5
 5c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ADC_enuStartConversionAsynch>
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <main+0x46>

Disassembly of section .text.ADC_enuInit:

000005c8 <ADC_enuInit>:
	
	
	/**
	*@ set voltage reference 
	*/	
	Local_u8TempReg = ADMUX ;
 5c8:	87 b1       	in	r24, 0x07	; 7
	Local_u8TempReg &= REFERENCE_MASK ;
 5ca:	8f 73       	andi	r24, 0x3F	; 63
	#if 	(ADC_REFERENCE_VOLTAGE == ADC_EXTERNAL_VOLTAGE_REFERENCE)
						Local_u8TempReg |= ADC_EXTERNAL_VOLTAGE_REFERENCE ;
	#elif	(ADC_REFERENCE_VOLTAGE == ADC_AVCC_VOLTAGE_REFERENCE)
						Local_u8TempReg |= ADC_AVCC_VOLTAGE_REFERENCE ;
 5cc:	80 64       	ori	r24, 0x40	; 64
	#elif	(ADC_REFERENCE_VOLTAGE == ADC_INTERNAL_VOLTAGE_REFERENCE)
						Local_u8TempReg |= ADC_INTERNAL_VOLTAGE_REFERENCE ;
	#else	
		Ret_enuErrorStatus = ADC_enuNOK  ;
	#endif	
	ADMUX = Local_u8TempReg  ;
 5ce:	87 b9       	out	0x07, r24	; 7
	
	/**
	*@ configure adjacement mode
	*/
	#if  (ADC_ADLAR == ADC_RIGHT_SHIFT)
				ADMUX &= ~(1 << ADLAR);
 5d0:	87 b1       	in	r24, 0x07	; 7
 5d2:	8f 7d       	andi	r24, 0xDF	; 223
 5d4:	87 b9       	out	0x07, r24	; 7
	
	/**
	*@ configure Triggring  mode
	*/
	#if  (TRIGGRING_MODE == ONE_TIME_CONVERSION)
				ADCSRA &= ~(1 << ADATE);
 5d6:	86 b1       	in	r24, 0x06	; 6
 5d8:	8f 7d       	andi	r24, 0xDF	; 223
 5da:	86 b9       	out	0x06, r24	; 6
	
	/**
	*@ configure ADC interrupt Enabling  mode
	*/
	#if  (INTERRUPT_ENABLE == ENABLE)
				ADCSRA |= (1 << ADIE) ;
 5dc:	86 b1       	in	r24, 0x06	; 6
 5de:	88 60       	ori	r24, 0x08	; 8
 5e0:	86 b9       	out	0x06, r24	; 6
		Ret_enuErrorStatus = ADC_enuNOK  ;
	#endif
	/**
	*@ enable global interrupt
	*/
	SREG |= (1<<7);
 5e2:	8f b7       	in	r24, 0x3f	; 63
 5e4:	80 68       	ori	r24, 0x80	; 128
 5e6:	8f bf       	out	0x3f, r24	; 63
	
	
	/**
	*@ Configure ADC Prescaler 
	*/	
	Local_u8TempReg = ADCSRA ;
 5e8:	86 b1       	in	r24, 0x06	; 6
	Local_u8TempReg &= ADC_PRESCALER_MASK ;
 5ea:	88 7f       	andi	r24, 0xF8	; 248
	#if 	(ADC_PRESCALER == ADC_PRESCALER_2)
						Local_u8TempReg |= ADC_PRESCALER_2 ;
 5ec:	81 60       	ori	r24, 0x01	; 1
	#elif	(ADC_PRESCALER == ADC_PRESCALER_128)
						Local_u8TempReg |= ADC_PRESCALER_128 ;				
	#else	
		Ret_enuErrorStatus = ADC_enuNOK  ;
	#endif	
	ADCSRA = Local_u8TempReg  ;
 5ee:	86 b9       	out	0x06, r24	; 6
	
	/**
	*@ configure ADC state  mode
	*/
	#if  (ADC_STATUS == ADC_ON)
				ADCSRA |= (1 << ADEN) ;
 5f0:	86 b1       	in	r24, 0x06	; 6
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	86 b9       	out	0x06, r24	; 6
		Ret_enuErrorStatus = ADC_enuNOK  ;
	#endif
	
	
return 	Ret_enuErrorStatus ;
}/*ADC_enuInit*/
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret

Disassembly of section .text.ADC_enuStartConversionAsynch:

000002a0 <ADC_enuStartConversionAsynch>:




ADC_enuErrorStatus_t ADC_enuStartConversionAsynch(ADC_strChannelChain_t * Add_strChain)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
	ADC_enuErrorStatus_t Ret_enuErrorStatus = ADC_enuOK;
	
	u8 Loc_u8TempReg;

	/*check pointer to null*/
	if(Add_strChain == NULL)
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	39 f1       	breq	.+78     	; 0x2f6 <ADC_enuStartConversionAsynch+0x56>
	else
	{
		/**
		*@ state flow to avoid sending more than one chain at a time
		*/
		if(ADC_u8BusyState == IDLE)
 2a8:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <ADC_u8BusyState>
 2ac:	21 30       	cpi	r18, 0x01	; 1
 2ae:	f9 f4       	brne	.+62     	; 0x2ee <ADC_enuStartConversionAsynch+0x4e>
		{
			ADC_u8BusyState = BUZY;
 2b0:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <ADC_u8BusyState>

			

			Adc_u8IndexConversion = 0;
 2b4:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Adc_u8IndexConversion>
			
			
			ADC_strGlobalChain.ADC_u8Length    = Add_strChain->ADC_u8Length;
 2b8:	ec 01       	movw	r28, r24
 2ba:	28 81       	ld	r18, Y
 2bc:	e0 e6       	ldi	r30, 0x60	; 96
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	20 83       	st	Z, r18
			ADC_strGlobalChain.ADC_AddChannels = Add_strChain->ADC_AddChannels;
 2c2:	a9 81       	ldd	r26, Y+1	; 0x01
 2c4:	ba 81       	ldd	r27, Y+2	; 0x02
 2c6:	b2 83       	std	Z+2, r27	; 0x02
 2c8:	a1 83       	std	Z+1, r26	; 0x01
			ADC_strGlobalChain.ADC_AddResult   = Add_strChain->ADC_AddResult;
 2ca:	2b 81       	ldd	r18, Y+3	; 0x03
 2cc:	3c 81       	ldd	r19, Y+4	; 0x04
 2ce:	34 83       	std	Z+4, r19	; 0x04
 2d0:	23 83       	std	Z+3, r18	; 0x03
			ADC_strGlobalChain.EndOfJob        = Add_strChain->EndOfJob;
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	96 83       	std	Z+6, r25	; 0x06
 2d8:	85 83       	std	Z+5, r24	; 0x05
			
			/**
			*@ select which channel to start from the 8 single ended channels according to ADC_strChannelChain_t \
			*@ configration in main function
			*/
			Loc_u8TempReg = ADMUX;
 2da:	87 b1       	in	r24, 0x07	; 7
			Loc_u8TempReg &= SINGLE_ENDED_CHANNELS_MAK;
 2dc:	80 7e       	andi	r24, 0xE0	; 224
			Loc_u8TempReg |= ADC_strGlobalChain.ADC_AddChannels[0];
 2de:	9c 91       	ld	r25, X
 2e0:	89 2b       	or	r24, r25
			ADMUX = Loc_u8TempReg;
 2e2:	87 b9       	out	0x07, r24	; 7

			/**
			*@ Start Conversion
			*/
			ADCSRA |= (1<<6) ; 
 2e4:	86 b1       	in	r24, 0x06	; 6
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	86 b9       	out	0x06, r24	; 6



ADC_enuErrorStatus_t ADC_enuStartConversionAsynch(ADC_strChannelChain_t * Add_strChain)
{
	ADC_enuErrorStatus_t Ret_enuErrorStatus = ADC_enuOK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <ADC_enuStartConversionAsynch+0x58>

		}

		else
		{
			ADC_u8BusyState = BUZY;
 2ee:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <ADC_u8BusyState>



ADC_enuErrorStatus_t ADC_enuStartConversionAsynch(ADC_strChannelChain_t * Add_strChain)
{
	ADC_enuErrorStatus_t Ret_enuErrorStatus = ADC_enuOK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <ADC_enuStartConversionAsynch+0x58>
	u8 Loc_u8TempReg;

	/*check pointer to null*/
	if(Add_strChain == NULL)
	{
		Ret_enuErrorStatus = ADC_enuNOK;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	
return Ret_enuErrorStatus;	
}/*ADC_enuStartConversion*/
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

Disassembly of section .text.__vector_16:

000000ba <__vector_16>:
	

	}

return Ret_enuErrorStatus;
}
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	13 96       	adiw	r26, 0x03	; 3
  e2:	ed 91       	ld	r30, X+
  e4:	fc 91       	ld	r31, X
  e6:	14 97       	sbiw	r26, 0x04	; 4
  e8:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Adc_u8IndexConversion>
  ec:	e8 0f       	add	r30, r24
  ee:	f1 1d       	adc	r31, r1
  f0:	94 b1       	in	r25, 0x04	; 4
  f2:	25 b1       	in	r18, 0x05	; 5
  f4:	90 83       	st	Z, r25
  f6:	9c 91       	ld	r25, X
  f8:	89 17       	cp	r24, r25
  fa:	98 f4       	brcc	.+38     	; 0x122 <__vector_16+0x68>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Adc_u8IndexConversion>
 102:	27 b1       	in	r18, 0x07	; 7
 104:	20 7e       	andi	r18, 0xE0	; 224
 106:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 10e:	e8 0f       	add	r30, r24
 110:	f1 1d       	adc	r31, r1
 112:	90 81       	ld	r25, Z
 114:	82 2f       	mov	r24, r18
 116:	89 2b       	or	r24, r25
 118:	87 b9       	out	0x07, r24	; 7
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	86 b9       	out	0x06, r24	; 6
 120:	0a c0       	rjmp	.+20     	; 0x136 <__vector_16+0x7c>
 122:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Adc_u8IndexConversion>
 126:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 12a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 12e:	09 95       	icall
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <ADC_u8BusyState>
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

Disassembly of section .text.__vector_1:

000002fe <__vector_1>:
/**
* ISR of External Interrupt0
*/

ISR(EXT_INT0)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt0_AddCallBack();
 320:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <ExtInt0_AddCallBack>
 324:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <ExtInt0_AddCallBack+0x1>
 328:	09 95       	icall
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,6);
 32a:	8a b7       	in	r24, 0x3a	; 58
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	8a bf       	out	0x3a, r24	; 58
	
}/*EXT_INT0 ISR*/
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

Disassembly of section .text.__vector_2:

00000352 <__vector_2>:

/**
* ISR of External Interrupt1
*/
ISR(EXT_INT1)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt1_AddCallBack();
 374:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <ExtInt1_AddCallBack>
 378:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <ExtInt1_AddCallBack+0x1>
 37c:	09 95       	icall
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,7);
 37e:	8a b7       	in	r24, 0x3a	; 58
 380:	80 68       	ori	r24, 0x80	; 128
 382:	8a bf       	out	0x3a, r24	; 58

}/* EXT_INT1 ISR*/
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

Disassembly of section .text.__vector_3:

000003a6 <__vector_3>:

/**
* ISR of External Interrupt2
*/
ISR(EXT_INT2)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	6f 93       	push	r22
 3ba:	7f 93       	push	r23
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
/**
*@ pointer to function which is set in set call back function 
*/	
	ExtInt2_AddCallBack();
 3c8:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <ExtInt2_AddCallBack>
 3cc:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <ExtInt2_AddCallBack+0x1>
 3d0:	09 95       	icall
	
	/**
	*@ clear interrupt flag
	*/
	SET_BIT(GIFR,5);
 3d2:	8a b7       	in	r24, 0x3a	; 58
 3d4:	80 62       	ori	r24, 0x20	; 32
 3d6:	8a bf       	out	0x3a, r24	; 58

}/* EXT_INT2 ISR */
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

Disassembly of section .text.__vector_11:

000001c8 <__vector_11>:

/**
*@ INTERRUPT HANDLER OF TIMER0 OVER FLOW MODE
*/
ISR(TIMER0_OV_ISR)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	if(Timer0_u8Counter == Timer0_u8OVCounter)
 1ea:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <Timer0_u8Counter>
 1ee:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <Timer0_u8OVCounter>
 1f2:	89 13       	cpse	r24, r25
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <__vector_11+0x44>
	{
		Timer0_AddOVF_CallBack();
 1f6:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Timer0_AddOVF_CallBack>
 1fa:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Timer0_AddOVF_CallBack+0x1>
 1fe:	09 95       	icall
	
		TCNT0 = Timer0_u8LoadVal ;
 200:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Timer0_u8LoadVal>
 204:	82 bf       	out	0x32, r24	; 50
		
		Timer0_u8Counter = 0;
 206:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Timer0_u8Counter>
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_11+0x4a>
	}
	else
	{
		Timer0_u8Counter ++;
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Timer0_u8Counter>
	}
}/*TIMER0_OV_ISR*/
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

Disassembly of section .text.__vector_10:

000003fa <__vector_10>:

/**
*@ INTERRUPT HANDLER OF TIMER0 CTC MODE
*/
ISR(TIMER0_CTC_ISR)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	Timer0_AddCTC_CallBack();
 41c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <Timer0_AddCTC_CallBack>
 420:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <Timer0_AddCTC_CallBack+0x1>
 424:	09 95       	icall
	
}/*TIMER0_CTC_ISR*/
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

Disassembly of section .text.__vector_9:

00000158 <__vector_9>:
	



return Local_enuReturnStatus ;		
}/*TIMER2_enuSetCTCINT*/
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Timer1_u8Counter>
 17e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <Timer1_u8OVCounter>
 182:	89 13       	cpse	r24, r25
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <__vector_9+0x48>
 186:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer1_AddOVF_CallBack>
 18a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer1_AddOVF_CallBack+0x1>
 18e:	09 95       	icall
 190:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Timer1_u8LoadVal>
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9d bd       	out	0x2d, r25	; 45
 198:	8c bd       	out	0x2c, r24	; 44
 19a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <Timer1_u8Counter>
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <__vector_9+0x4e>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Timer1_u8Counter>
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

Disassembly of section .text.__vector_7:

00000448 <__vector_7>:

/**
*@ INTERRUPT HANDLER OF TIMER1 CTC MODE MODE CHANNEL A
*/
ISR(TIMER1_CTC_CHA_ISR)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	Timer1_AddCTC_CHA_CallBack();
 46a:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Timer1_AddCTC_CHA_CallBack>
 46e:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Timer1_AddCTC_CHA_CallBack+0x1>
 472:	09 95       	icall
	
}/*TIMER_CTC_CHA_ISR*/
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

Disassembly of section .text.__vector_8:

00000496 <__vector_8>:

/**
*@ INTERRUPT HANDLER OF TIMER1 CTC MODE CHANNEL B 
*/
ISR(TIMER1_CTC_CHB_ISR)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	Timer1_AddCTC_CHB_CallBack();
 4b8:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Timer1_AddCTC_CHB_CallBack>
 4bc:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Timer1_AddCTC_CHB_CallBack+0x1>
 4c0:	09 95       	icall
	
}/*TIMER_CTC_CHB_ISR*/
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

Disassembly of section .text.__vector_6:

000004e4 <__vector_6>:

/**
*@ INTERRUPT HANDLER OF TIMER1 INPUT CAPTURE MODE
*/
ISR(TIMER1_INP_CAP_ISR)
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
	Timer1_Add_INP_CAP_CallBack();
 506:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Timer1_Add_INP_CAP_CallBack>
 50a:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Timer1_Add_INP_CAP_CallBack+0x1>
 50e:	09 95       	icall
	
}/*TIMER_INP_CAP_ISR*/
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

Disassembly of section .text.__vector_5:

00000234 <__vector_5>:

/**
*@ INTERRUPT HANDLER OF TIMER2 OVER FLOW MODE
*/
ISR(TIMER2_OV_ISR)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if(Timer2_u8Counter == Timer2_u8OVCounter)
 256:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Timer2_u8Counter>
 25a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Timer2_u8OVCounter>
 25e:	89 13       	cpse	r24, r25
 260:	0b c0       	rjmp	.+22     	; 0x278 <__vector_5+0x44>
	{
		Timer2_AddOVF_CallBack();
 262:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Timer2_AddOVF_CallBack>
 266:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Timer2_AddOVF_CallBack+0x1>
 26a:	09 95       	icall
	
		TCNT2 = Timer2_u8LoadVal ;
 26c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Timer2_u8LoadVal>
 270:	84 bd       	out	0x24, r24	; 36
		
		Timer2_u8Counter = 0;
 272:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Timer2_u8Counter>
 276:	03 c0       	rjmp	.+6      	; 0x27e <__vector_5+0x4a>
	}
	else
	{
		Timer2_u8Counter ++;
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Timer2_u8Counter>
	}
	
	
}/*TIMER2_OV_ISR*/
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

Disassembly of section .text.__vector_4:

00000532 <__vector_4>:

/**
*@ INTERRUPT HANDLER OF TIMER2 CTC MODE
*/
ISR(TIMER2_CTC_ISR)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	Timer2_AddCTC_CallBack();
 554:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer2_AddCTC_CallBack>
 558:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer2_AddCTC_CallBack+0x1>
 55c:	09 95       	icall
	
}/*TIMER2_CTC_ISR*/
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000061a <_fini>:
 61a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000061c <__funcs_on_exit>:
 61c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000061e <__simulator_exit>:
 61e:	08 95       	ret

Disassembly of section .text.exit:

000005fa <exit>:
 5fa:	ec 01       	movw	r28, r24
 5fc:	0e 94 0e 03 	call	0x61c	; 0x61c <__funcs_on_exit>
 600:	0e 94 0d 03 	call	0x61a	; 0x61a <_fini>
 604:	ce 01       	movw	r24, r28
 606:	0e 94 0f 03 	call	0x61e	; 0x61e <__simulator_exit>
 60a:	ce 01       	movw	r24, r28
 60c:	0e 94 0a 03 	call	0x614	; 0x614 <_Exit>

Disassembly of section .text._Exit:

00000614 <_Exit>:
 614:	0e 94 5b 00 	call	0xb6	; 0xb6 <_exit>
