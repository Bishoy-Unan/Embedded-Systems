   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"exception_handlers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.after_vectors,"ax",%progbits
  20              		.align	2
  21              		.global	Reset_Handler
  22              		.thumb
  23              		.thumb_func
  25              	Reset_Handler:
  26              	.LFB128:
  27              		.file 1 "../system/src/cortexm/exception_handlers.c"
   1:../system/src/cortexm/exception_handlers.c **** /*
   2:../system/src/cortexm/exception_handlers.c ****  * This file is part of the ÂµOS++ distribution.
   3:../system/src/cortexm/exception_handlers.c ****  *   (https://github.com/micro-os-plus)
   4:../system/src/cortexm/exception_handlers.c ****  * Copyright (c) 2014 Liviu Ionescu.
   5:../system/src/cortexm/exception_handlers.c ****  *
   6:../system/src/cortexm/exception_handlers.c ****  * Permission is hereby granted, free of charge, to any person
   7:../system/src/cortexm/exception_handlers.c ****  * obtaining a copy of this software and associated documentation
   8:../system/src/cortexm/exception_handlers.c ****  * files (the "Software"), to deal in the Software without
   9:../system/src/cortexm/exception_handlers.c ****  * restriction, including without limitation the rights to use,
  10:../system/src/cortexm/exception_handlers.c ****  * copy, modify, merge, publish, distribute, sublicense, and/or
  11:../system/src/cortexm/exception_handlers.c ****  * sell copies of the Software, and to permit persons to whom
  12:../system/src/cortexm/exception_handlers.c ****  * the Software is furnished to do so, subject to the following
  13:../system/src/cortexm/exception_handlers.c ****  * conditions:
  14:../system/src/cortexm/exception_handlers.c ****  *
  15:../system/src/cortexm/exception_handlers.c ****  * The above copyright notice and this permission notice shall be
  16:../system/src/cortexm/exception_handlers.c ****  * included in all copies or substantial portions of the Software.
  17:../system/src/cortexm/exception_handlers.c ****  *
  18:../system/src/cortexm/exception_handlers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19:../system/src/cortexm/exception_handlers.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  20:../system/src/cortexm/exception_handlers.c ****  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21:../system/src/cortexm/exception_handlers.c ****  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  22:../system/src/cortexm/exception_handlers.c ****  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  23:../system/src/cortexm/exception_handlers.c ****  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  24:../system/src/cortexm/exception_handlers.c ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  25:../system/src/cortexm/exception_handlers.c ****  * OTHER DEALINGS IN THE SOFTWARE.
  26:../system/src/cortexm/exception_handlers.c ****  */
  27:../system/src/cortexm/exception_handlers.c **** 
  28:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  29:../system/src/cortexm/exception_handlers.c **** 
  30:../system/src/cortexm/exception_handlers.c **** #include "cortexm/ExceptionHandlers.h"
  31:../system/src/cortexm/exception_handlers.c **** #include "cmsis_device.h"
  32:../system/src/cortexm/exception_handlers.c **** #include "arm/semihosting.h"
  33:../system/src/cortexm/exception_handlers.c **** #include "diag/Trace.h"
  34:../system/src/cortexm/exception_handlers.c **** #include <string.h>
  35:../system/src/cortexm/exception_handlers.c **** 
  36:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  37:../system/src/cortexm/exception_handlers.c **** 
  38:../system/src/cortexm/exception_handlers.c **** extern void
  39:../system/src/cortexm/exception_handlers.c **** __attribute__((noreturn,weak))
  40:../system/src/cortexm/exception_handlers.c **** _start (void);
  41:../system/src/cortexm/exception_handlers.c **** 
  42:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  43:../system/src/cortexm/exception_handlers.c **** // Default exception handlers. Override the ones here by defining your own
  44:../system/src/cortexm/exception_handlers.c **** // handler routines in your application code.
  45:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  46:../system/src/cortexm/exception_handlers.c **** 
  47:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
  48:../system/src/cortexm/exception_handlers.c **** 
  49:../system/src/cortexm/exception_handlers.c **** // The DEBUG version is not naked, but has a proper stack frame,
  50:../system/src/cortexm/exception_handlers.c **** // to allow setting breakpoints at Reset_Handler.
  51:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),noreturn))
  52:../system/src/cortexm/exception_handlers.c **** Reset_Handler (void)
  53:../system/src/cortexm/exception_handlers.c **** {
  28              		.loc 1 53 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  54:../system/src/cortexm/exception_handlers.c ****   _start ();
  37              		.loc 1 54 0
  38 0002 FFF7FEFF 		bl	_start
  39              	.LVL0:
  40              		.cfi_endproc
  41              	.LFE128:
  43 0006 00BF     		.align	2
  44              		.weak	NMI_Handler
  45              		.thumb
  46              		.thumb_func
  48              	NMI_Handler:
  49              	.LFB129:
  55:../system/src/cortexm/exception_handlers.c **** }
  56:../system/src/cortexm/exception_handlers.c **** 
  57:../system/src/cortexm/exception_handlers.c **** #else
  58:../system/src/cortexm/exception_handlers.c **** 
  59:../system/src/cortexm/exception_handlers.c **** // The Release version is optimised to a quick branch to _start.
  60:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),naked))
  61:../system/src/cortexm/exception_handlers.c **** Reset_Handler(void)
  62:../system/src/cortexm/exception_handlers.c ****   {
  63:../system/src/cortexm/exception_handlers.c ****     asm volatile
  64:../system/src/cortexm/exception_handlers.c ****     (
  65:../system/src/cortexm/exception_handlers.c ****         " ldr     r0,=_start \n"
  66:../system/src/cortexm/exception_handlers.c ****         " bx      r0"
  67:../system/src/cortexm/exception_handlers.c ****         :
  68:../system/src/cortexm/exception_handlers.c ****         :
  69:../system/src/cortexm/exception_handlers.c ****         :
  70:../system/src/cortexm/exception_handlers.c ****     );
  71:../system/src/cortexm/exception_handlers.c ****   }
  72:../system/src/cortexm/exception_handlers.c **** 
  73:../system/src/cortexm/exception_handlers.c **** #endif
  74:../system/src/cortexm/exception_handlers.c **** 
  75:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
  76:../system/src/cortexm/exception_handlers.c **** NMI_Handler (void)
  77:../system/src/cortexm/exception_handlers.c **** {
  50              		.loc 1 77 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  78:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
  79:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
  55              		.loc 1 79 0
  56              		.syntax unified
  57              	@ 79 "../system/src/cortexm/exception_handlers.c" 1
  58 0008 00BE     		bkpt 0
  59              	@ 0 "" 2
  60              		.thumb
  61              		.syntax unified
  62              	.L4:
  63 000a FEE7     		b	.L4
  64              		.cfi_endproc
  65              	.LFE129:
  67              		.section	.text.dumpExceptionStack,"ax",%progbits
  68              		.align	2
  69              		.global	dumpExceptionStack
  70              		.thumb
  71              		.thumb_func
  73              	dumpExceptionStack:
  74              	.LFB130:
  80:../system/src/cortexm/exception_handlers.c **** #endif
  81:../system/src/cortexm/exception_handlers.c ****   while (1)
  82:../system/src/cortexm/exception_handlers.c ****     {
  83:../system/src/cortexm/exception_handlers.c ****     }
  84:../system/src/cortexm/exception_handlers.c **** }
  85:../system/src/cortexm/exception_handlers.c **** 
  86:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  87:../system/src/cortexm/exception_handlers.c **** 
  88:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
  89:../system/src/cortexm/exception_handlers.c **** 
  90:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  91:../system/src/cortexm/exception_handlers.c **** 
  92:../system/src/cortexm/exception_handlers.c **** // The values of BFAR and MMFAR stay unchanged if the BFARVALID or
  93:../system/src/cortexm/exception_handlers.c **** // MMARVALID is set. However, if a new fault occurs during the
  94:../system/src/cortexm/exception_handlers.c **** // execution of this fault handler, the value of the BFAR and MMFAR
  95:../system/src/cortexm/exception_handlers.c **** // could potentially be erased. In order to ensure the fault addresses
  96:../system/src/cortexm/exception_handlers.c **** // accessed are valid, the following procedure should be used:
  97:../system/src/cortexm/exception_handlers.c **** // 1. Read BFAR/MMFAR.
  98:../system/src/cortexm/exception_handlers.c **** // 2. Read CFSR to get BFARVALID or MMARVALID. If the value is 0, the
  99:../system/src/cortexm/exception_handlers.c **** //    value of BFAR or MMFAR accessed can be invalid and can be discarded.
 100:../system/src/cortexm/exception_handlers.c **** // 3. Optionally clear BFARVALID or MMARVALID.
 101:../system/src/cortexm/exception_handlers.c **** // (See Joseph Yiu's book).
 102:../system/src/cortexm/exception_handlers.c **** 
 103:../system/src/cortexm/exception_handlers.c **** void
 104:../system/src/cortexm/exception_handlers.c **** dumpExceptionStack (ExceptionStackFrame* frame,
 105:../system/src/cortexm/exception_handlers.c ****                 uint32_t cfsr, uint32_t mmfar, uint32_t bfar,
 106:../system/src/cortexm/exception_handlers.c ****                                         uint32_t lr)
 107:../system/src/cortexm/exception_handlers.c **** {
  75              		.loc 1 107 0
  76              		.cfi_startproc
  77              		@ args = 4, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL1:
  80 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  81              		.cfi_def_cfa_offset 24
  82              		.cfi_offset 3, -24
  83              		.cfi_offset 4, -20
  84              		.cfi_offset 5, -16
  85              		.cfi_offset 6, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 0446     		mov	r4, r0
  89 0004 0D46     		mov	r5, r1
  90 0006 1746     		mov	r7, r2
  91 0008 1E46     		mov	r6, r3
 108:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Stack frame:\n");
  92              		.loc 1 108 0
  93 000a 2648     		ldr	r0, .L9
  94              	.LVL2:
  95 000c FFF7FEFF 		bl	trace_printf
  96              	.LVL3:
 109:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R0 =  %08X\n", frame->r0);
  97              		.loc 1 109 0
  98 0010 2168     		ldr	r1, [r4]
  99 0012 2548     		ldr	r0, .L9+4
 100 0014 FFF7FEFF 		bl	trace_printf
 101              	.LVL4:
 110:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R1 =  %08X\n", frame->r1);
 102              		.loc 1 110 0
 103 0018 6168     		ldr	r1, [r4, #4]
 104 001a 2448     		ldr	r0, .L9+8
 105 001c FFF7FEFF 		bl	trace_printf
 106              	.LVL5:
 111:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R2 =  %08X\n", frame->r2);
 107              		.loc 1 111 0
 108 0020 A168     		ldr	r1, [r4, #8]
 109 0022 2348     		ldr	r0, .L9+12
 110 0024 FFF7FEFF 		bl	trace_printf
 111              	.LVL6:
 112:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R3 =  %08X\n", frame->r3);
 112              		.loc 1 112 0
 113 0028 E168     		ldr	r1, [r4, #12]
 114 002a 2248     		ldr	r0, .L9+16
 115 002c FFF7FEFF 		bl	trace_printf
 116              	.LVL7:
 113:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R12 = %08X\n", frame->r12);
 117              		.loc 1 113 0
 118 0030 2169     		ldr	r1, [r4, #16]
 119 0032 2148     		ldr	r0, .L9+20
 120 0034 FFF7FEFF 		bl	trace_printf
 121              	.LVL8:
 114:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR =  %08X\n", frame->lr);
 122              		.loc 1 114 0
 123 0038 6169     		ldr	r1, [r4, #20]
 124 003a 2048     		ldr	r0, .L9+24
 125 003c FFF7FEFF 		bl	trace_printf
 126              	.LVL9:
 115:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PC =  %08X\n", frame->pc);
 127              		.loc 1 115 0
 128 0040 A169     		ldr	r1, [r4, #24]
 129 0042 1F48     		ldr	r0, .L9+28
 130 0044 FFF7FEFF 		bl	trace_printf
 131              	.LVL10:
 116:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PSR = %08X\n", frame->psr);
 132              		.loc 1 116 0
 133 0048 E169     		ldr	r1, [r4, #28]
 134 004a 1E48     		ldr	r0, .L9+32
 135 004c FFF7FEFF 		bl	trace_printf
 136              	.LVL11:
 117:../system/src/cortexm/exception_handlers.c ****   trace_printf ("FSR/FAR:\n");
 137              		.loc 1 117 0
 138 0050 1D48     		ldr	r0, .L9+36
 139 0052 FFF7FEFF 		bl	trace_printf
 140              	.LVL12:
 118:../system/src/cortexm/exception_handlers.c ****   trace_printf (" CFSR =  %08X\n", cfsr);
 141              		.loc 1 118 0
 142 0056 2946     		mov	r1, r5
 143 0058 1C48     		ldr	r0, .L9+40
 144 005a FFF7FEFF 		bl	trace_printf
 145              	.LVL13:
 119:../system/src/cortexm/exception_handlers.c ****   trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 146              		.loc 1 119 0
 147 005e 1C4C     		ldr	r4, .L9+44
 148              	.LVL14:
 149 0060 E16A     		ldr	r1, [r4, #44]
 150 0062 1C48     		ldr	r0, .L9+48
 151 0064 FFF7FEFF 		bl	trace_printf
 152              	.LVL15:
 120:../system/src/cortexm/exception_handlers.c ****   trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 153              		.loc 1 120 0
 154 0068 216B     		ldr	r1, [r4, #48]
 155 006a 1B48     		ldr	r0, .L9+52
 156 006c FFF7FEFF 		bl	trace_printf
 157              	.LVL16:
 121:../system/src/cortexm/exception_handlers.c ****   trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 158              		.loc 1 121 0
 159 0070 E16B     		ldr	r1, [r4, #60]
 160 0072 1A48     		ldr	r0, .L9+56
 161 0074 FFF7FEFF 		bl	trace_printf
 162              	.LVL17:
 122:../system/src/cortexm/exception_handlers.c **** 
 123:../system/src/cortexm/exception_handlers.c ****   if (cfsr & (1UL << 7))
 163              		.loc 1 123 0
 164 0078 15F0800F 		tst	r5, #128
 165 007c 03D0     		beq	.L6
 124:../system/src/cortexm/exception_handlers.c ****     {
 125:../system/src/cortexm/exception_handlers.c ****       trace_printf (" MMFAR = %08X\n", mmfar);
 166              		.loc 1 125 0
 167 007e 3946     		mov	r1, r7
 168 0080 1748     		ldr	r0, .L9+60
 169 0082 FFF7FEFF 		bl	trace_printf
 170              	.LVL18:
 171              	.L6:
 126:../system/src/cortexm/exception_handlers.c ****     }
 127:../system/src/cortexm/exception_handlers.c ****   if (cfsr & (1UL << 15))
 172              		.loc 1 127 0
 173 0086 15F4004F 		tst	r5, #32768
 174 008a 03D0     		beq	.L7
 128:../system/src/cortexm/exception_handlers.c ****     {
 129:../system/src/cortexm/exception_handlers.c ****       trace_printf (" BFAR =  %08X\n", bfar);
 175              		.loc 1 129 0
 176 008c 3146     		mov	r1, r6
 177 008e 1548     		ldr	r0, .L9+64
 178 0090 FFF7FEFF 		bl	trace_printf
 179              	.LVL19:
 180              	.L7:
 130:../system/src/cortexm/exception_handlers.c ****     }
 131:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Misc\n");
 181              		.loc 1 131 0
 182 0094 1448     		ldr	r0, .L9+68
 183 0096 FFF7FEFF 		bl	trace_printf
 184              	.LVL20:
 132:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 185              		.loc 1 132 0
 186 009a 0699     		ldr	r1, [sp, #24]
 187 009c 1348     		ldr	r0, .L9+72
 188 009e FFF7FEFF 		bl	trace_printf
 189              	.LVL21:
 190 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 191              	.LVL22:
 192              	.L10:
 193              		.align	2
 194              	.L9:
 195 00a4 00000000 		.word	.LC0
 196 00a8 10000000 		.word	.LC1
 197 00ac 20000000 		.word	.LC2
 198 00b0 30000000 		.word	.LC3
 199 00b4 40000000 		.word	.LC4
 200 00b8 50000000 		.word	.LC5
 201 00bc 60000000 		.word	.LC6
 202 00c0 70000000 		.word	.LC7
 203 00c4 80000000 		.word	.LC8
 204 00c8 90000000 		.word	.LC9
 205 00cc 9C000000 		.word	.LC10
 206 00d0 00ED00E0 		.word	-536810240
 207 00d4 AC000000 		.word	.LC11
 208 00d8 BC000000 		.word	.LC12
 209 00dc CC000000 		.word	.LC13
 210 00e0 DC000000 		.word	.LC14
 211 00e4 EC000000 		.word	.LC15
 212 00e8 FC000000 		.word	.LC16
 213 00ec 04010000 		.word	.LC17
 214              		.cfi_endproc
 215              	.LFE130:
 217              		.section	.text.isSemihosting,"ax",%progbits
 218              		.align	2
 219              		.global	isSemihosting
 220              		.thumb
 221              		.thumb_func
 223              	isSemihosting:
 224              	.LFB131:
 133:../system/src/cortexm/exception_handlers.c **** }
 134:../system/src/cortexm/exception_handlers.c **** 
 135:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 136:../system/src/cortexm/exception_handlers.c **** 
 137:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_6M__)
 138:../system/src/cortexm/exception_handlers.c **** 
 139:../system/src/cortexm/exception_handlers.c **** void
 140:../system/src/cortexm/exception_handlers.c **** dumpExceptionStack (ExceptionStackFrame* frame, uint32_t lr)
 141:../system/src/cortexm/exception_handlers.c **** {
 142:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Stack frame:\n");
 143:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R0 =  %08X\n", frame->r0);
 144:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R1 =  %08X\n", frame->r1);
 145:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R2 =  %08X\n", frame->r2);
 146:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R3 =  %08X\n", frame->r3);
 147:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R12 = %08X\n", frame->r12);
 148:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR =  %08X\n", frame->lr);
 149:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PC =  %08X\n", frame->pc);
 150:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PSR = %08X\n", frame->psr);
 151:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Misc\n");
 152:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 153:../system/src/cortexm/exception_handlers.c **** }
 154:../system/src/cortexm/exception_handlers.c **** 
 155:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_6M__)
 156:../system/src/cortexm/exception_handlers.c **** 
 157:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 158:../system/src/cortexm/exception_handlers.c **** 
 159:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
 160:../system/src/cortexm/exception_handlers.c **** 
 161:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 162:../system/src/cortexm/exception_handlers.c **** 
 163:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 164:../system/src/cortexm/exception_handlers.c **** 
 165:../system/src/cortexm/exception_handlers.c **** int
 166:../system/src/cortexm/exception_handlers.c **** isSemihosting (ExceptionStackFrame* frame, uint16_t opCode);
 167:../system/src/cortexm/exception_handlers.c **** 
 168:../system/src/cortexm/exception_handlers.c **** /**
 169:../system/src/cortexm/exception_handlers.c ****  * This function provides the minimum functionality to make a semihosting program execute even with
 170:../system/src/cortexm/exception_handlers.c ****  * @param frame pointer to an exception stack frame.
 171:../system/src/cortexm/exception_handlers.c ****  * @param opCode the 16-bin word of the BKPT instruction.
 172:../system/src/cortexm/exception_handlers.c ****  * @return 1 if the instruction was a valid semihosting call; 0 otherwise.
 173:../system/src/cortexm/exception_handlers.c ****  */
 174:../system/src/cortexm/exception_handlers.c **** int
 175:../system/src/cortexm/exception_handlers.c **** isSemihosting (ExceptionStackFrame* frame, uint16_t opCode)
 176:../system/src/cortexm/exception_handlers.c **** {
 225              		.loc 1 176 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230              	.LVL23:
 177:../system/src/cortexm/exception_handlers.c ****   uint16_t* pw = (uint16_t*) frame->pc;
 231              		.loc 1 177 0
 232 0000 8369     		ldr	r3, [r0, #24]
 233              	.LVL24:
 178:../system/src/cortexm/exception_handlers.c ****   if (*pw == opCode)
 234              		.loc 1 178 0
 235 0002 1A88     		ldrh	r2, [r3]
 236 0004 8A42     		cmp	r2, r1
 237 0006 07D1     		bne	.L14
 238              	.LBB2:
 179:../system/src/cortexm/exception_handlers.c ****     {
 180:../system/src/cortexm/exception_handlers.c ****       uint32_t r0 = frame->r0;
 239              		.loc 1 180 0
 240 0008 0268     		ldr	r2, [r0]
 241              	.LVL25:
 181:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS) || defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEM
 182:../system/src/cortexm/exception_handlers.c ****       uint32_t r1 = frame->r1;
 183:../system/src/cortexm/exception_handlers.c **** #endif
 184:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 185:../system/src/cortexm/exception_handlers.c ****       uint32_t* blk = (uint32_t*) r1;
 186:../system/src/cortexm/exception_handlers.c **** #endif
 187:../system/src/cortexm/exception_handlers.c **** 
 188:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 189:../system/src/cortexm/exception_handlers.c ****       // trace_printf ("sh r0=%d\n", r0);
 190:../system/src/cortexm/exception_handlers.c **** #endif
 191:../system/src/cortexm/exception_handlers.c **** 
 192:../system/src/cortexm/exception_handlers.c ****       switch (r0)
 242              		.loc 1 192 0
 243 000a 033A     		subs	r2, r2, #3
 244              	.LVL26:
 245 000c 012A     		cmp	r2, #1
 246 000e 05D8     		bhi	.L15
 193:../system/src/cortexm/exception_handlers.c ****         {
 194:../system/src/cortexm/exception_handlers.c **** 
 195:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING)
 196:../system/src/cortexm/exception_handlers.c **** 
 197:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_CLOCK:
 198:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ELAPSED:
 199:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_FLEN:
 200:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_GET_CMDLINE:
 201:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_REMOVE:
 202:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_RENAME:
 203:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_SEEK:
 204:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_SYSTEM:
 205:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TICKFREQ:
 206:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TMPNAM:
 207:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ISTTY:
 208:../system/src/cortexm/exception_handlers.c ****           frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 209:../system/src/cortexm/exception_handlers.c ****           break;
 210:../system/src/cortexm/exception_handlers.c **** 
 211:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_CLOSE:
 212:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // call is successful
 213:../system/src/cortexm/exception_handlers.c ****           break;
 214:../system/src/cortexm/exception_handlers.c **** 
 215:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ERRNO:
 216:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // the value of the C library errno variable.
 217:../system/src/cortexm/exception_handlers.c ****           break;
 218:../system/src/cortexm/exception_handlers.c **** 
 219:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_HEAPINFO:
 220:../system/src/cortexm/exception_handlers.c ****           blk[0] = 0; // heap_base
 221:../system/src/cortexm/exception_handlers.c ****           blk[1] = 0; // heap_limit
 222:../system/src/cortexm/exception_handlers.c ****           blk[2] = 0; // stack_base
 223:../system/src/cortexm/exception_handlers.c ****           blk[3] = 0; // stack_limit
 224:../system/src/cortexm/exception_handlers.c ****           break;
 225:../system/src/cortexm/exception_handlers.c **** 
 226:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ISERROR:
 227:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // 0 if the status word is not an error indication
 228:../system/src/cortexm/exception_handlers.c ****           break;
 229:../system/src/cortexm/exception_handlers.c **** 
 230:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_READ:
 231:../system/src/cortexm/exception_handlers.c ****           // If R0 contains the same value as word 3, the call has
 232:../system/src/cortexm/exception_handlers.c ****           // failed and EOF is assumed.
 233:../system/src/cortexm/exception_handlers.c ****           frame->r0 = blk[2];
 234:../system/src/cortexm/exception_handlers.c ****           break;
 235:../system/src/cortexm/exception_handlers.c **** 
 236:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_READC:
 237:../system/src/cortexm/exception_handlers.c ****           frame->r0 = '\0'; // the byte read from the console.
 238:../system/src/cortexm/exception_handlers.c ****           break;
 239:../system/src/cortexm/exception_handlers.c **** 
 240:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TIME:
 241:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // the number of seconds since 00:00 January 1, 1970.
 242:../system/src/cortexm/exception_handlers.c ****           break;
 243:../system/src/cortexm/exception_handlers.c **** 
 244:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_ReportException:
 245:../system/src/cortexm/exception_handlers.c **** 
 246:../system/src/cortexm/exception_handlers.c ****           NVIC_SystemReset ();
 247:../system/src/cortexm/exception_handlers.c ****           // Should not reach here
 248:../system/src/cortexm/exception_handlers.c ****           return 0;
 249:../system/src/cortexm/exception_handlers.c **** 
 250:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_USE_SEMIHOSTING)
 251:../system/src/cortexm/exception_handlers.c **** 
 252:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 253:../system/src/cortexm/exception_handlers.c **** 
 254:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDIN   (1)
 255:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDOUT  (2)
 256:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDERR  (3)
 257:../system/src/cortexm/exception_handlers.c **** 
 258:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_OPEN:
 259:../system/src/cortexm/exception_handlers.c ****           // Process only standard io/out/err and return 1/2/3
 260:../system/src/cortexm/exception_handlers.c ****           if (strcmp ((char*) blk[0], ":tt") == 0)
 261:../system/src/cortexm/exception_handlers.c ****             {
 262:../system/src/cortexm/exception_handlers.c ****               if ((blk[1] == 0))
 263:../system/src/cortexm/exception_handlers.c ****                 {
 264:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDIN;
 265:../system/src/cortexm/exception_handlers.c ****                   break;
 266:../system/src/cortexm/exception_handlers.c ****                 }
 267:../system/src/cortexm/exception_handlers.c ****               else if (blk[1] == 4)
 268:../system/src/cortexm/exception_handlers.c ****                 {
 269:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDOUT;
 270:../system/src/cortexm/exception_handlers.c ****                   break;
 271:../system/src/cortexm/exception_handlers.c ****                 }
 272:../system/src/cortexm/exception_handlers.c ****               else if (blk[1] == 8)
 273:../system/src/cortexm/exception_handlers.c ****                 {
 274:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDERR;
 275:../system/src/cortexm/exception_handlers.c ****                   break;
 276:../system/src/cortexm/exception_handlers.c ****                 }
 277:../system/src/cortexm/exception_handlers.c ****             }
 278:../system/src/cortexm/exception_handlers.c ****           frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 279:../system/src/cortexm/exception_handlers.c ****           break;
 280:../system/src/cortexm/exception_handlers.c **** 
 281:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITE:
 282:../system/src/cortexm/exception_handlers.c ****           // Silently ignore writes to stdout/stderr, fail on all other handler.
 283:../system/src/cortexm/exception_handlers.c ****           if ((blk[0] == HANDLER_STDOUT) || (blk[0] == HANDLER_STDERR))
 284:../system/src/cortexm/exception_handlers.c ****             {
 285:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 286:../system/src/cortexm/exception_handlers.c ****               frame->r0 = (uint32_t) blk[2]
 287:../system/src/cortexm/exception_handlers.c ****                   - trace_write ((char*) blk[1], blk[2]);
 288:../system/src/cortexm/exception_handlers.c **** #else
 289:../system/src/cortexm/exception_handlers.c ****               frame->r0 = 0; // all sent, no more.
 290:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 291:../system/src/cortexm/exception_handlers.c ****             }
 292:../system/src/cortexm/exception_handlers.c ****           else
 293:../system/src/cortexm/exception_handlers.c ****             {
 294:../system/src/cortexm/exception_handlers.c ****               // If other handler, return the total number of bytes
 295:../system/src/cortexm/exception_handlers.c ****               // as the number of bytes that are not written.
 296:../system/src/cortexm/exception_handlers.c ****               frame->r0 = blk[2];
 297:../system/src/cortexm/exception_handlers.c ****             }
 298:../system/src/cortexm/exception_handlers.c ****           break;
 299:../system/src/cortexm/exception_handlers.c **** 
 300:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 301:../system/src/cortexm/exception_handlers.c **** 
 302:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 303:../system/src/cortexm/exception_handlers.c **** 
 304:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITEC:
 305:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 306:../system/src/cortexm/exception_handlers.c ****           {
 307:../system/src/cortexm/exception_handlers.c ****             char ch = *((char*) r1);
 308:../system/src/cortexm/exception_handlers.c ****             trace_write (&ch, 1);
 309:../system/src/cortexm/exception_handlers.c ****           }
 310:../system/src/cortexm/exception_handlers.c **** #endif
 311:../system/src/cortexm/exception_handlers.c ****           // Register R0 is corrupted.
 312:../system/src/cortexm/exception_handlers.c ****           break;
 313:../system/src/cortexm/exception_handlers.c **** 
 314:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITE0:
 315:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 316:../system/src/cortexm/exception_handlers.c ****           {
 317:../system/src/cortexm/exception_handlers.c ****             char* p = ((char*) r1);
 318:../system/src/cortexm/exception_handlers.c ****             trace_write (p, strlen (p));
 319:../system/src/cortexm/exception_handlers.c ****           }
 320:../system/src/cortexm/exception_handlers.c **** #endif
 321:../system/src/cortexm/exception_handlers.c ****           // Register R0 is corrupted.
 322:../system/src/cortexm/exception_handlers.c ****           break;
 323:../system/src/cortexm/exception_handlers.c **** 
 324:../system/src/cortexm/exception_handlers.c **** #endif
 325:../system/src/cortexm/exception_handlers.c **** 
 326:../system/src/cortexm/exception_handlers.c ****         default:
 327:../system/src/cortexm/exception_handlers.c ****           return 0;
 328:../system/src/cortexm/exception_handlers.c ****         }
 329:../system/src/cortexm/exception_handlers.c **** 
 330:../system/src/cortexm/exception_handlers.c ****       // Alter the PC to make the exception returns to
 331:../system/src/cortexm/exception_handlers.c ****       // the instruction after the faulty BKPT.
 332:../system/src/cortexm/exception_handlers.c ****       frame->pc += 2;
 247              		.loc 1 332 0
 248 0010 0233     		adds	r3, r3, #2
 249              	.LVL27:
 250 0012 8361     		str	r3, [r0, #24]
 251              	.LVL28:
 333:../system/src/cortexm/exception_handlers.c ****       return 1;
 252              		.loc 1 333 0
 253 0014 0120     		movs	r0, #1
 254              	.LVL29:
 255 0016 7047     		bx	lr
 256              	.LVL30:
 257              	.L14:
 258              	.LBE2:
 334:../system/src/cortexm/exception_handlers.c ****     }
 335:../system/src/cortexm/exception_handlers.c ****   return 0;
 259              		.loc 1 335 0
 260 0018 0020     		movs	r0, #0
 261              	.LVL31:
 262 001a 7047     		bx	lr
 263              	.LVL32:
 264              	.L15:
 265              	.LBB3:
 327:../system/src/cortexm/exception_handlers.c ****         }
 266              		.loc 1 327 0
 267 001c 0020     		movs	r0, #0
 268              	.LVL33:
 269              	.LBE3:
 336:../system/src/cortexm/exception_handlers.c **** }
 270              		.loc 1 336 0
 271 001e 7047     		bx	lr
 272              		.cfi_endproc
 273              	.LFE131:
 275              		.section	.after_vectors
 276              		.align	2
 277              		.weak	HardFault_Handler
 278              		.thumb
 279              		.thumb_func
 281              	HardFault_Handler:
 282              	.LFB132:
 337:../system/src/cortexm/exception_handlers.c **** 
 338:../system/src/cortexm/exception_handlers.c **** #endif
 339:../system/src/cortexm/exception_handlers.c **** 
 340:../system/src/cortexm/exception_handlers.c **** // Hard Fault handler wrapper in assembly.
 341:../system/src/cortexm/exception_handlers.c **** // It extracts the location of stack frame and passes it to handler
 342:../system/src/cortexm/exception_handlers.c **** // in C as a pointer. We also pass the LR value as second
 343:../system/src/cortexm/exception_handlers.c **** // parameter.
 344:../system/src/cortexm/exception_handlers.c **** // (Based on Joseph Yiu's, The Definitive Guide to ARM Cortex-M3 and
 345:../system/src/cortexm/exception_handlers.c **** // Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).
 346:../system/src/cortexm/exception_handlers.c **** 
 347:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 348:../system/src/cortexm/exception_handlers.c **** HardFault_Handler (void)
 349:../system/src/cortexm/exception_handlers.c **** {
 283              		.loc 1 349 0
 284              		.cfi_startproc
 285              		@ Naked Function: prologue and epilogue provided by programmer.
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 350:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 288              		.loc 1 350 0
 289              		.syntax unified
 290              	@ 350 "../system/src/cortexm/exception_handlers.c" 1
 291 000c 1EF0040F 		 tst lr,#4       
 292 0010 0CBF     	 ite eq          
 293 0012 EFF30880 	 mrseq r0,msp    
 294 0016 EFF30980 	 mrsne r0,psp    
 295 001a 7146     	 mov r1,lr       
 296 001c 414A     	 ldr r2,=HardFault_Handler_C 
 297 001e 1047     	 bx r2
 298              	@ 0 "" 2
 351:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 352:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 353:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 354:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 355:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 356:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=HardFault_Handler_C \n"
 357:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 358:../system/src/cortexm/exception_handlers.c **** 
 359:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 360:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 361:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 362:../system/src/cortexm/exception_handlers.c ****   );
 363:../system/src/cortexm/exception_handlers.c **** }
 299              		.loc 1 363 0
 300              		.thumb
 301              		.syntax unified
 302              		.cfi_endproc
 303              	.LFE132:
 305              		.align	2
 306              		.weak	HardFault_Handler_C
 307              		.thumb
 308              		.thumb_func
 310              	HardFault_Handler_C:
 311              	.LFB133:
 364:../system/src/cortexm/exception_handlers.c **** 
 365:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 366:../system/src/cortexm/exception_handlers.c **** HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 367:../system/src/cortexm/exception_handlers.c ****                      uint32_t lr __attribute__((unused)))
 368:../system/src/cortexm/exception_handlers.c **** {
 312              		.loc 1 368 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL34:
 317 0020 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 318              		.cfi_def_cfa_offset 24
 319              		.cfi_offset 4, -24
 320              		.cfi_offset 5, -20
 321              		.cfi_offset 6, -16
 322              		.cfi_offset 7, -12
 323              		.cfi_offset 8, -8
 324              		.cfi_offset 14, -4
 325 0024 82B0     		sub	sp, sp, #8
 326              		.cfi_def_cfa_offset 32
 327 0026 0446     		mov	r4, r0
 328 0028 8846     		mov	r8, r1
 369:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 370:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 329              		.loc 1 370 0
 330 002a 134B     		ldr	r3, .L22
 331 002c 5E6B     		ldr	r6, [r3, #52]
 332              	.LVL35:
 371:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 333              		.loc 1 371 0
 334 002e 9F6B     		ldr	r7, [r3, #56]
 335              	.LVL36:
 372:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 336              		.loc 1 372 0
 337 0030 9D6A     		ldr	r5, [r3, #40]
 338              	.LVL37:
 373:../system/src/cortexm/exception_handlers.c **** #endif
 374:../system/src/cortexm/exception_handlers.c **** 
 375:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 376:../system/src/cortexm/exception_handlers.c **** 
 377:../system/src/cortexm/exception_handlers.c ****   // If the BKPT instruction is executed with C_DEBUGEN == 0 and MON_EN == 0,
 378:../system/src/cortexm/exception_handlers.c ****   // it will cause the processor to enter a HardFault exception, with DEBUGEVT
 379:../system/src/cortexm/exception_handlers.c ****   // in the Hard Fault Status register (HFSR) set to 1, and BKPT in the
 380:../system/src/cortexm/exception_handlers.c ****   // Debug Fault Status register (DFSR) also set to 1.
 381:../system/src/cortexm/exception_handlers.c **** 
 382:../system/src/cortexm/exception_handlers.c ****   if (((SCB->DFSR & SCB_DFSR_BKPT_Msk) != 0)
 339              		.loc 1 382 0
 340 0032 1B6B     		ldr	r3, [r3, #48]
 341 0034 13F0020F 		tst	r3, #2
 342 0038 0DD0     		beq	.L18
 383:../system/src/cortexm/exception_handlers.c ****       && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
 343              		.loc 1 383 0
 344 003a 0F4B     		ldr	r3, .L22
 345 003c DB6A     		ldr	r3, [r3, #44]
 346 003e 002B     		cmp	r3, #0
 347 0040 09DA     		bge	.L18
 384:../system/src/cortexm/exception_handlers.c ****     {
 385:../system/src/cortexm/exception_handlers.c ****       if (isSemihosting (frame, 0xBE00 + (AngelSWI & 0xFF)))
 348              		.loc 1 385 0
 349 0042 4BF6AB61 		movw	r1, #48811
 350              	.LVL38:
 351 0046 FFF7FEFF 		bl	isSemihosting
 352              	.LVL39:
 353 004a 20B1     		cbz	r0, .L18
 386:../system/src/cortexm/exception_handlers.c ****         {
 387:../system/src/cortexm/exception_handlers.c ****           // Clear the exception cause in exception status.
 388:../system/src/cortexm/exception_handlers.c ****           SCB->HFSR = SCB_HFSR_DEBUGEVT_Msk;
 354              		.loc 1 388 0
 355 004c 4FF00042 		mov	r2, #-2147483648
 356 0050 094B     		ldr	r3, .L22
 357 0052 DA62     		str	r2, [r3, #44]
 389:../system/src/cortexm/exception_handlers.c **** 
 390:../system/src/cortexm/exception_handlers.c ****           // Continue after the BKPT
 391:../system/src/cortexm/exception_handlers.c ****           return;
 358              		.loc 1 391 0
 359 0054 0CE0     		b	.L20
 360              	.L18:
 392:../system/src/cortexm/exception_handlers.c ****         }
 393:../system/src/cortexm/exception_handlers.c ****     }
 394:../system/src/cortexm/exception_handlers.c **** 
 395:../system/src/cortexm/exception_handlers.c **** #endif
 396:../system/src/cortexm/exception_handlers.c **** 
 397:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 398:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[HardFault]\n");
 361              		.loc 1 398 0
 362 0056 0948     		ldr	r0, .L22+4
 363 0058 FFF7FEFF 		bl	trace_printf
 364              	.LVL40:
 399:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 365              		.loc 1 399 0
 366 005c CDF80080 		str	r8, [sp]
 367 0060 3B46     		mov	r3, r7
 368 0062 3246     		mov	r2, r6
 369 0064 2946     		mov	r1, r5
 370 0066 2046     		mov	r0, r4
 371 0068 FFF7FEFF 		bl	dumpExceptionStack
 372              	.LVL41:
 400:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 401:../system/src/cortexm/exception_handlers.c **** 
 402:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 403:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 373              		.loc 1 403 0
 374              		.syntax unified
 375              	@ 403 "../system/src/cortexm/exception_handlers.c" 1
 376 006c 00BE     		bkpt 0
 377              	@ 0 "" 2
 378              		.thumb
 379              		.syntax unified
 380              	.L19:
 381 006e FEE7     		b	.L19
 382              	.L20:
 404:../system/src/cortexm/exception_handlers.c **** #endif
 405:../system/src/cortexm/exception_handlers.c ****   while (1)
 406:../system/src/cortexm/exception_handlers.c ****     {
 407:../system/src/cortexm/exception_handlers.c ****     }
 408:../system/src/cortexm/exception_handlers.c **** }
 383              		.loc 1 408 0
 384 0070 02B0     		add	sp, sp, #8
 385              		.cfi_def_cfa_offset 24
 386              		@ sp needed
 387 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 388              	.LVL42:
 389              	.L23:
 390 0076 00BF     		.align	2
 391              	.L22:
 392 0078 00ED00E0 		.word	-536810240
 393 007c 1C010000 		.word	.LC18
 394              		.cfi_endproc
 395              	.LFE133:
 397              		.align	2
 398              		.weak	MemManage_Handler
 399              		.thumb
 400              		.thumb_func
 402              	MemManage_Handler:
 403              	.LFB134:
 409:../system/src/cortexm/exception_handlers.c **** 
 410:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 411:../system/src/cortexm/exception_handlers.c **** 
 412:../system/src/cortexm/exception_handlers.c **** 
 413:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_6M__)
 414:../system/src/cortexm/exception_handlers.c **** 
 415:../system/src/cortexm/exception_handlers.c **** // Hard Fault handler wrapper in assembly.
 416:../system/src/cortexm/exception_handlers.c **** // It extracts the location of stack frame and passes it to handler
 417:../system/src/cortexm/exception_handlers.c **** // in C as a pointer. We also pass the LR value as second
 418:../system/src/cortexm/exception_handlers.c **** // parameter.
 419:../system/src/cortexm/exception_handlers.c **** // (Based on Joseph Yiu's, The Definitive Guide to ARM Cortex-M0
 420:../system/src/cortexm/exception_handlers.c **** // First Edition, Chap. 12.8, page 402).
 421:../system/src/cortexm/exception_handlers.c **** 
 422:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 423:../system/src/cortexm/exception_handlers.c **** HardFault_Handler (void)
 424:../system/src/cortexm/exception_handlers.c **** {
 425:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 426:../system/src/cortexm/exception_handlers.c ****       " movs r0,#4      \n"
 427:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 428:../system/src/cortexm/exception_handlers.c ****       " tst r0,r1       \n"
 429:../system/src/cortexm/exception_handlers.c ****       " beq 1f          \n"
 430:../system/src/cortexm/exception_handlers.c ****       " mrs r0,psp      \n"
 431:../system/src/cortexm/exception_handlers.c ****       " b   2f          \n"
 432:../system/src/cortexm/exception_handlers.c ****       "1:               \n"
 433:../system/src/cortexm/exception_handlers.c ****       " mrs r0,msp      \n"
 434:../system/src/cortexm/exception_handlers.c ****       "2:"
 435:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 436:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=HardFault_Handler_C \n"
 437:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 438:../system/src/cortexm/exception_handlers.c **** 
 439:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 440:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 441:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 442:../system/src/cortexm/exception_handlers.c ****   );
 443:../system/src/cortexm/exception_handlers.c **** }
 444:../system/src/cortexm/exception_handlers.c **** 
 445:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 446:../system/src/cortexm/exception_handlers.c **** HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 447:../system/src/cortexm/exception_handlers.c ****                      uint32_t lr __attribute__((unused)))
 448:../system/src/cortexm/exception_handlers.c **** {
 449:../system/src/cortexm/exception_handlers.c ****   // There is no semihosting support for Cortex-M0, since on ARMv6-M
 450:../system/src/cortexm/exception_handlers.c ****   // faults are fatal and it is not possible to return from the handler.
 451:../system/src/cortexm/exception_handlers.c **** 
 452:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 453:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[HardFault]\n");
 454:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, lr);
 455:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 456:../system/src/cortexm/exception_handlers.c **** 
 457:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 458:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 459:../system/src/cortexm/exception_handlers.c **** #endif
 460:../system/src/cortexm/exception_handlers.c ****   while (1)
 461:../system/src/cortexm/exception_handlers.c ****     {
 462:../system/src/cortexm/exception_handlers.c ****     }
 463:../system/src/cortexm/exception_handlers.c **** }
 464:../system/src/cortexm/exception_handlers.c **** 
 465:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_6M__)
 466:../system/src/cortexm/exception_handlers.c **** 
 467:../system/src/cortexm/exception_handlers.c **** 
 468:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 469:../system/src/cortexm/exception_handlers.c **** 
 470:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 471:../system/src/cortexm/exception_handlers.c **** MemManage_Handler (void)
 472:../system/src/cortexm/exception_handlers.c **** {
 404              		.loc 1 472 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 473:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 474:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 409              		.loc 1 474 0
 410              		.syntax unified
 411              	@ 474 "../system/src/cortexm/exception_handlers.c" 1
 412 0080 00BE     		bkpt 0
 413              	@ 0 "" 2
 414              		.thumb
 415              		.syntax unified
 416              	.L25:
 417 0082 FEE7     		b	.L25
 418              		.cfi_endproc
 419              	.LFE134:
 421              		.align	2
 422              		.weak	BusFault_Handler
 423              		.thumb
 424              		.thumb_func
 426              	BusFault_Handler:
 427              	.LFB135:
 475:../system/src/cortexm/exception_handlers.c **** #endif
 476:../system/src/cortexm/exception_handlers.c ****   while (1)
 477:../system/src/cortexm/exception_handlers.c ****     {
 478:../system/src/cortexm/exception_handlers.c ****     }
 479:../system/src/cortexm/exception_handlers.c **** }
 480:../system/src/cortexm/exception_handlers.c **** 
 481:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 482:../system/src/cortexm/exception_handlers.c **** BusFault_Handler (void)
 483:../system/src/cortexm/exception_handlers.c **** {
 428              		.loc 1 483 0
 429              		.cfi_startproc
 430              		@ Naked Function: prologue and epilogue provided by programmer.
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 484:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 433              		.loc 1 484 0
 434              		.syntax unified
 435              	@ 484 "../system/src/cortexm/exception_handlers.c" 1
 436 0084 1EF0040F 		 tst lr,#4       
 437 0088 0CBF     	 ite eq          
 438 008a EFF30880 	 mrseq r0,msp    
 439 008e EFF30980 	 mrsne r0,psp    
 440 0092 7146     	 mov r1,lr       
 441 0094 244A     	 ldr r2,=BusFault_Handler_C 
 442 0096 1047     	 bx r2
 443              	@ 0 "" 2
 485:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 486:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 487:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 488:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 489:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 490:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=BusFault_Handler_C \n"
 491:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 492:../system/src/cortexm/exception_handlers.c **** 
 493:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 494:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 495:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 496:../system/src/cortexm/exception_handlers.c ****   );
 497:../system/src/cortexm/exception_handlers.c **** }
 444              		.loc 1 497 0
 445              		.thumb
 446              		.syntax unified
 447              		.cfi_endproc
 448              	.LFE135:
 450              		.align	2
 451              		.weak	BusFault_Handler_C
 452              		.thumb
 453              		.thumb_func
 455              	BusFault_Handler_C:
 456              	.LFB136:
 498:../system/src/cortexm/exception_handlers.c **** 
 499:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 500:../system/src/cortexm/exception_handlers.c **** BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 501:../system/src/cortexm/exception_handlers.c ****                     uint32_t lr __attribute__((unused)))
 502:../system/src/cortexm/exception_handlers.c **** {
 457              		.loc 1 502 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              	.LVL43:
 462 0098 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 463              		.cfi_def_cfa_offset 24
 464              		.cfi_offset 4, -24
 465              		.cfi_offset 5, -20
 466              		.cfi_offset 6, -16
 467              		.cfi_offset 7, -12
 468              		.cfi_offset 8, -8
 469              		.cfi_offset 14, -4
 470 009c 82B0     		sub	sp, sp, #8
 471              		.cfi_def_cfa_offset 32
 472 009e 0446     		mov	r4, r0
 473 00a0 8846     		mov	r8, r1
 503:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 504:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 474              		.loc 1 504 0
 475 00a2 084B     		ldr	r3, .L30
 476 00a4 5E6B     		ldr	r6, [r3, #52]
 477              	.LVL44:
 505:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 478              		.loc 1 505 0
 479 00a6 9F6B     		ldr	r7, [r3, #56]
 480              	.LVL45:
 506:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 481              		.loc 1 506 0
 482 00a8 9D6A     		ldr	r5, [r3, #40]
 483              	.LVL46:
 507:../system/src/cortexm/exception_handlers.c **** 
 508:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[BusFault]\n");
 484              		.loc 1 508 0
 485 00aa 0748     		ldr	r0, .L30+4
 486              	.LVL47:
 487 00ac FFF7FEFF 		bl	trace_printf
 488              	.LVL48:
 509:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 489              		.loc 1 509 0
 490 00b0 CDF80080 		str	r8, [sp]
 491 00b4 3B46     		mov	r3, r7
 492 00b6 3246     		mov	r2, r6
 493 00b8 2946     		mov	r1, r5
 494 00ba 2046     		mov	r0, r4
 495 00bc FFF7FEFF 		bl	dumpExceptionStack
 496              	.LVL49:
 510:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 511:../system/src/cortexm/exception_handlers.c **** 
 512:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 513:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 497              		.loc 1 513 0
 498              		.syntax unified
 499              	@ 513 "../system/src/cortexm/exception_handlers.c" 1
 500 00c0 00BE     		bkpt 0
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504              	.L28:
 505 00c2 FEE7     		b	.L28
 506              	.L31:
 507              		.align	2
 508              	.L30:
 509 00c4 00ED00E0 		.word	-536810240
 510 00c8 2C010000 		.word	.LC19
 511              		.cfi_endproc
 512              	.LFE136:
 514              		.align	2
 515              		.weak	UsageFault_Handler
 516              		.thumb
 517              		.thumb_func
 519              	UsageFault_Handler:
 520              	.LFB137:
 514:../system/src/cortexm/exception_handlers.c **** #endif
 515:../system/src/cortexm/exception_handlers.c ****   while (1)
 516:../system/src/cortexm/exception_handlers.c ****     {
 517:../system/src/cortexm/exception_handlers.c ****     }
 518:../system/src/cortexm/exception_handlers.c **** }
 519:../system/src/cortexm/exception_handlers.c **** 
 520:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 521:../system/src/cortexm/exception_handlers.c **** UsageFault_Handler (void)
 522:../system/src/cortexm/exception_handlers.c **** {
 521              		.loc 1 522 0
 522              		.cfi_startproc
 523              		@ Naked Function: prologue and epilogue provided by programmer.
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 523:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 526              		.loc 1 523 0
 527              		.syntax unified
 528              	@ 523 "../system/src/cortexm/exception_handlers.c" 1
 529 00cc 1EF0040F 		 tst lr,#4       
 530 00d0 0CBF     	 ite eq          
 531 00d2 EFF30880 	 mrseq r0,msp    
 532 00d6 EFF30980 	 mrsne r0,psp    
 533 00da 7146     	 mov r1,lr       
 534 00dc 134A     	 ldr r2,=UsageFault_Handler_C 
 535 00de 1047     	 bx r2
 536              	@ 0 "" 2
 524:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 525:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 526:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 527:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 528:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 529:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=UsageFault_Handler_C \n"
 530:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 531:../system/src/cortexm/exception_handlers.c **** 
 532:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 533:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 534:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 535:../system/src/cortexm/exception_handlers.c ****   );
 536:../system/src/cortexm/exception_handlers.c **** }
 537              		.loc 1 536 0
 538              		.thumb
 539              		.syntax unified
 540              		.cfi_endproc
 541              	.LFE137:
 543              		.align	2
 544              		.weak	UsageFault_Handler_C
 545              		.thumb
 546              		.thumb_func
 548              	UsageFault_Handler_C:
 549              	.LFB138:
 537:../system/src/cortexm/exception_handlers.c **** 
 538:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 539:../system/src/cortexm/exception_handlers.c **** UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 540:../system/src/cortexm/exception_handlers.c ****                       uint32_t lr __attribute__((unused)))
 541:../system/src/cortexm/exception_handlers.c **** {
 550              		.loc 1 541 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              	.LVL50:
 555 00e0 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 556              		.cfi_def_cfa_offset 24
 557              		.cfi_offset 4, -24
 558              		.cfi_offset 5, -20
 559              		.cfi_offset 6, -16
 560              		.cfi_offset 7, -12
 561              		.cfi_offset 8, -8
 562              		.cfi_offset 14, -4
 563 00e4 82B0     		sub	sp, sp, #8
 564              		.cfi_def_cfa_offset 32
 565 00e6 0446     		mov	r4, r0
 566 00e8 8846     		mov	r8, r1
 542:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 543:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 567              		.loc 1 543 0
 568 00ea 084B     		ldr	r3, .L36
 569 00ec 5E6B     		ldr	r6, [r3, #52]
 570              	.LVL51:
 544:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 571              		.loc 1 544 0
 572 00ee 9F6B     		ldr	r7, [r3, #56]
 573              	.LVL52:
 545:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 574              		.loc 1 545 0
 575 00f0 9D6A     		ldr	r5, [r3, #40]
 576              	.LVL53:
 546:../system/src/cortexm/exception_handlers.c **** #endif
 547:../system/src/cortexm/exception_handlers.c **** 
 548:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 549:../system/src/cortexm/exception_handlers.c **** 
 550:../system/src/cortexm/exception_handlers.c ****   if ((cfsr & (1UL << 16)) != 0) // UNDEFINSTR
 551:../system/src/cortexm/exception_handlers.c ****     {
 552:../system/src/cortexm/exception_handlers.c ****       // For testing purposes, instead of BKPT use 'setend be'.
 553:../system/src/cortexm/exception_handlers.c ****       if (isSemihosting (frame, AngelSWITestFaultOpCode))
 554:../system/src/cortexm/exception_handlers.c ****         {
 555:../system/src/cortexm/exception_handlers.c ****           return;
 556:../system/src/cortexm/exception_handlers.c ****         }
 557:../system/src/cortexm/exception_handlers.c ****     }
 558:../system/src/cortexm/exception_handlers.c **** 
 559:../system/src/cortexm/exception_handlers.c **** #endif
 560:../system/src/cortexm/exception_handlers.c **** 
 561:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 562:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[UsageFault]\n");
 577              		.loc 1 562 0
 578 00f2 0748     		ldr	r0, .L36+4
 579              	.LVL54:
 580 00f4 FFF7FEFF 		bl	trace_printf
 581              	.LVL55:
 563:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 582              		.loc 1 563 0
 583 00f8 CDF80080 		str	r8, [sp]
 584 00fc 3B46     		mov	r3, r7
 585 00fe 3246     		mov	r2, r6
 586 0100 2946     		mov	r1, r5
 587 0102 2046     		mov	r0, r4
 588 0104 FFF7FEFF 		bl	dumpExceptionStack
 589              	.LVL56:
 564:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 565:../system/src/cortexm/exception_handlers.c **** 
 566:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 567:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 590              		.loc 1 567 0
 591              		.syntax unified
 592              	@ 567 "../system/src/cortexm/exception_handlers.c" 1
 593 0108 00BE     		bkpt 0
 594              	@ 0 "" 2
 595              		.thumb
 596              		.syntax unified
 597              	.L34:
 598 010a FEE7     		b	.L34
 599              	.L37:
 600              		.align	2
 601              	.L36:
 602 010c 00ED00E0 		.word	-536810240
 603 0110 38010000 		.word	.LC20
 604              		.cfi_endproc
 605              	.LFE138:
 607              		.align	2
 608              		.weak	SVC_Handler
 609              		.thumb
 610              		.thumb_func
 612              	SVC_Handler:
 613              	.LFB139:
 568:../system/src/cortexm/exception_handlers.c **** #endif
 569:../system/src/cortexm/exception_handlers.c ****   while (1)
 570:../system/src/cortexm/exception_handlers.c ****     {
 571:../system/src/cortexm/exception_handlers.c ****     }
 572:../system/src/cortexm/exception_handlers.c **** }
 573:../system/src/cortexm/exception_handlers.c **** 
 574:../system/src/cortexm/exception_handlers.c **** #endif
 575:../system/src/cortexm/exception_handlers.c **** 
 576:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 577:../system/src/cortexm/exception_handlers.c **** SVC_Handler (void)
 578:../system/src/cortexm/exception_handlers.c **** {
 614              		.loc 1 578 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 579:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 580:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 619              		.loc 1 580 0
 620              		.syntax unified
 621              	@ 580 "../system/src/cortexm/exception_handlers.c" 1
 622 0114 00BE     		bkpt 0
 623              	@ 0 "" 2
 624              		.thumb
 625              		.syntax unified
 626              	.L39:
 627 0116 FEE7     		b	.L39
 628              		.cfi_endproc
 629              	.LFE139:
 631              		.align	2
 632              		.weak	DebugMon_Handler
 633              		.thumb
 634              		.thumb_func
 636              	DebugMon_Handler:
 637              	.LFB140:
 581:../system/src/cortexm/exception_handlers.c **** #endif
 582:../system/src/cortexm/exception_handlers.c ****   while (1)
 583:../system/src/cortexm/exception_handlers.c ****     {
 584:../system/src/cortexm/exception_handlers.c ****     }
 585:../system/src/cortexm/exception_handlers.c **** }
 586:../system/src/cortexm/exception_handlers.c **** 
 587:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 588:../system/src/cortexm/exception_handlers.c **** 
 589:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 590:../system/src/cortexm/exception_handlers.c **** DebugMon_Handler (void)
 591:../system/src/cortexm/exception_handlers.c **** {
 638              		.loc 1 591 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 592:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 593:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 643              		.loc 1 593 0
 644              		.syntax unified
 645              	@ 593 "../system/src/cortexm/exception_handlers.c" 1
 646 0118 00BE     		bkpt 0
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650              	.L41:
 651 011a FEE7     		b	.L41
 652              		.cfi_endproc
 653              	.LFE140:
 655              		.align	2
 656              		.weak	PendSV_Handler
 657              		.thumb
 658              		.thumb_func
 660              	PendSV_Handler:
 661              	.LFB141:
 594:../system/src/cortexm/exception_handlers.c **** #endif
 595:../system/src/cortexm/exception_handlers.c ****   while (1)
 596:../system/src/cortexm/exception_handlers.c ****     {
 597:../system/src/cortexm/exception_handlers.c ****     }
 598:../system/src/cortexm/exception_handlers.c **** }
 599:../system/src/cortexm/exception_handlers.c **** 
 600:../system/src/cortexm/exception_handlers.c **** #endif
 601:../system/src/cortexm/exception_handlers.c **** 
 602:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 603:../system/src/cortexm/exception_handlers.c **** PendSV_Handler (void)
 604:../system/src/cortexm/exception_handlers.c **** {
 662              		.loc 1 604 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 605:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 606:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 667              		.loc 1 606 0
 668              		.syntax unified
 669              	@ 606 "../system/src/cortexm/exception_handlers.c" 1
 670 011c 00BE     		bkpt 0
 671              	@ 0 "" 2
 672              		.thumb
 673              		.syntax unified
 674              	.L43:
 675 011e FEE7     		b	.L43
 676              		.cfi_endproc
 677              	.LFE141:
 679              		.align	2
 680              		.weak	SysTick_Handler
 681              		.thumb
 682              		.thumb_func
 684              	SysTick_Handler:
 685              	.LFB142:
 607:../system/src/cortexm/exception_handlers.c **** #endif
 608:../system/src/cortexm/exception_handlers.c ****   while (1)
 609:../system/src/cortexm/exception_handlers.c ****     {
 610:../system/src/cortexm/exception_handlers.c ****     }
 611:../system/src/cortexm/exception_handlers.c **** }
 612:../system/src/cortexm/exception_handlers.c **** 
 613:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 614:../system/src/cortexm/exception_handlers.c **** SysTick_Handler (void)
 615:../system/src/cortexm/exception_handlers.c **** {
 686              		.loc 1 615 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 0120 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE142:
 695 0122 0000     		.section	.rodata.str1.4,"aMS",%progbits,1
 696              		.align	2
 697              	.LC0:
 698 0000 53746163 		.ascii	"Stack frame:\012\000"
 698      6B206672 
 698      616D653A 
 698      0A00
 699 000e 0000     		.space	2
 700              	.LC1:
 701 0010 20523020 		.ascii	" R0 =  %08X\012\000"
 701      3D202025 
 701      3038580A 
 701      00
 702 001d 000000   		.space	3
 703              	.LC2:
 704 0020 20523120 		.ascii	" R1 =  %08X\012\000"
 704      3D202025 
 704      3038580A 
 704      00
 705 002d 000000   		.space	3
 706              	.LC3:
 707 0030 20523220 		.ascii	" R2 =  %08X\012\000"
 707      3D202025 
 707      3038580A 
 707      00
 708 003d 000000   		.space	3
 709              	.LC4:
 710 0040 20523320 		.ascii	" R3 =  %08X\012\000"
 710      3D202025 
 710      3038580A 
 710      00
 711 004d 000000   		.space	3
 712              	.LC5:
 713 0050 20523132 		.ascii	" R12 = %08X\012\000"
 713      203D2025 
 713      3038580A 
 713      00
 714 005d 000000   		.space	3
 715              	.LC6:
 716 0060 204C5220 		.ascii	" LR =  %08X\012\000"
 716      3D202025 
 716      3038580A 
 716      00
 717 006d 000000   		.space	3
 718              	.LC7:
 719 0070 20504320 		.ascii	" PC =  %08X\012\000"
 719      3D202025 
 719      3038580A 
 719      00
 720 007d 000000   		.space	3
 721              	.LC8:
 722 0080 20505352 		.ascii	" PSR = %08X\012\000"
 722      203D2025 
 722      3038580A 
 722      00
 723 008d 000000   		.space	3
 724              	.LC9:
 725 0090 4653522F 		.ascii	"FSR/FAR:\012\000"
 725      4641523A 
 725      0A00
 726 009a 0000     		.space	2
 727              	.LC10:
 728 009c 20434653 		.ascii	" CFSR =  %08X\012\000"
 728      52203D20 
 728      20253038 
 728      580A00
 729 00ab 00       		.space	1
 730              	.LC11:
 731 00ac 20484653 		.ascii	" HFSR =  %08X\012\000"
 731      52203D20 
 731      20253038 
 731      580A00
 732 00bb 00       		.space	1
 733              	.LC12:
 734 00bc 20444653 		.ascii	" DFSR =  %08X\012\000"
 734      52203D20 
 734      20253038 
 734      580A00
 735 00cb 00       		.space	1
 736              	.LC13:
 737 00cc 20414653 		.ascii	" AFSR =  %08X\012\000"
 737      52203D20 
 737      20253038 
 737      580A00
 738 00db 00       		.space	1
 739              	.LC14:
 740 00dc 204D4D46 		.ascii	" MMFAR = %08X\012\000"
 740      4152203D 
 740      20253038 
 740      580A00
 741 00eb 00       		.space	1
 742              	.LC15:
 743 00ec 20424641 		.ascii	" BFAR =  %08X\012\000"
 743      52203D20 
 743      20253038 
 743      580A00
 744 00fb 00       		.space	1
 745              	.LC16:
 746 00fc 4D697363 		.ascii	"Misc\012\000"
 746      0A00
 747 0102 0000     		.space	2
 748              	.LC17:
 749 0104 204C522F 		.ascii	" LR/EXC_RETURN= %08X\012\000"
 749      4558435F 
 749      52455455 
 749      524E3D20 
 749      25303858 
 750 011a 0000     		.space	2
 751              	.LC18:
 752 011c 5B486172 		.ascii	"[HardFault]\012\000"
 752      64466175 
 752      6C745D0A 
 752      00
 753 0129 000000   		.space	3
 754              	.LC19:
 755 012c 5B427573 		.ascii	"[BusFault]\012\000"
 755      4661756C 
 755      745D0A00 
 756              	.LC20:
 757 0138 5B557361 		.ascii	"[UsageFault]\012\000"
 757      67654661 
 757      756C745D 
 757      0A00
 758              		.weak	_start
 759              		.text
 760              	.Letext0:
 761              		.file 2 "e:\\iti_9_months\\embeddedsystems\\tourkey\\tools\\arm gcc\\lib\\gcc\\arm-none-eabi\\5.4.
 762              		.file 3 "../system/include/cortexm/ExceptionHandlers.h"
 763              		.file 4 "../system/include/cmsis/core_cm4.h"
 764              		.file 5 "../system/include/diag/Trace.h"
 765              		.file 6 "../system/include/arm/semihosting.h"
DEFINED SYMBOLS
                            *ABS*:00000000 exception_handlers.c
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:20     .after_vectors:00000000 $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:25     .after_vectors:00000000 Reset_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:48     .after_vectors:00000008 NMI_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:68     .text.dumpExceptionStack:00000000 $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:73     .text.dumpExceptionStack:00000000 dumpExceptionStack
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:195    .text.dumpExceptionStack:000000a4 $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:218    .text.isSemihosting:00000000 $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:223    .text.isSemihosting:00000000 isSemihosting
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:281    .after_vectors:0000000c HardFault_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:310    .after_vectors:00000020 HardFault_Handler_C
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:392    .after_vectors:00000078 $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:397    .after_vectors:00000080 $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:402    .after_vectors:00000080 MemManage_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:426    .after_vectors:00000084 BusFault_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:455    .after_vectors:00000098 BusFault_Handler_C
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:509    .after_vectors:000000c4 $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:514    .after_vectors:000000cc $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:519    .after_vectors:000000cc UsageFault_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:548    .after_vectors:000000e0 UsageFault_Handler_C
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:602    .after_vectors:0000010c $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:607    .after_vectors:00000114 $t
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:612    .after_vectors:00000114 SVC_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:636    .after_vectors:00000118 DebugMon_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:660    .after_vectors:0000011c PendSV_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:684    .after_vectors:00000120 SysTick_Handler
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:696    .rodata.str1.4:00000000 $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:695    .after_vectors:00000122 $d
C:\Users\NoteBook\AppData\Local\Temp\ccoLlTNT.s:55848  .after_vectors:00000124 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.a2f836f628cd58bfd83621916854a0d2
                           .group:00000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:00000000 wm4.stm32f4xx.h.57.caf7de43308682a5c2971c240280861f
                           .group:00000000 wm4.stm32f401xc.h.53.32ae70b26f06e84261965f4f8509143f
                           .group:00000000 wm4.core_cm4.h.42.a0115185325a5803e76e92019fa813c6
                           .group:00000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:00000000 wm4.core_cm4.h.231.bf7ac9deadcf6cf58f5e6091077d58ba
                           .group:00000000 wm4.stm32f401xc.h.665.1631b5232f7e84a5a3554893915398db
                           .group:00000000 wm4.stm32f4xx.h.207.14fa426eaa9270fccf67225a85c55066
                           .group:00000000 wm4.stm32f4xx_hal_conf.h.42.14dbb308b3923aa896496f5e31c092c7
                           .group:00000000 wm4.stm32_hal_legacy.h.41.a0c7d1d1ab9e18b59678572b8fb0b559
                           .group:00000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:00000000 wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7
                           .group:00000000 wm4.features.h.22.5cdadbb3efe495d1c9e38350b8c376c7
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:00000000 wm4.cdefs.h.47.ba62642086d429b4f95c2381cae1c0aa
                           .group:00000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:00000000 wm4.stm32f4xx_hal_def.h.75.e45277c25f163200f11a5b130f34471b
                           .group:00000000 wm4.stm32f4xx_hal_rcc_ex.h.40.18b09d174fa574f01457792fbda5a4ed
                           .group:00000000 wm4.stm32f4xx_hal_rcc.h.126.909432743c2583b720bb0008d3cb601b
                           .group:00000000 wm4.stm32f4xx_hal_gpio.h.40.243a62750b839c18266a63bd9f8ec7de
                           .group:00000000 wm4.stm32f4xx_hal_gpio_ex.h.40.0690426f4d05c1c7df79d9f4fc37776e
                           .group:00000000 wm4.stm32f4xx_hal_gpio.h.282.bc507a844f3f1fa1ae0b260c571a1fed
                           .group:00000000 wm4.stm32f4xx_hal_dma.h.40.02a49c6d9ed69b414b5251b575cbb120
                           .group:00000000 wm4.stm32f4xx_hal_dma.h.711.7d8adff58fe0cdf7df8cf0b38bcda9a8
                           .group:00000000 wm4.stm32f4xx_hal_cortex.h.40.bd6bd5e21d30d93b5cc09e6379f85579
                           .group:00000000 wm4.stm32f4xx_hal_adc.h.40.5f72b7209e41daf25ebb2d3f44ed6022
                           .group:00000000 wm4.stm32f4xx_hal_adc_ex.h.40.74ffed63201beef39029db39ae4000e6
                           .group:00000000 wm4.stm32f4xx_hal_adc.h.600.e2fa69b55dd5855ec79c5fa8d8138abc
                           .group:00000000 wm4.stm32f4xx_hal_crc.h.40.594a9fca6b84bdca454cc94fcb8ca1e6
                           .group:00000000 wm4.stm32f4xx_hal_flash.h.40.79f4e2fb2175b1d961992d107e3b97d1
                           .group:00000000 wm4.stm32f4xx_hal_flash_ex.h.40.078814aec6d39273876728f89faa5fdc
                           .group:00000000 wm4.stm32f4xx_hal_flash.h.377.f3276ca767858576e66724350a5f4b79
                           .group:00000000 wm4.stm32f4xx_hal_i2c.h.40.8777077c1b40711dfbb7fe5638c86b4d
                           .group:00000000 wm4.stm32f4xx_hal_i2c_ex.h.40.e977780240ecd3ff4625d90dde83acba
                           .group:00000000 wm4.stm32f4xx_hal_i2c.h.569.f33af1dad4d641ffefd5962b45d8017e
                           .group:00000000 wm4.stm32f4xx_hal_i2s.h.40.adbb9357230b37d5785903f9377ef643
                           .group:00000000 wm4.stm32f4xx_hal_i2s_ex.h.40.b1b981bde8df0507aeadd7d987ff19d8
                           .group:00000000 wm4.stm32f4xx_hal_i2s.h.430.18183ec6891f9817e472056534290a64
                           .group:00000000 wm4.stm32f4xx_hal_iwdg.h.40.10b3ce62d06ce16241c746ce2681a9e9
                           .group:00000000 wm4.stm32f4xx_hal_pwr.h.40.48daf2b1572aa696f3e5573f36f3559f
                           .group:00000000 wm4.stm32f4xx_hal_pwr_ex.h.40.ee590d0a8b48cfc5bfa7320dcdefbe45
                           .group:00000000 wm4.stm32f4xx_hal_pwr.h.355.c8e79697d7e1fddc6656ac227acc439d
                           .group:00000000 wm4.stm32f4xx_hal_rtc.h.40.e8a9eca417eb1ea85c96699fa4825564
                           .group:00000000 wm4.stm32f4xx_hal_rtc_ex.h.40.48c33335eaffa2c91e1128c060b49586
                           .group:00000000 wm4.stm32f4xx_hal_rtc.h.711.01e1e4428c2c9ff324d2c3be286796df
                           .group:00000000 wm4.stm32f4xx_ll_sdmmc.h.40.74276ace32060010e79af5af02a40636
                           .group:00000000 wm4.stm32f4xx_hal_sd.h.70.44ce64a00d3a49c8b3953658ff6ee61b
                           .group:00000000 wm4.stm32f4xx_hal_spi.h.40.53d65072187e01517c8ed17e13b46fd9
                           .group:00000000 wm4.stm32f4xx_hal_tim.h.40.2ddd43345448926f7508d4d414cd8d44
                           .group:00000000 wm4.stm32f4xx_hal_tim_ex.h.40.51c404f3398176729c77ba26df5737f5
                           .group:00000000 wm4.stm32f4xx_hal_tim.h.1342.8e4b73046a1408dd961d89c806992d06
                           .group:00000000 wm4.stm32f4xx_hal_uart.h.40.4115b2b612e1b133e868ca3d153a397c
                           .group:00000000 wm4.stm32f4xx_hal_usart.h.40.0da1ae9e4b27096d199a6f6bbedee03d
                           .group:00000000 wm4.stm32f4xx_hal_irda.h.40.7b01c4194527bf309de0c25e6a1b6c61
                           .group:00000000 wm4.stm32f4xx_hal_smartcard.h.40.9cae48d13a13aeffbf67a67e90e13923
                           .group:00000000 wm4.stm32f4xx_hal_wwdg.h.40.18044949aad98f3b5c6a15b0659eb4bb
                           .group:00000000 wm4.stm32f4xx_ll_usb.h.40.45b30db8377470652f55eaa1d2fb7567
                           .group:00000000 wm4.stm32f4xx_hal_pcd.h.133.3788c362c5460e4abdebbc72798ed2c4
                           .group:00000000 wm4.stm32f4xx_hal_hcd.h.40.fab9d48aa62190d6b2f837ad19b189aa
                           .group:00000000 wm4.stm32f4xx_hal.h.67.9f84fd90ea7b366046c2f5ad9e68743c
                           .group:00000000 wm4.semihosting.h.29.e1653dbea6634b93ff8fe25df9a0d7b2
                           .group:00000000 wm4.unistd.h.2.39165d5b7784d1815ef4b0c4be6df560
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.unistd.h.156.74e26bdd1b78d9a50719dd472125647d
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
_start
trace_printf
