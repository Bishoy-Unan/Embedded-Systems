
LAB2_DIO_TASK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fe  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2c  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cf  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000040  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_enumInit 00000018  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_voidGetPinVal 00000066  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  a0:	0c 94 b3 00 	jmp	0x166	; 0x166 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

0000017c <__bad_interrupt>:
 17c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000010e <main>:
#include "PortCFG.h"
#include<util/delay.h>


int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	0f 92       	push	r0
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Button = 1 ;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumPins_t SwitchPin = DIO_enumPIN0;
	DIO_enumInit();
 11c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_enumInit>
	u8 hanan=0;
    while(1)
    {
		
        DIO_voidGetPinVal(DIO_PORTB,SwitchPin,&Local_u8Button);
 120:	ae 01       	movw	r20, r28
 122:	4f 5f       	subi	r20, 0xFF	; 255
 124:	5f 4f       	sbci	r21, 0xFF	; 255
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 54 00 	call	0xa8	; 0xa8 <__data_load_end>
        if(Local_u8Button==0)
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	81 11       	cpse	r24, r1
 132:	f6 cf       	rjmp	.-20     	; 0x120 <main+0x12>
        {
			hanan++;
	        PORTA +=1;
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f e3       	ldi	r18, 0x3F	; 63
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	93 e0       	ldi	r25, 0x03	; 3
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x32>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3c>
 14a:	00 00       	nop
 14c:	e9 cf       	rjmp	.-46     	; 0x120 <main+0x12>

Disassembly of section .text.DIO_enumInit:

0000014e <DIO_enumInit>:
						#warning " invalid configration "
				#endif
			/**
			*@ assign pins configration in Data Direction Register and PORT register
			*/	
			DDRA  = CONCAT(PIN7_DDR,PIN6_DDR,PIN5_DDR,PIN4_DDR,PIN3_DDR,PIN2_DDR,PIN1_DDR,PIN0_DDR);
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	8a bb       	out	0x1a, r24	; 26
			PORTA = CONCAT(PIN7_PORT,PIN6_PORT,PIN5_PORT,PIN4_PORT,PIN3_PORT,PIN2_PORT,PIN1_PORT,PIN0_PORT);	
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8b bb       	out	0x1b, r24	; 27
						#warning " invalid configration "
				#endif
			/**
			*@ assign pins configration in Data Direction Register and PORT register
			*/	
			DDRB  = CONCAT(PIN7_DDR,PIN6_DDR,PIN5_DDR,PIN4_DDR,PIN3_DDR,PIN2_DDR,PIN1_DDR,PIN0_DDR);
 156:	17 ba       	out	0x17, r1	; 23
			PORTB = CONCAT(PIN7_PORT,PIN6_PORT,PIN5_PORT,PIN4_PORT,PIN3_PORT,PIN2_PORT,PIN1_PORT,PIN0_PORT);	
 158:	88 bb       	out	0x18, r24	; 24
						#warning " invalid configration "
				#endif
			/**
			*@ assign pins configration in Data Direction Register and PORT register
			*/	
			DDRC  = CONCAT(PIN7_DDR,PIN6_DDR,PIN5_DDR,PIN4_DDR,PIN3_DDR,PIN2_DDR,PIN1_DDR,PIN0_DDR);
 15a:	14 ba       	out	0x14, r1	; 20
			PORTC = CONCAT(PIN7_PORT,PIN6_PORT,PIN5_PORT,PIN4_PORT,PIN3_PORT,PIN2_PORT,PIN1_PORT,PIN0_PORT);	
 15c:	85 bb       	out	0x15, r24	; 21
						#warning " invalid configration "
				#endif
			/**
			*@ assign pins configration in Data Direction Register and PORT register
			*/	
			DDRD  = CONCAT(PIN7_DDR,PIN6_DDR,PIN5_DDR,PIN4_DDR,PIN3_DDR,PIN2_DDR,PIN1_DDR,PIN0_DDR);
 15e:	11 ba       	out	0x11, r1	; 17
			PORTD = CONCAT(PIN7_PORT,PIN6_PORT,PIN5_PORT,PIN4_PORT,PIN3_PORT,PIN2_PORT,PIN1_PORT,PIN0_PORT);	
 160:	82 bb       	out	0x12, r24	; 18

		#endif				


		return DIO_enumReturnErrorStatus;
	}/**dio inite pretbuild configration mode**/		
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret

Disassembly of section .text.DIO_voidGetPinVal:

000000a8 <DIO_voidGetPinVal>:

	DIO_enumError_t  DIO_voidGetPinVal(u8 Copy_u8PortNum, u8 Copy_u8PinNum , u8 * Pu8PinVal) 
		{
			DIO_enumError_t DIO_enumReturnErrorStatus = DIO_enumOK ;
			
				if (Copy_u8PortNum == DIO_PORTA) 
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	59 f4       	brne	.+22     	; 0xc2 <DIO_voidGetPinVal+0x1a>
					*Pu8PinVal = GET_BIT(PINA,Copy_u8PinNum);	
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_voidGetPinVal+0xe>
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_voidGetPinVal+0xa>
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	fa 01       	movw	r30, r20
  be:	80 83       	st	Z, r24
  c0:	24 c0       	rjmp	.+72     	; 0x10a <DIO_voidGetPinVal+0x62>
				else if (Copy_u8PortNum == DIO_PORTB) 
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_voidGetPinVal+0x34>
					*Pu8PinVal = GET_BIT(PINB,Copy_u8PinNum);
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_voidGetPinVal+0x28>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_voidGetPinVal+0x24>
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	fa 01       	movw	r30, r20
  d8:	80 83       	st	Z, r24
  da:	17 c0       	rjmp	.+46     	; 0x10a <DIO_voidGetPinVal+0x62>
				else if (Copy_u8PortNum == DIO_PORTC) 
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_voidGetPinVal+0x4e>
					*Pu8PinVal = GET_BIT(PINC,Copy_u8PinNum);
  e0:	83 b3       	in	r24, 0x13	; 19
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidGetPinVal+0x42>
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidGetPinVal+0x3e>
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	fa 01       	movw	r30, r20
  f2:	80 83       	st	Z, r24
  f4:	0a c0       	rjmp	.+20     	; 0x10a <DIO_voidGetPinVal+0x62>
				else
					*Pu8PinVal = GET_BIT(PIND,Copy_u8PinNum);
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_voidGetPinVal+0x58>
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_voidGetPinVal+0x54>
 104:	81 70       	andi	r24, 0x01	; 1
 106:	fa 01       	movw	r30, r20
 108:	80 83       	st	Z, r24
					
		
			return DIO_enumReturnErrorStatus;
		}/*DIO_voidGetPinVal*/
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000184 <_fini>:
 184:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000186 <__funcs_on_exit>:
 186:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000188 <__simulator_exit>:
 188:	08 95       	ret

Disassembly of section .text.exit:

00000166 <exit>:
 166:	ec 01       	movw	r28, r24
 168:	0e 94 c3 00 	call	0x186	; 0x186 <__funcs_on_exit>
 16c:	0e 94 c2 00 	call	0x184	; 0x184 <_fini>
 170:	ce 01       	movw	r24, r28
 172:	0e 94 c4 00 	call	0x188	; 0x188 <__simulator_exit>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 c0 00 	call	0x180	; 0x180 <_Exit>

Disassembly of section .text._Exit:

00000180 <_Exit>:
 180:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
